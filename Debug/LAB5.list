
LAB5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047e4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  080048f0  080048f0  000148f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049d8  080049d8  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  080049d8  080049d8  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  080049d8  080049d8  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049d8  080049d8  000149d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049dc  080049dc  000149dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080049e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  20000084  08004a64  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  08004a64  000201d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011479  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000280f  00000000  00000000  00031526  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e40  00000000  00000000  00033d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d38  00000000  00000000  00034b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000199c7  00000000  00000000  000358b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe69  00000000  00000000  0004f277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008eb13  00000000  00000000  0005f0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000edbf3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004430  00000000  00000000  000edc48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000084 	.word	0x20000084
 8000128:	00000000 	.word	0x00000000
 800012c:	080048d8 	.word	0x080048d8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000088 	.word	0x20000088
 8000148:	080048d8 	.word	0x080048d8

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <command_parser_fsm>:
int command_flag;
char command_data[MAX_BUFFER_SIZE + 1];
int command_data_size = 0;

void command_parser_fsm(void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	switch (command_state)
 8000174:	4b1a      	ldr	r3, [pc, #104]	; (80001e0 <command_parser_fsm+0x70>)
 8000176:	781b      	ldrb	r3, [r3, #0]
 8000178:	2b00      	cmp	r3, #0
 800017a:	d002      	beq.n	8000182 <command_parser_fsm+0x12>
 800017c:	2b01      	cmp	r3, #1
 800017e:	d008      	beq.n	8000192 <command_parser_fsm+0x22>
		{
			command_data[command_data_size++] = temp;
		}
		break;
	}
}
 8000180:	e02a      	b.n	80001d8 <command_parser_fsm+0x68>
		if (temp == '!')
 8000182:	4b18      	ldr	r3, [pc, #96]	; (80001e4 <command_parser_fsm+0x74>)
 8000184:	781b      	ldrb	r3, [r3, #0]
 8000186:	2b21      	cmp	r3, #33	; 0x21
 8000188:	d125      	bne.n	80001d6 <command_parser_fsm+0x66>
			command_state = PARSING;
 800018a:	4b15      	ldr	r3, [pc, #84]	; (80001e0 <command_parser_fsm+0x70>)
 800018c:	2201      	movs	r2, #1
 800018e:	701a      	strb	r2, [r3, #0]
		break;
 8000190:	e021      	b.n	80001d6 <command_parser_fsm+0x66>
		if (temp == '#')
 8000192:	4b14      	ldr	r3, [pc, #80]	; (80001e4 <command_parser_fsm+0x74>)
 8000194:	781b      	ldrb	r3, [r3, #0]
 8000196:	2b23      	cmp	r3, #35	; 0x23
 8000198:	d10b      	bne.n	80001b2 <command_parser_fsm+0x42>
			command_data[command_data_size] = '\0';
 800019a:	4b13      	ldr	r3, [pc, #76]	; (80001e8 <command_parser_fsm+0x78>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	4a13      	ldr	r2, [pc, #76]	; (80001ec <command_parser_fsm+0x7c>)
 80001a0:	2100      	movs	r1, #0
 80001a2:	54d1      	strb	r1, [r2, r3]
			command_flag = 1;
 80001a4:	4b12      	ldr	r3, [pc, #72]	; (80001f0 <command_parser_fsm+0x80>)
 80001a6:	2201      	movs	r2, #1
 80001a8:	601a      	str	r2, [r3, #0]
			command_state = WAITING;
 80001aa:	4b0d      	ldr	r3, [pc, #52]	; (80001e0 <command_parser_fsm+0x70>)
 80001ac:	2200      	movs	r2, #0
 80001ae:	701a      	strb	r2, [r3, #0]
		break;
 80001b0:	e012      	b.n	80001d8 <command_parser_fsm+0x68>
		else if (temp == '!')
 80001b2:	4b0c      	ldr	r3, [pc, #48]	; (80001e4 <command_parser_fsm+0x74>)
 80001b4:	781b      	ldrb	r3, [r3, #0]
 80001b6:	2b21      	cmp	r3, #33	; 0x21
 80001b8:	d103      	bne.n	80001c2 <command_parser_fsm+0x52>
			command_data_size = 0;
 80001ba:	4b0b      	ldr	r3, [pc, #44]	; (80001e8 <command_parser_fsm+0x78>)
 80001bc:	2200      	movs	r2, #0
 80001be:	601a      	str	r2, [r3, #0]
		break;
 80001c0:	e00a      	b.n	80001d8 <command_parser_fsm+0x68>
			command_data[command_data_size++] = temp;
 80001c2:	4b09      	ldr	r3, [pc, #36]	; (80001e8 <command_parser_fsm+0x78>)
 80001c4:	681b      	ldr	r3, [r3, #0]
 80001c6:	1c5a      	adds	r2, r3, #1
 80001c8:	4907      	ldr	r1, [pc, #28]	; (80001e8 <command_parser_fsm+0x78>)
 80001ca:	600a      	str	r2, [r1, #0]
 80001cc:	4a05      	ldr	r2, [pc, #20]	; (80001e4 <command_parser_fsm+0x74>)
 80001ce:	7811      	ldrb	r1, [r2, #0]
 80001d0:	4a06      	ldr	r2, [pc, #24]	; (80001ec <command_parser_fsm+0x7c>)
 80001d2:	54d1      	strb	r1, [r2, r3]
		break;
 80001d4:	e000      	b.n	80001d8 <command_parser_fsm+0x68>
		break;
 80001d6:	bf00      	nop
}
 80001d8:	bf00      	nop
 80001da:	46bd      	mov	sp, r7
 80001dc:	bc80      	pop	{r7}
 80001de:	4770      	bx	lr
 80001e0:	200000a4 	.word	0x200000a4
 80001e4:	200000a5 	.word	0x200000a5
 80001e8:	200000a0 	.word	0x200000a0
 80001ec:	200000c4 	.word	0x200000c4
 80001f0:	200000e4 	.word	0x200000e4

080001f4 <HAL_UART_RxCpltCallback>:

uint8_t buffer[MAX_BUFFER_SIZE];
uint8_t index_buffer = 0;
uint8_t buffer_flag = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b082      	sub	sp, #8
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a13      	ldr	r2, [pc, #76]	; (8000250 <HAL_UART_RxCpltCallback+0x5c>)
 8000202:	4293      	cmp	r3, r2
 8000204:	d11f      	bne.n	8000246 <HAL_UART_RxCpltCallback+0x52>
	{
		HAL_UART_Transmit(&huart2, &temp, 1, 50);
 8000206:	2332      	movs	r3, #50	; 0x32
 8000208:	2201      	movs	r2, #1
 800020a:	4912      	ldr	r1, [pc, #72]	; (8000254 <HAL_UART_RxCpltCallback+0x60>)
 800020c:	4812      	ldr	r0, [pc, #72]	; (8000258 <HAL_UART_RxCpltCallback+0x64>)
 800020e:	f002 fcea 	bl	8002be6 <HAL_UART_Transmit>
		buffer[index_buffer++] = temp;
 8000212:	4b12      	ldr	r3, [pc, #72]	; (800025c <HAL_UART_RxCpltCallback+0x68>)
 8000214:	781b      	ldrb	r3, [r3, #0]
 8000216:	1c5a      	adds	r2, r3, #1
 8000218:	b2d1      	uxtb	r1, r2
 800021a:	4a10      	ldr	r2, [pc, #64]	; (800025c <HAL_UART_RxCpltCallback+0x68>)
 800021c:	7011      	strb	r1, [r2, #0]
 800021e:	461a      	mov	r2, r3
 8000220:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <HAL_UART_RxCpltCallback+0x60>)
 8000222:	7819      	ldrb	r1, [r3, #0]
 8000224:	4b0e      	ldr	r3, [pc, #56]	; (8000260 <HAL_UART_RxCpltCallback+0x6c>)
 8000226:	5499      	strb	r1, [r3, r2]
		if (index_buffer == 30)
 8000228:	4b0c      	ldr	r3, [pc, #48]	; (800025c <HAL_UART_RxCpltCallback+0x68>)
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	2b1e      	cmp	r3, #30
 800022e:	d102      	bne.n	8000236 <HAL_UART_RxCpltCallback+0x42>
			index_buffer = 0;
 8000230:	4b0a      	ldr	r3, [pc, #40]	; (800025c <HAL_UART_RxCpltCallback+0x68>)
 8000232:	2200      	movs	r2, #0
 8000234:	701a      	strb	r2, [r3, #0]
		buffer_flag = 1;
 8000236:	4b0b      	ldr	r3, [pc, #44]	; (8000264 <HAL_UART_RxCpltCallback+0x70>)
 8000238:	2201      	movs	r2, #1
 800023a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &temp, 1);
 800023c:	2201      	movs	r2, #1
 800023e:	4905      	ldr	r1, [pc, #20]	; (8000254 <HAL_UART_RxCpltCallback+0x60>)
 8000240:	4805      	ldr	r0, [pc, #20]	; (8000258 <HAL_UART_RxCpltCallback+0x64>)
 8000242:	f002 fd62 	bl	8002d0a <HAL_UART_Receive_IT>
	}
}
 8000246:	bf00      	nop
 8000248:	3708      	adds	r7, #8
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	40004400 	.word	0x40004400
 8000254:	200000a5 	.word	0x200000a5
 8000258:	20000180 	.word	0x20000180
 800025c:	200000a6 	.word	0x200000a6
 8000260:	20000118 	.word	0x20000118
 8000264:	200000a7 	.word	0x200000a7

08000268 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800026c:	f000 fce2 	bl	8000c34 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000270:	f000 f82c 	bl	80002cc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000274:	f000 f92e 	bl	80004d4 <MX_GPIO_Init>
	MX_TIM2_Init();
 8000278:	f000 f8b6 	bl	80003e8 <MX_TIM2_Init>
	MX_ADC1_Init();
 800027c:	f000 f876 	bl	800036c <MX_ADC1_Init>
	MX_USART2_UART_Init();
 8000280:	f000 f8fe 	bl	8000480 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8000284:	480c      	ldr	r0, [pc, #48]	; (80002b8 <main+0x50>)
 8000286:	f002 f8cd 	bl	8002424 <HAL_TIM_Base_Start_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	HAL_UART_Receive_IT(&huart2, &temp, 1);
 800028a:	2201      	movs	r2, #1
 800028c:	490b      	ldr	r1, [pc, #44]	; (80002bc <main+0x54>)
 800028e:	480c      	ldr	r0, [pc, #48]	; (80002c0 <main+0x58>)
 8000290:	f002 fd3b 	bl	8002d0a <HAL_UART_Receive_IT>
	HAL_ADC_Start(&hadc1);
 8000294:	480b      	ldr	r0, [pc, #44]	; (80002c4 <main+0x5c>)
 8000296:	f000 fe07 	bl	8000ea8 <HAL_ADC_Start>
	setTimerResend(10);
 800029a:	200a      	movs	r0, #10
 800029c:	f000 fb26 	bl	80008ec <setTimerResend>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (buffer_flag == 1)
 80002a0:	4b09      	ldr	r3, [pc, #36]	; (80002c8 <main+0x60>)
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	2b01      	cmp	r3, #1
 80002a6:	d104      	bne.n	80002b2 <main+0x4a>
		{
			command_parser_fsm();
 80002a8:	f7ff ff62 	bl	8000170 <command_parser_fsm>
			buffer_flag = 0;
 80002ac:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <main+0x60>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	701a      	strb	r2, [r3, #0]
		}
		uart_communiation_fsm();
 80002b2:	f000 fb4f 	bl	8000954 <uart_communiation_fsm>
		if (buffer_flag == 1)
 80002b6:	e7f3      	b.n	80002a0 <main+0x38>
 80002b8:	20000138 	.word	0x20000138
 80002bc:	200000a5 	.word	0x200000a5
 80002c0:	20000180 	.word	0x20000180
 80002c4:	200000e8 	.word	0x200000e8
 80002c8:	200000a7 	.word	0x200000a7

080002cc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b094      	sub	sp, #80	; 0x50
 80002d0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002d6:	2228      	movs	r2, #40	; 0x28
 80002d8:	2100      	movs	r1, #0
 80002da:	4618      	mov	r0, r3
 80002dc:	f003 f998 	bl	8003610 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e0:	f107 0314 	add.w	r3, r7, #20
 80002e4:	2200      	movs	r2, #0
 80002e6:	601a      	str	r2, [r3, #0]
 80002e8:	605a      	str	r2, [r3, #4]
 80002ea:	609a      	str	r2, [r3, #8]
 80002ec:	60da      	str	r2, [r3, #12]
 80002ee:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002f0:	1d3b      	adds	r3, r7, #4
 80002f2:	2200      	movs	r2, #0
 80002f4:	601a      	str	r2, [r3, #0]
 80002f6:	605a      	str	r2, [r3, #4]
 80002f8:	609a      	str	r2, [r3, #8]
 80002fa:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002fc:	2302      	movs	r3, #2
 80002fe:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000300:	2301      	movs	r3, #1
 8000302:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000304:	2310      	movs	r3, #16
 8000306:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000308:	2300      	movs	r3, #0
 800030a:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800030c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000310:	4618      	mov	r0, r3
 8000312:	f001 fb67 	bl	80019e4 <HAL_RCC_OscConfig>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <SystemClock_Config+0x54>
	{
		Error_Handler();
 800031c:	f000 f91b 	bl	8000556 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000320:	230f      	movs	r3, #15
 8000322:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000324:	2300      	movs	r3, #0
 8000326:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000328:	2300      	movs	r3, #0
 800032a:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800032c:	2300      	movs	r3, #0
 800032e:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000330:	2300      	movs	r3, #0
 8000332:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000334:	f107 0314 	add.w	r3, r7, #20
 8000338:	2100      	movs	r1, #0
 800033a:	4618      	mov	r0, r3
 800033c:	f001 fdd2 	bl	8001ee4 <HAL_RCC_ClockConfig>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <SystemClock_Config+0x7e>
	{
		Error_Handler();
 8000346:	f000 f906 	bl	8000556 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800034a:	2302      	movs	r3, #2
 800034c:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800034e:	2300      	movs	r3, #0
 8000350:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000352:	1d3b      	adds	r3, r7, #4
 8000354:	4618      	mov	r0, r3
 8000356:	f001 ff5f 	bl	8002218 <HAL_RCCEx_PeriphCLKConfig>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d001      	beq.n	8000364 <SystemClock_Config+0x98>
	{
		Error_Handler();
 8000360:	f000 f8f9 	bl	8000556 <Error_Handler>
	}
}
 8000364:	bf00      	nop
 8000366:	3750      	adds	r7, #80	; 0x50
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}

0800036c <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b084      	sub	sp, #16
 8000370:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8000372:	1d3b      	adds	r3, r7, #4
 8000374:	2200      	movs	r2, #0
 8000376:	601a      	str	r2, [r3, #0]
 8000378:	605a      	str	r2, [r3, #4]
 800037a:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 800037c:	4b18      	ldr	r3, [pc, #96]	; (80003e0 <MX_ADC1_Init+0x74>)
 800037e:	4a19      	ldr	r2, [pc, #100]	; (80003e4 <MX_ADC1_Init+0x78>)
 8000380:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000382:	4b17      	ldr	r3, [pc, #92]	; (80003e0 <MX_ADC1_Init+0x74>)
 8000384:	2200      	movs	r2, #0
 8000386:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000388:	4b15      	ldr	r3, [pc, #84]	; (80003e0 <MX_ADC1_Init+0x74>)
 800038a:	2201      	movs	r2, #1
 800038c:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800038e:	4b14      	ldr	r3, [pc, #80]	; (80003e0 <MX_ADC1_Init+0x74>)
 8000390:	2200      	movs	r2, #0
 8000392:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000394:	4b12      	ldr	r3, [pc, #72]	; (80003e0 <MX_ADC1_Init+0x74>)
 8000396:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800039a:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800039c:	4b10      	ldr	r3, [pc, #64]	; (80003e0 <MX_ADC1_Init+0x74>)
 800039e:	2200      	movs	r2, #0
 80003a0:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 80003a2:	4b0f      	ldr	r3, [pc, #60]	; (80003e0 <MX_ADC1_Init+0x74>)
 80003a4:	2201      	movs	r2, #1
 80003a6:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003a8:	480d      	ldr	r0, [pc, #52]	; (80003e0 <MX_ADC1_Init+0x74>)
 80003aa:	f000 fca5 	bl	8000cf8 <HAL_ADC_Init>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d001      	beq.n	80003b8 <MX_ADC1_Init+0x4c>
	{
		Error_Handler();
 80003b4:	f000 f8cf 	bl	8000556 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 80003b8:	2300      	movs	r3, #0
 80003ba:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80003bc:	2301      	movs	r3, #1
 80003be:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003c0:	2300      	movs	r3, #0
 80003c2:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003c4:	1d3b      	adds	r3, r7, #4
 80003c6:	4619      	mov	r1, r3
 80003c8:	4805      	ldr	r0, [pc, #20]	; (80003e0 <MX_ADC1_Init+0x74>)
 80003ca:	f000 fe27 	bl	800101c <HAL_ADC_ConfigChannel>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d001      	beq.n	80003d8 <MX_ADC1_Init+0x6c>
	{
		Error_Handler();
 80003d4:	f000 f8bf 	bl	8000556 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */
}
 80003d8:	bf00      	nop
 80003da:	3710      	adds	r7, #16
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	200000e8 	.word	0x200000e8
 80003e4:	40012400 	.word	0x40012400

080003e8 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b086      	sub	sp, #24
 80003ec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003ee:	f107 0308 	add.w	r3, r7, #8
 80003f2:	2200      	movs	r2, #0
 80003f4:	601a      	str	r2, [r3, #0]
 80003f6:	605a      	str	r2, [r3, #4]
 80003f8:	609a      	str	r2, [r3, #8]
 80003fa:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003fc:	463b      	mov	r3, r7
 80003fe:	2200      	movs	r2, #0
 8000400:	601a      	str	r2, [r3, #0]
 8000402:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000404:	4b1d      	ldr	r3, [pc, #116]	; (800047c <MX_TIM2_Init+0x94>)
 8000406:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800040a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 7999;
 800040c:	4b1b      	ldr	r3, [pc, #108]	; (800047c <MX_TIM2_Init+0x94>)
 800040e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000412:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000414:	4b19      	ldr	r3, [pc, #100]	; (800047c <MX_TIM2_Init+0x94>)
 8000416:	2200      	movs	r2, #0
 8000418:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 9;
 800041a:	4b18      	ldr	r3, [pc, #96]	; (800047c <MX_TIM2_Init+0x94>)
 800041c:	2209      	movs	r2, #9
 800041e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000420:	4b16      	ldr	r3, [pc, #88]	; (800047c <MX_TIM2_Init+0x94>)
 8000422:	2200      	movs	r2, #0
 8000424:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000426:	4b15      	ldr	r3, [pc, #84]	; (800047c <MX_TIM2_Init+0x94>)
 8000428:	2200      	movs	r2, #0
 800042a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800042c:	4813      	ldr	r0, [pc, #76]	; (800047c <MX_TIM2_Init+0x94>)
 800042e:	f001 ffa9 	bl	8002384 <HAL_TIM_Base_Init>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <MX_TIM2_Init+0x54>
	{
		Error_Handler();
 8000438:	f000 f88d 	bl	8000556 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800043c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000440:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000442:	f107 0308 	add.w	r3, r7, #8
 8000446:	4619      	mov	r1, r3
 8000448:	480c      	ldr	r0, [pc, #48]	; (800047c <MX_TIM2_Init+0x94>)
 800044a:	f002 f93f 	bl	80026cc <HAL_TIM_ConfigClockSource>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d001      	beq.n	8000458 <MX_TIM2_Init+0x70>
	{
		Error_Handler();
 8000454:	f000 f87f 	bl	8000556 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000458:	2300      	movs	r3, #0
 800045a:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800045c:	2300      	movs	r3, #0
 800045e:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000460:	463b      	mov	r3, r7
 8000462:	4619      	mov	r1, r3
 8000464:	4805      	ldr	r0, [pc, #20]	; (800047c <MX_TIM2_Init+0x94>)
 8000466:	f002 fb07 	bl	8002a78 <HAL_TIMEx_MasterConfigSynchronization>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <MX_TIM2_Init+0x8c>
	{
		Error_Handler();
 8000470:	f000 f871 	bl	8000556 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
}
 8000474:	bf00      	nop
 8000476:	3718      	adds	r7, #24
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	20000138 	.word	0x20000138

08000480 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000484:	4b11      	ldr	r3, [pc, #68]	; (80004cc <MX_USART2_UART_Init+0x4c>)
 8000486:	4a12      	ldr	r2, [pc, #72]	; (80004d0 <MX_USART2_UART_Init+0x50>)
 8000488:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 800048a:	4b10      	ldr	r3, [pc, #64]	; (80004cc <MX_USART2_UART_Init+0x4c>)
 800048c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000490:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000492:	4b0e      	ldr	r3, [pc, #56]	; (80004cc <MX_USART2_UART_Init+0x4c>)
 8000494:	2200      	movs	r2, #0
 8000496:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000498:	4b0c      	ldr	r3, [pc, #48]	; (80004cc <MX_USART2_UART_Init+0x4c>)
 800049a:	2200      	movs	r2, #0
 800049c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800049e:	4b0b      	ldr	r3, [pc, #44]	; (80004cc <MX_USART2_UART_Init+0x4c>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80004a4:	4b09      	ldr	r3, [pc, #36]	; (80004cc <MX_USART2_UART_Init+0x4c>)
 80004a6:	220c      	movs	r2, #12
 80004a8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004aa:	4b08      	ldr	r3, [pc, #32]	; (80004cc <MX_USART2_UART_Init+0x4c>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004b0:	4b06      	ldr	r3, [pc, #24]	; (80004cc <MX_USART2_UART_Init+0x4c>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80004b6:	4805      	ldr	r0, [pc, #20]	; (80004cc <MX_USART2_UART_Init+0x4c>)
 80004b8:	f002 fb48 	bl	8002b4c <HAL_UART_Init>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 80004c2:	f000 f848 	bl	8000556 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */
}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	20000180 	.word	0x20000180
 80004d0:	40004400 	.word	0x40004400

080004d4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b086      	sub	sp, #24
 80004d8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004da:	f107 0308 	add.w	r3, r7, #8
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
 80004e2:	605a      	str	r2, [r3, #4]
 80004e4:	609a      	str	r2, [r3, #8]
 80004e6:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80004e8:	4b11      	ldr	r3, [pc, #68]	; (8000530 <MX_GPIO_Init+0x5c>)
 80004ea:	699b      	ldr	r3, [r3, #24]
 80004ec:	4a10      	ldr	r2, [pc, #64]	; (8000530 <MX_GPIO_Init+0x5c>)
 80004ee:	f043 0304 	orr.w	r3, r3, #4
 80004f2:	6193      	str	r3, [r2, #24]
 80004f4:	4b0e      	ldr	r3, [pc, #56]	; (8000530 <MX_GPIO_Init+0x5c>)
 80004f6:	699b      	ldr	r3, [r3, #24]
 80004f8:	f003 0304 	and.w	r3, r3, #4
 80004fc:	607b      	str	r3, [r7, #4]
 80004fe:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000500:	2200      	movs	r2, #0
 8000502:	2120      	movs	r1, #32
 8000504:	480b      	ldr	r0, [pc, #44]	; (8000534 <MX_GPIO_Init+0x60>)
 8000506:	f001 fa55 	bl	80019b4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 800050a:	2320      	movs	r3, #32
 800050c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800050e:	2301      	movs	r3, #1
 8000510:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000512:	2300      	movs	r3, #0
 8000514:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000516:	2302      	movs	r3, #2
 8000518:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800051a:	f107 0308 	add.w	r3, r7, #8
 800051e:	4619      	mov	r1, r3
 8000520:	4804      	ldr	r0, [pc, #16]	; (8000534 <MX_GPIO_Init+0x60>)
 8000522:	f001 f8cd 	bl	80016c0 <HAL_GPIO_Init>
}
 8000526:	bf00      	nop
 8000528:	3718      	adds	r7, #24
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	40021000 	.word	0x40021000
 8000534:	40010800 	.word	0x40010800

08000538 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000548:	d101      	bne.n	800054e <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		timer_run();
 800054a:	f000 f9e9 	bl	8000920 <timer_run>
	}
}
 800054e:	bf00      	nop
 8000550:	3708      	adds	r7, #8
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}

08000556 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000556:	b480      	push	{r7}
 8000558:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800055a:	b672      	cpsid	i
}
 800055c:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800055e:	e7fe      	b.n	800055e <Error_Handler+0x8>

08000560 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000560:	b480      	push	{r7}
 8000562:	b085      	sub	sp, #20
 8000564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000566:	4b15      	ldr	r3, [pc, #84]	; (80005bc <HAL_MspInit+0x5c>)
 8000568:	699b      	ldr	r3, [r3, #24]
 800056a:	4a14      	ldr	r2, [pc, #80]	; (80005bc <HAL_MspInit+0x5c>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	6193      	str	r3, [r2, #24]
 8000572:	4b12      	ldr	r3, [pc, #72]	; (80005bc <HAL_MspInit+0x5c>)
 8000574:	699b      	ldr	r3, [r3, #24]
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	60bb      	str	r3, [r7, #8]
 800057c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800057e:	4b0f      	ldr	r3, [pc, #60]	; (80005bc <HAL_MspInit+0x5c>)
 8000580:	69db      	ldr	r3, [r3, #28]
 8000582:	4a0e      	ldr	r2, [pc, #56]	; (80005bc <HAL_MspInit+0x5c>)
 8000584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000588:	61d3      	str	r3, [r2, #28]
 800058a:	4b0c      	ldr	r3, [pc, #48]	; (80005bc <HAL_MspInit+0x5c>)
 800058c:	69db      	ldr	r3, [r3, #28]
 800058e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000596:	4b0a      	ldr	r3, [pc, #40]	; (80005c0 <HAL_MspInit+0x60>)
 8000598:	685b      	ldr	r3, [r3, #4]
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	4a04      	ldr	r2, [pc, #16]	; (80005c0 <HAL_MspInit+0x60>)
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005b2:	bf00      	nop
 80005b4:	3714      	adds	r7, #20
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bc80      	pop	{r7}
 80005ba:	4770      	bx	lr
 80005bc:	40021000 	.word	0x40021000
 80005c0:	40010000 	.word	0x40010000

080005c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b088      	sub	sp, #32
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005cc:	f107 0310 	add.w	r3, r7, #16
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4a14      	ldr	r2, [pc, #80]	; (8000630 <HAL_ADC_MspInit+0x6c>)
 80005e0:	4293      	cmp	r3, r2
 80005e2:	d121      	bne.n	8000628 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005e4:	4b13      	ldr	r3, [pc, #76]	; (8000634 <HAL_ADC_MspInit+0x70>)
 80005e6:	699b      	ldr	r3, [r3, #24]
 80005e8:	4a12      	ldr	r2, [pc, #72]	; (8000634 <HAL_ADC_MspInit+0x70>)
 80005ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005ee:	6193      	str	r3, [r2, #24]
 80005f0:	4b10      	ldr	r3, [pc, #64]	; (8000634 <HAL_ADC_MspInit+0x70>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80005f8:	60fb      	str	r3, [r7, #12]
 80005fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fc:	4b0d      	ldr	r3, [pc, #52]	; (8000634 <HAL_ADC_MspInit+0x70>)
 80005fe:	699b      	ldr	r3, [r3, #24]
 8000600:	4a0c      	ldr	r2, [pc, #48]	; (8000634 <HAL_ADC_MspInit+0x70>)
 8000602:	f043 0304 	orr.w	r3, r3, #4
 8000606:	6193      	str	r3, [r2, #24]
 8000608:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <HAL_ADC_MspInit+0x70>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	f003 0304 	and.w	r3, r3, #4
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000614:	2301      	movs	r3, #1
 8000616:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000618:	2303      	movs	r3, #3
 800061a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800061c:	f107 0310 	add.w	r3, r7, #16
 8000620:	4619      	mov	r1, r3
 8000622:	4805      	ldr	r0, [pc, #20]	; (8000638 <HAL_ADC_MspInit+0x74>)
 8000624:	f001 f84c 	bl	80016c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000628:	bf00      	nop
 800062a:	3720      	adds	r7, #32
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40012400 	.word	0x40012400
 8000634:	40021000 	.word	0x40021000
 8000638:	40010800 	.word	0x40010800

0800063c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800064c:	d113      	bne.n	8000676 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800064e:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <HAL_TIM_Base_MspInit+0x44>)
 8000650:	69db      	ldr	r3, [r3, #28]
 8000652:	4a0b      	ldr	r2, [pc, #44]	; (8000680 <HAL_TIM_Base_MspInit+0x44>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	61d3      	str	r3, [r2, #28]
 800065a:	4b09      	ldr	r3, [pc, #36]	; (8000680 <HAL_TIM_Base_MspInit+0x44>)
 800065c:	69db      	ldr	r3, [r3, #28]
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000666:	2200      	movs	r2, #0
 8000668:	2100      	movs	r1, #0
 800066a:	201c      	movs	r0, #28
 800066c:	f000 ff41 	bl	80014f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000670:	201c      	movs	r0, #28
 8000672:	f000 ff5a 	bl	800152a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000676:	bf00      	nop
 8000678:	3710      	adds	r7, #16
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40021000 	.word	0x40021000

08000684 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b088      	sub	sp, #32
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068c:	f107 0310 	add.w	r3, r7, #16
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4a1f      	ldr	r2, [pc, #124]	; (800071c <HAL_UART_MspInit+0x98>)
 80006a0:	4293      	cmp	r3, r2
 80006a2:	d137      	bne.n	8000714 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006a4:	4b1e      	ldr	r3, [pc, #120]	; (8000720 <HAL_UART_MspInit+0x9c>)
 80006a6:	69db      	ldr	r3, [r3, #28]
 80006a8:	4a1d      	ldr	r2, [pc, #116]	; (8000720 <HAL_UART_MspInit+0x9c>)
 80006aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006ae:	61d3      	str	r3, [r2, #28]
 80006b0:	4b1b      	ldr	r3, [pc, #108]	; (8000720 <HAL_UART_MspInit+0x9c>)
 80006b2:	69db      	ldr	r3, [r3, #28]
 80006b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006b8:	60fb      	str	r3, [r7, #12]
 80006ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006bc:	4b18      	ldr	r3, [pc, #96]	; (8000720 <HAL_UART_MspInit+0x9c>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	4a17      	ldr	r2, [pc, #92]	; (8000720 <HAL_UART_MspInit+0x9c>)
 80006c2:	f043 0304 	orr.w	r3, r3, #4
 80006c6:	6193      	str	r3, [r2, #24]
 80006c8:	4b15      	ldr	r3, [pc, #84]	; (8000720 <HAL_UART_MspInit+0x9c>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	f003 0304 	and.w	r3, r3, #4
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80006d4:	2304      	movs	r3, #4
 80006d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d8:	2302      	movs	r3, #2
 80006da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006dc:	2303      	movs	r3, #3
 80006de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e0:	f107 0310 	add.w	r3, r7, #16
 80006e4:	4619      	mov	r1, r3
 80006e6:	480f      	ldr	r0, [pc, #60]	; (8000724 <HAL_UART_MspInit+0xa0>)
 80006e8:	f000 ffea 	bl	80016c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006ec:	2308      	movs	r3, #8
 80006ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f0:	2300      	movs	r3, #0
 80006f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f8:	f107 0310 	add.w	r3, r7, #16
 80006fc:	4619      	mov	r1, r3
 80006fe:	4809      	ldr	r0, [pc, #36]	; (8000724 <HAL_UART_MspInit+0xa0>)
 8000700:	f000 ffde 	bl	80016c0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000704:	2200      	movs	r2, #0
 8000706:	2100      	movs	r1, #0
 8000708:	2026      	movs	r0, #38	; 0x26
 800070a:	f000 fef2 	bl	80014f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800070e:	2026      	movs	r0, #38	; 0x26
 8000710:	f000 ff0b 	bl	800152a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000714:	bf00      	nop
 8000716:	3720      	adds	r7, #32
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40004400 	.word	0x40004400
 8000720:	40021000 	.word	0x40021000
 8000724:	40010800 	.word	0x40010800

08000728 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800072c:	e7fe      	b.n	800072c <NMI_Handler+0x4>

0800072e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800072e:	b480      	push	{r7}
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000732:	e7fe      	b.n	8000732 <HardFault_Handler+0x4>

08000734 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000738:	e7fe      	b.n	8000738 <MemManage_Handler+0x4>

0800073a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800073a:	b480      	push	{r7}
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800073e:	e7fe      	b.n	800073e <BusFault_Handler+0x4>

08000740 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000744:	e7fe      	b.n	8000744 <UsageFault_Handler+0x4>

08000746 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000746:	b480      	push	{r7}
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800074a:	bf00      	nop
 800074c:	46bd      	mov	sp, r7
 800074e:	bc80      	pop	{r7}
 8000750:	4770      	bx	lr

08000752 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000752:	b480      	push	{r7}
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000756:	bf00      	nop
 8000758:	46bd      	mov	sp, r7
 800075a:	bc80      	pop	{r7}
 800075c:	4770      	bx	lr

0800075e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800075e:	b480      	push	{r7}
 8000760:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000762:	bf00      	nop
 8000764:	46bd      	mov	sp, r7
 8000766:	bc80      	pop	{r7}
 8000768:	4770      	bx	lr

0800076a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800076a:	b580      	push	{r7, lr}
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800076e:	f000 faa7 	bl	8000cc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
	...

08000778 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800077c:	4802      	ldr	r0, [pc, #8]	; (8000788 <TIM2_IRQHandler+0x10>)
 800077e:	f001 fe9d 	bl	80024bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20000138 	.word	0x20000138

0800078c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000790:	4802      	ldr	r0, [pc, #8]	; (800079c <USART2_IRQHandler+0x10>)
 8000792:	f002 faeb 	bl	8002d6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	20000180 	.word	0x20000180

080007a0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b086      	sub	sp, #24
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	60b9      	str	r1, [r7, #8]
 80007aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ac:	2300      	movs	r3, #0
 80007ae:	617b      	str	r3, [r7, #20]
 80007b0:	e00a      	b.n	80007c8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80007b2:	f3af 8000 	nop.w
 80007b6:	4601      	mov	r1, r0
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	1c5a      	adds	r2, r3, #1
 80007bc:	60ba      	str	r2, [r7, #8]
 80007be:	b2ca      	uxtb	r2, r1
 80007c0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007c2:	697b      	ldr	r3, [r7, #20]
 80007c4:	3301      	adds	r3, #1
 80007c6:	617b      	str	r3, [r7, #20]
 80007c8:	697a      	ldr	r2, [r7, #20]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	429a      	cmp	r2, r3
 80007ce:	dbf0      	blt.n	80007b2 <_read+0x12>
	}

return len;
 80007d0:	687b      	ldr	r3, [r7, #4]
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3718      	adds	r7, #24
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}

080007da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007da:	b580      	push	{r7, lr}
 80007dc:	b086      	sub	sp, #24
 80007de:	af00      	add	r7, sp, #0
 80007e0:	60f8      	str	r0, [r7, #12]
 80007e2:	60b9      	str	r1, [r7, #8]
 80007e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007e6:	2300      	movs	r3, #0
 80007e8:	617b      	str	r3, [r7, #20]
 80007ea:	e009      	b.n	8000800 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	1c5a      	adds	r2, r3, #1
 80007f0:	60ba      	str	r2, [r7, #8]
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	4618      	mov	r0, r3
 80007f6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007fa:	697b      	ldr	r3, [r7, #20]
 80007fc:	3301      	adds	r3, #1
 80007fe:	617b      	str	r3, [r7, #20]
 8000800:	697a      	ldr	r2, [r7, #20]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	429a      	cmp	r2, r3
 8000806:	dbf1      	blt.n	80007ec <_write+0x12>
	}
	return len;
 8000808:	687b      	ldr	r3, [r7, #4]
}
 800080a:	4618      	mov	r0, r3
 800080c:	3718      	adds	r7, #24
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}

08000812 <_close>:

int _close(int file)
{
 8000812:	b480      	push	{r7}
 8000814:	b083      	sub	sp, #12
 8000816:	af00      	add	r7, sp, #0
 8000818:	6078      	str	r0, [r7, #4]
	return -1;
 800081a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800081e:	4618      	mov	r0, r3
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr

08000828 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000838:	605a      	str	r2, [r3, #4]
	return 0;
 800083a:	2300      	movs	r3, #0
}
 800083c:	4618      	mov	r0, r3
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	bc80      	pop	{r7}
 8000844:	4770      	bx	lr

08000846 <_isatty>:

int _isatty(int file)
{
 8000846:	b480      	push	{r7}
 8000848:	b083      	sub	sp, #12
 800084a:	af00      	add	r7, sp, #0
 800084c:	6078      	str	r0, [r7, #4]
	return 1;
 800084e:	2301      	movs	r3, #1
}
 8000850:	4618      	mov	r0, r3
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	bc80      	pop	{r7}
 8000858:	4770      	bx	lr

0800085a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800085a:	b480      	push	{r7}
 800085c:	b085      	sub	sp, #20
 800085e:	af00      	add	r7, sp, #0
 8000860:	60f8      	str	r0, [r7, #12]
 8000862:	60b9      	str	r1, [r7, #8]
 8000864:	607a      	str	r2, [r7, #4]
	return 0;
 8000866:	2300      	movs	r3, #0
}
 8000868:	4618      	mov	r0, r3
 800086a:	3714      	adds	r7, #20
 800086c:	46bd      	mov	sp, r7
 800086e:	bc80      	pop	{r7}
 8000870:	4770      	bx	lr
	...

08000874 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b086      	sub	sp, #24
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800087c:	4a14      	ldr	r2, [pc, #80]	; (80008d0 <_sbrk+0x5c>)
 800087e:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <_sbrk+0x60>)
 8000880:	1ad3      	subs	r3, r2, r3
 8000882:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000888:	4b13      	ldr	r3, [pc, #76]	; (80008d8 <_sbrk+0x64>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d102      	bne.n	8000896 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000890:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <_sbrk+0x64>)
 8000892:	4a12      	ldr	r2, [pc, #72]	; (80008dc <_sbrk+0x68>)
 8000894:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000896:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <_sbrk+0x64>)
 8000898:	681a      	ldr	r2, [r3, #0]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	4413      	add	r3, r2
 800089e:	693a      	ldr	r2, [r7, #16]
 80008a0:	429a      	cmp	r2, r3
 80008a2:	d207      	bcs.n	80008b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008a4:	f002 fe8a 	bl	80035bc <__errno>
 80008a8:	4603      	mov	r3, r0
 80008aa:	220c      	movs	r2, #12
 80008ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008ae:	f04f 33ff 	mov.w	r3, #4294967295
 80008b2:	e009      	b.n	80008c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008b4:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <_sbrk+0x64>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008ba:	4b07      	ldr	r3, [pc, #28]	; (80008d8 <_sbrk+0x64>)
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	4413      	add	r3, r2
 80008c2:	4a05      	ldr	r2, [pc, #20]	; (80008d8 <_sbrk+0x64>)
 80008c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008c6:	68fb      	ldr	r3, [r7, #12]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3718      	adds	r7, #24
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20002800 	.word	0x20002800
 80008d4:	00000400 	.word	0x00000400
 80008d8:	200000a8 	.word	0x200000a8
 80008dc:	200001d8 	.word	0x200001d8

080008e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bc80      	pop	{r7}
 80008ea:	4770      	bx	lr

080008ec <setTimerResend>:

int timerResend_counter = 0;
int timerResend_flag = 1;

void setTimerResend(int duration)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
	timerResend_counter = duration / TIMER_CYCLE;
 80008f4:	4b07      	ldr	r3, [pc, #28]	; (8000914 <setTimerResend+0x28>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	687a      	ldr	r2, [r7, #4]
 80008fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80008fe:	4a06      	ldr	r2, [pc, #24]	; (8000918 <setTimerResend+0x2c>)
 8000900:	6013      	str	r3, [r2, #0]
	timerResend_flag = 0;
 8000902:	4b06      	ldr	r3, [pc, #24]	; (800091c <setTimerResend+0x30>)
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
}
 8000908:	bf00      	nop
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	bc80      	pop	{r7}
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	20000004 	.word	0x20000004
 8000918:	200000ac 	.word	0x200000ac
 800091c:	20000008 	.word	0x20000008

08000920 <timer_run>:

void timer_run()
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
	if (timerResend_counter > 0)
 8000924:	4b09      	ldr	r3, [pc, #36]	; (800094c <timer_run+0x2c>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	2b00      	cmp	r3, #0
 800092a:	dd0b      	ble.n	8000944 <timer_run+0x24>
	{
		timerResend_counter--;
 800092c:	4b07      	ldr	r3, [pc, #28]	; (800094c <timer_run+0x2c>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	3b01      	subs	r3, #1
 8000932:	4a06      	ldr	r2, [pc, #24]	; (800094c <timer_run+0x2c>)
 8000934:	6013      	str	r3, [r2, #0]
		if (timerResend_counter <= 0)
 8000936:	4b05      	ldr	r3, [pc, #20]	; (800094c <timer_run+0x2c>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	2b00      	cmp	r3, #0
 800093c:	dc02      	bgt.n	8000944 <timer_run+0x24>
			timerResend_flag = 1;
 800093e:	4b04      	ldr	r3, [pc, #16]	; (8000950 <timer_run+0x30>)
 8000940:	2201      	movs	r2, #1
 8000942:	601a      	str	r2, [r3, #0]
	}
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	bc80      	pop	{r7}
 800094a:	4770      	bx	lr
 800094c:	200000ac 	.word	0x200000ac
 8000950:	20000008 	.word	0x20000008

08000954 <uart_communiation_fsm>:
char *request = "RST";
char *ok = "OK";
char *led7seg= "7SEG:";

void uart_communiation_fsm(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b090      	sub	sp, #64	; 0x40
 8000958:	af00      	add	r7, sp, #0
	switch (communication_state)
 800095a:	4b92      	ldr	r3, [pc, #584]	; (8000ba4 <uart_communiation_fsm+0x250>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	2b02      	cmp	r3, #2
 8000960:	f000 80a5 	beq.w	8000aae <uart_communiation_fsm+0x15a>
 8000964:	2b02      	cmp	r3, #2
 8000966:	f300 8119 	bgt.w	8000b9c <uart_communiation_fsm+0x248>
 800096a:	2b00      	cmp	r3, #0
 800096c:	d002      	beq.n	8000974 <uart_communiation_fsm+0x20>
 800096e:	2b01      	cmp	r3, #1
 8000970:	d009      	beq.n	8000986 <uart_communiation_fsm+0x32>
			HAL_UART_Transmit(&huart2, (void *)str,printf("%s\r\n",str), 1000);
			setTimerResend(RESENDING_TIME);
		}
		break;
	}
}
 8000972:	e113      	b.n	8000b9c <uart_communiation_fsm+0x248>
		if (command_flag)
 8000974:	4b8c      	ldr	r3, [pc, #560]	; (8000ba8 <uart_communiation_fsm+0x254>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2b00      	cmp	r3, #0
 800097a:	f000 810c 	beq.w	8000b96 <uart_communiation_fsm+0x242>
			communication_state = CHECKING_COMMAND;
 800097e:	4b89      	ldr	r3, [pc, #548]	; (8000ba4 <uart_communiation_fsm+0x250>)
 8000980:	2201      	movs	r2, #1
 8000982:	701a      	strb	r2, [r3, #0]
		break;
 8000984:	e107      	b.n	8000b96 <uart_communiation_fsm+0x242>
		if (strcmp(command_data, request) == 0)
 8000986:	4b89      	ldr	r3, [pc, #548]	; (8000bac <uart_communiation_fsm+0x258>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4619      	mov	r1, r3
 800098c:	4888      	ldr	r0, [pc, #544]	; (8000bb0 <uart_communiation_fsm+0x25c>)
 800098e:	f7ff fbdd 	bl	800014c <strcmp>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d12c      	bne.n	80009f2 <uart_communiation_fsm+0x9e>
			ADC_value = HAL_ADC_GetValue(&hadc1);
 8000998:	4886      	ldr	r0, [pc, #536]	; (8000bb4 <uart_communiation_fsm+0x260>)
 800099a:	f000 fb33 	bl	8001004 <HAL_ADC_GetValue>
 800099e:	4603      	mov	r3, r0
 80009a0:	4a85      	ldr	r2, [pc, #532]	; (8000bb8 <uart_communiation_fsm+0x264>)
 80009a2:	6013      	str	r3, [r2, #0]
			ADC_value = ADC_value * 5 / 4095;
 80009a4:	4b84      	ldr	r3, [pc, #528]	; (8000bb8 <uart_communiation_fsm+0x264>)
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	4613      	mov	r3, r2
 80009aa:	009b      	lsls	r3, r3, #2
 80009ac:	441a      	add	r2, r3
 80009ae:	4b83      	ldr	r3, [pc, #524]	; (8000bbc <uart_communiation_fsm+0x268>)
 80009b0:	fba3 1302 	umull	r1, r3, r3, r2
 80009b4:	1ad2      	subs	r2, r2, r3
 80009b6:	0852      	lsrs	r2, r2, #1
 80009b8:	4413      	add	r3, r2
 80009ba:	0adb      	lsrs	r3, r3, #11
 80009bc:	4a7e      	ldr	r2, [pc, #504]	; (8000bb8 <uart_communiation_fsm+0x264>)
 80009be:	6013      	str	r3, [r2, #0]
							  sprintf(str, "\r\n%ld", ADC_value), 1000);
 80009c0:	4b7d      	ldr	r3, [pc, #500]	; (8000bb8 <uart_communiation_fsm+0x264>)
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c8:	497d      	ldr	r1, [pc, #500]	; (8000bc0 <uart_communiation_fsm+0x26c>)
 80009ca:	4618      	mov	r0, r3
 80009cc:	f002 fe40 	bl	8003650 <siprintf>
 80009d0:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart2, (void *)str,
 80009d2:	b29a      	uxth	r2, r3
 80009d4:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80009d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009dc:	4879      	ldr	r0, [pc, #484]	; (8000bc4 <uart_communiation_fsm+0x270>)
 80009de:	f002 f902 	bl	8002be6 <HAL_UART_Transmit>
			resend_flag = 1;
 80009e2:	4b79      	ldr	r3, [pc, #484]	; (8000bc8 <uart_communiation_fsm+0x274>)
 80009e4:	2201      	movs	r2, #1
 80009e6:	601a      	str	r2, [r3, #0]
			setTimerResend(RESENDING_TIME);
 80009e8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80009ec:	f7ff ff7e 	bl	80008ec <setTimerResend>
 80009f0:	e03f      	b.n	8000a72 <uart_communiation_fsm+0x11e>
		else if(strstr(command_data,led7seg) != NULL){
 80009f2:	4b76      	ldr	r3, [pc, #472]	; (8000bcc <uart_communiation_fsm+0x278>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4619      	mov	r1, r3
 80009f8:	486d      	ldr	r0, [pc, #436]	; (8000bb0 <uart_communiation_fsm+0x25c>)
 80009fa:	f002 fe5c 	bl	80036b6 <strstr>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d036      	beq.n	8000a72 <uart_communiation_fsm+0x11e>
			int len7LED = strlen(led7seg);
 8000a04:	4b71      	ldr	r3, [pc, #452]	; (8000bcc <uart_communiation_fsm+0x278>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff fba9 	bl	8000160 <strlen>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	637b      	str	r3, [r7, #52]	; 0x34
			int lenCommand = strlen(command_data);
 8000a12:	4867      	ldr	r0, [pc, #412]	; (8000bb0 <uart_communiation_fsm+0x25c>)
 8000a14:	f7ff fba4 	bl	8000160 <strlen>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	633b      	str	r3, [r7, #48]	; 0x30
			strncpy(str,command_data + len7LED, lenCommand - len7LED);
 8000a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a1e:	4a64      	ldr	r2, [pc, #400]	; (8000bb0 <uart_communiation_fsm+0x25c>)
 8000a20:	1899      	adds	r1, r3, r2
 8000a22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a26:	1ad3      	subs	r3, r2, r3
 8000a28:	461a      	mov	r2, r3
 8000a2a:	f107 0318 	add.w	r3, r7, #24
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f002 fe2e 	bl	8003690 <strncpy>
			str[lenCommand - len7LED] = '\0';
 8000a34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a38:	1ad3      	subs	r3, r2, r3
 8000a3a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000a3e:	4413      	add	r3, r2
 8000a40:	2200      	movs	r2, #0
 8000a42:	f803 2c28 	strb.w	r2, [r3, #-40]
			HAL_UART_Transmit(&huart2, (void *)str, printf("\r\n%s\r\n",str), 1000);
 8000a46:	f107 0318 	add.w	r3, r7, #24
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4860      	ldr	r0, [pc, #384]	; (8000bd0 <uart_communiation_fsm+0x27c>)
 8000a4e:	f002 fde7 	bl	8003620 <iprintf>
 8000a52:	4603      	mov	r3, r0
 8000a54:	b29a      	uxth	r2, r3
 8000a56:	f107 0118 	add.w	r1, r7, #24
 8000a5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a5e:	4859      	ldr	r0, [pc, #356]	; (8000bc4 <uart_communiation_fsm+0x270>)
 8000a60:	f002 f8c1 	bl	8002be6 <HAL_UART_Transmit>
			resend_flag = 1;
 8000a64:	4b58      	ldr	r3, [pc, #352]	; (8000bc8 <uart_communiation_fsm+0x274>)
 8000a66:	2201      	movs	r2, #1
 8000a68:	601a      	str	r2, [r3, #0]
			setTimerResend(RESENDING_TIME);
 8000a6a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000a6e:	f7ff ff3d 	bl	80008ec <setTimerResend>
		if (strcmp(command_data, ok) == 0)
 8000a72:	4b58      	ldr	r3, [pc, #352]	; (8000bd4 <uart_communiation_fsm+0x280>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4619      	mov	r1, r3
 8000a78:	484d      	ldr	r0, [pc, #308]	; (8000bb0 <uart_communiation_fsm+0x25c>)
 8000a7a:	f7ff fb67 	bl	800014c <strcmp>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d102      	bne.n	8000a8a <uart_communiation_fsm+0x136>
			resend_flag = 0;
 8000a84:	4b50      	ldr	r3, [pc, #320]	; (8000bc8 <uart_communiation_fsm+0x274>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
		if (resend_flag == 1)
 8000a8a:	4b4f      	ldr	r3, [pc, #316]	; (8000bc8 <uart_communiation_fsm+0x274>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d103      	bne.n	8000a9a <uart_communiation_fsm+0x146>
			communication_state = RESEND;
 8000a92:	4b44      	ldr	r3, [pc, #272]	; (8000ba4 <uart_communiation_fsm+0x250>)
 8000a94:	2202      	movs	r2, #2
 8000a96:	701a      	strb	r2, [r3, #0]
 8000a98:	e002      	b.n	8000aa0 <uart_communiation_fsm+0x14c>
			communication_state = WAITING;
 8000a9a:	4b42      	ldr	r3, [pc, #264]	; (8000ba4 <uart_communiation_fsm+0x250>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	701a      	strb	r2, [r3, #0]
		command_data_size = 0;
 8000aa0:	4b4d      	ldr	r3, [pc, #308]	; (8000bd8 <uart_communiation_fsm+0x284>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
		command_flag = 0;
 8000aa6:	4b40      	ldr	r3, [pc, #256]	; (8000ba8 <uart_communiation_fsm+0x254>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
		break;
 8000aac:	e076      	b.n	8000b9c <uart_communiation_fsm+0x248>
		if (command_flag == 1)
 8000aae:	4b3e      	ldr	r3, [pc, #248]	; (8000ba8 <uart_communiation_fsm+0x254>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d102      	bne.n	8000abc <uart_communiation_fsm+0x168>
			communication_state = CHECKING_COMMAND;
 8000ab6:	4b3b      	ldr	r3, [pc, #236]	; (8000ba4 <uart_communiation_fsm+0x250>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	701a      	strb	r2, [r3, #0]
		if (timerResend_flag == 1 && strcmp(command_data, request) == 0)
 8000abc:	4b47      	ldr	r3, [pc, #284]	; (8000bdc <uart_communiation_fsm+0x288>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d124      	bne.n	8000b0e <uart_communiation_fsm+0x1ba>
 8000ac4:	4b39      	ldr	r3, [pc, #228]	; (8000bac <uart_communiation_fsm+0x258>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4839      	ldr	r0, [pc, #228]	; (8000bb0 <uart_communiation_fsm+0x25c>)
 8000acc:	f7ff fb3e 	bl	800014c <strcmp>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d11b      	bne.n	8000b0e <uart_communiation_fsm+0x1ba>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	2120      	movs	r1, #32
 8000ada:	4841      	ldr	r0, [pc, #260]	; (8000be0 <uart_communiation_fsm+0x28c>)
 8000adc:	f000 ff6a 	bl	80019b4 <HAL_GPIO_WritePin>
							  sprintf(str, "\r\n%ld", ADC_value), 1000);
 8000ae0:	4b35      	ldr	r3, [pc, #212]	; (8000bb8 <uart_communiation_fsm+0x264>)
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	f107 030c 	add.w	r3, r7, #12
 8000ae8:	4935      	ldr	r1, [pc, #212]	; (8000bc0 <uart_communiation_fsm+0x26c>)
 8000aea:	4618      	mov	r0, r3
 8000aec:	f002 fdb0 	bl	8003650 <siprintf>
 8000af0:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart2, (void *)str,
 8000af2:	b29a      	uxth	r2, r3
 8000af4:	f107 010c 	add.w	r1, r7, #12
 8000af8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000afc:	4831      	ldr	r0, [pc, #196]	; (8000bc4 <uart_communiation_fsm+0x270>)
 8000afe:	f002 f872 	bl	8002be6 <HAL_UART_Transmit>
			setTimerResend(RESENDING_TIME);
 8000b02:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000b06:	f7ff fef1 	bl	80008ec <setTimerResend>
		{
 8000b0a:	bf00      	nop
		break;
 8000b0c:	e045      	b.n	8000b9a <uart_communiation_fsm+0x246>
		else if(timerResend_flag == 1 && strstr(command_data,led7seg) != NULL){
 8000b0e:	4b33      	ldr	r3, [pc, #204]	; (8000bdc <uart_communiation_fsm+0x288>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d141      	bne.n	8000b9a <uart_communiation_fsm+0x246>
 8000b16:	4b2d      	ldr	r3, [pc, #180]	; (8000bcc <uart_communiation_fsm+0x278>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4824      	ldr	r0, [pc, #144]	; (8000bb0 <uart_communiation_fsm+0x25c>)
 8000b1e:	f002 fdca 	bl	80036b6 <strstr>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d038      	beq.n	8000b9a <uart_communiation_fsm+0x246>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8000b28:	2201      	movs	r2, #1
 8000b2a:	2120      	movs	r1, #32
 8000b2c:	482c      	ldr	r0, [pc, #176]	; (8000be0 <uart_communiation_fsm+0x28c>)
 8000b2e:	f000 ff41 	bl	80019b4 <HAL_GPIO_WritePin>
			int len7LED = strlen(led7seg);
 8000b32:	4b26      	ldr	r3, [pc, #152]	; (8000bcc <uart_communiation_fsm+0x278>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff fb12 	bl	8000160 <strlen>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
			int lenCommand = strlen(command_data);
 8000b40:	481b      	ldr	r0, [pc, #108]	; (8000bb0 <uart_communiation_fsm+0x25c>)
 8000b42:	f7ff fb0d 	bl	8000160 <strlen>
 8000b46:	4603      	mov	r3, r0
 8000b48:	63bb      	str	r3, [r7, #56]	; 0x38
			strncpy(str,command_data + len7LED, lenCommand - len7LED);
 8000b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b4c:	4a18      	ldr	r2, [pc, #96]	; (8000bb0 <uart_communiation_fsm+0x25c>)
 8000b4e:	1899      	adds	r1, r3, r2
 8000b50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000b52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b54:	1ad3      	subs	r3, r2, r3
 8000b56:	461a      	mov	r2, r3
 8000b58:	463b      	mov	r3, r7
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f002 fd98 	bl	8003690 <strncpy>
			str[lenCommand - len7LED] = '\0';
 8000b60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b64:	1ad3      	subs	r3, r2, r3
 8000b66:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000b6a:	4413      	add	r3, r2
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	f803 2c40 	strb.w	r2, [r3, #-64]
			HAL_UART_Transmit(&huart2, (void *)str,printf("%s\r\n",str), 1000);
 8000b72:	463b      	mov	r3, r7
 8000b74:	4619      	mov	r1, r3
 8000b76:	481b      	ldr	r0, [pc, #108]	; (8000be4 <uart_communiation_fsm+0x290>)
 8000b78:	f002 fd52 	bl	8003620 <iprintf>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	b29a      	uxth	r2, r3
 8000b80:	4639      	mov	r1, r7
 8000b82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b86:	480f      	ldr	r0, [pc, #60]	; (8000bc4 <uart_communiation_fsm+0x270>)
 8000b88:	f002 f82d 	bl	8002be6 <HAL_UART_Transmit>
			setTimerResend(RESENDING_TIME);
 8000b8c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000b90:	f7ff feac 	bl	80008ec <setTimerResend>
		break;
 8000b94:	e001      	b.n	8000b9a <uart_communiation_fsm+0x246>
		break;
 8000b96:	bf00      	nop
 8000b98:	e000      	b.n	8000b9c <uart_communiation_fsm+0x248>
		break;
 8000b9a:	bf00      	nop
}
 8000b9c:	bf00      	nop
 8000b9e:	3740      	adds	r7, #64	; 0x40
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	200000b0 	.word	0x200000b0
 8000ba8:	200000e4 	.word	0x200000e4
 8000bac:	2000000c 	.word	0x2000000c
 8000bb0:	200000c4 	.word	0x200000c4
 8000bb4:	200000e8 	.word	0x200000e8
 8000bb8:	200000b4 	.word	0x200000b4
 8000bbc:	00100101 	.word	0x00100101
 8000bc0:	08004900 	.word	0x08004900
 8000bc4:	20000180 	.word	0x20000180
 8000bc8:	200000b8 	.word	0x200000b8
 8000bcc:	20000014 	.word	0x20000014
 8000bd0:	08004908 	.word	0x08004908
 8000bd4:	20000010 	.word	0x20000010
 8000bd8:	200000a0 	.word	0x200000a0
 8000bdc:	20000008 	.word	0x20000008
 8000be0:	40010800 	.word	0x40010800
 8000be4:	08004910 	.word	0x08004910

08000be8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000be8:	480c      	ldr	r0, [pc, #48]	; (8000c1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bea:	490d      	ldr	r1, [pc, #52]	; (8000c20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bec:	4a0d      	ldr	r2, [pc, #52]	; (8000c24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bf0:	e002      	b.n	8000bf8 <LoopCopyDataInit>

08000bf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bf6:	3304      	adds	r3, #4

08000bf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bfc:	d3f9      	bcc.n	8000bf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bfe:	4a0a      	ldr	r2, [pc, #40]	; (8000c28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c00:	4c0a      	ldr	r4, [pc, #40]	; (8000c2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c04:	e001      	b.n	8000c0a <LoopFillZerobss>

08000c06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c08:	3204      	adds	r2, #4

08000c0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c0c:	d3fb      	bcc.n	8000c06 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c0e:	f7ff fe67 	bl	80008e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c12:	f002 fcd9 	bl	80035c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c16:	f7ff fb27 	bl	8000268 <main>
  bx lr
 8000c1a:	4770      	bx	lr
  ldr r0, =_sdata
 8000c1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c20:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000c24:	080049e0 	.word	0x080049e0
  ldr r2, =_sbss
 8000c28:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000c2c:	200001d8 	.word	0x200001d8

08000c30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c30:	e7fe      	b.n	8000c30 <ADC1_2_IRQHandler>
	...

08000c34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c38:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <HAL_Init+0x28>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a07      	ldr	r2, [pc, #28]	; (8000c5c <HAL_Init+0x28>)
 8000c3e:	f043 0310 	orr.w	r3, r3, #16
 8000c42:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c44:	2003      	movs	r0, #3
 8000c46:	f000 fc49 	bl	80014dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c4a:	200f      	movs	r0, #15
 8000c4c:	f000 f808 	bl	8000c60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c50:	f7ff fc86 	bl	8000560 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c54:	2300      	movs	r3, #0
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40022000 	.word	0x40022000

08000c60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c68:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <HAL_InitTick+0x54>)
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <HAL_InitTick+0x58>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	4619      	mov	r1, r3
 8000c72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f000 fc61 	bl	8001546 <HAL_SYSTICK_Config>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e00e      	b.n	8000cac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2b0f      	cmp	r3, #15
 8000c92:	d80a      	bhi.n	8000caa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c94:	2200      	movs	r2, #0
 8000c96:	6879      	ldr	r1, [r7, #4]
 8000c98:	f04f 30ff 	mov.w	r0, #4294967295
 8000c9c:	f000 fc29 	bl	80014f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ca0:	4a06      	ldr	r2, [pc, #24]	; (8000cbc <HAL_InitTick+0x5c>)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e000      	b.n	8000cac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20000000 	.word	0x20000000
 8000cb8:	2000001c 	.word	0x2000001c
 8000cbc:	20000018 	.word	0x20000018

08000cc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cc4:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <HAL_IncTick+0x1c>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	461a      	mov	r2, r3
 8000cca:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <HAL_IncTick+0x20>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4413      	add	r3, r2
 8000cd0:	4a03      	ldr	r2, [pc, #12]	; (8000ce0 <HAL_IncTick+0x20>)
 8000cd2:	6013      	str	r3, [r2, #0]
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bc80      	pop	{r7}
 8000cda:	4770      	bx	lr
 8000cdc:	2000001c 	.word	0x2000001c
 8000ce0:	200001c4 	.word	0x200001c4

08000ce4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce8:	4b02      	ldr	r3, [pc, #8]	; (8000cf4 <HAL_GetTick+0x10>)
 8000cea:	681b      	ldr	r3, [r3, #0]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bc80      	pop	{r7}
 8000cf2:	4770      	bx	lr
 8000cf4:	200001c4 	.word	0x200001c4

08000cf8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d00:	2300      	movs	r3, #0
 8000d02:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000d04:	2300      	movs	r3, #0
 8000d06:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d101      	bne.n	8000d1a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
 8000d18:	e0be      	b.n	8000e98 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d109      	bne.n	8000d3c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2200      	movs	r2, #0
 8000d32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	f7ff fc44 	bl	80005c4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f000 fabf 	bl	80012c0 <ADC_ConversionStop_Disable>
 8000d42:	4603      	mov	r3, r0
 8000d44:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d4a:	f003 0310 	and.w	r3, r3, #16
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8099 	bne.w	8000e86 <HAL_ADC_Init+0x18e>
 8000d54:	7dfb      	ldrb	r3, [r7, #23]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	f040 8095 	bne.w	8000e86 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d60:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d64:	f023 0302 	bic.w	r3, r3, #2
 8000d68:	f043 0202 	orr.w	r2, r3, #2
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d78:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	7b1b      	ldrb	r3, [r3, #12]
 8000d7e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d80:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d82:	68ba      	ldr	r2, [r7, #8]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	689b      	ldr	r3, [r3, #8]
 8000d8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d90:	d003      	beq.n	8000d9a <HAL_ADC_Init+0xa2>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	689b      	ldr	r3, [r3, #8]
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d102      	bne.n	8000da0 <HAL_ADC_Init+0xa8>
 8000d9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d9e:	e000      	b.n	8000da2 <HAL_ADC_Init+0xaa>
 8000da0:	2300      	movs	r3, #0
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	7d1b      	ldrb	r3, [r3, #20]
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d119      	bne.n	8000de4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	7b1b      	ldrb	r3, [r3, #12]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d109      	bne.n	8000dcc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	3b01      	subs	r3, #1
 8000dbe:	035a      	lsls	r2, r3, #13
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000dc8:	613b      	str	r3, [r7, #16]
 8000dca:	e00b      	b.n	8000de4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dd0:	f043 0220 	orr.w	r2, r3, #32
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ddc:	f043 0201 	orr.w	r2, r3, #1
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	430a      	orrs	r2, r1
 8000df6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	689a      	ldr	r2, [r3, #8]
 8000dfe:	4b28      	ldr	r3, [pc, #160]	; (8000ea0 <HAL_ADC_Init+0x1a8>)
 8000e00:	4013      	ands	r3, r2
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	6812      	ldr	r2, [r2, #0]
 8000e06:	68b9      	ldr	r1, [r7, #8]
 8000e08:	430b      	orrs	r3, r1
 8000e0a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	689b      	ldr	r3, [r3, #8]
 8000e10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e14:	d003      	beq.n	8000e1e <HAL_ADC_Init+0x126>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	689b      	ldr	r3, [r3, #8]
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d104      	bne.n	8000e28 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	691b      	ldr	r3, [r3, #16]
 8000e22:	3b01      	subs	r3, #1
 8000e24:	051b      	lsls	r3, r3, #20
 8000e26:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e2e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	68fa      	ldr	r2, [r7, #12]
 8000e38:	430a      	orrs	r2, r1
 8000e3a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	689a      	ldr	r2, [r3, #8]
 8000e42:	4b18      	ldr	r3, [pc, #96]	; (8000ea4 <HAL_ADC_Init+0x1ac>)
 8000e44:	4013      	ands	r3, r2
 8000e46:	68ba      	ldr	r2, [r7, #8]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d10b      	bne.n	8000e64 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2200      	movs	r2, #0
 8000e50:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e56:	f023 0303 	bic.w	r3, r3, #3
 8000e5a:	f043 0201 	orr.w	r2, r3, #1
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e62:	e018      	b.n	8000e96 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e68:	f023 0312 	bic.w	r3, r3, #18
 8000e6c:	f043 0210 	orr.w	r2, r3, #16
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e78:	f043 0201 	orr.w	r2, r3, #1
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000e80:	2301      	movs	r3, #1
 8000e82:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e84:	e007      	b.n	8000e96 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e8a:	f043 0210 	orr.w	r2, r3, #16
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e96:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3718      	adds	r7, #24
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	ffe1f7fd 	.word	0xffe1f7fd
 8000ea4:	ff1f0efe 	.word	0xff1f0efe

08000ea8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d101      	bne.n	8000ec2 <HAL_ADC_Start+0x1a>
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	e098      	b.n	8000ff4 <HAL_ADC_Start+0x14c>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f000 f99e 	bl	800120c <ADC_Enable>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000ed4:	7bfb      	ldrb	r3, [r7, #15]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	f040 8087 	bne.w	8000fea <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ee0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000ee4:	f023 0301 	bic.w	r3, r3, #1
 8000ee8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a41      	ldr	r2, [pc, #260]	; (8000ffc <HAL_ADC_Start+0x154>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d105      	bne.n	8000f06 <HAL_ADC_Start+0x5e>
 8000efa:	4b41      	ldr	r3, [pc, #260]	; (8001000 <HAL_ADC_Start+0x158>)
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d115      	bne.n	8000f32 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f0a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d026      	beq.n	8000f6e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f24:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f28:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f30:	e01d      	b.n	8000f6e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f36:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a2f      	ldr	r2, [pc, #188]	; (8001000 <HAL_ADC_Start+0x158>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d004      	beq.n	8000f52 <HAL_ADC_Start+0xaa>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a2b      	ldr	r2, [pc, #172]	; (8000ffc <HAL_ADC_Start+0x154>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d10d      	bne.n	8000f6e <HAL_ADC_Start+0xc6>
 8000f52:	4b2b      	ldr	r3, [pc, #172]	; (8001000 <HAL_ADC_Start+0x158>)
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d007      	beq.n	8000f6e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f62:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f66:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d006      	beq.n	8000f88 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f7e:	f023 0206 	bic.w	r2, r3, #6
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f86:	e002      	b.n	8000f8e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f06f 0202 	mvn.w	r2, #2
 8000f9e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000faa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000fae:	d113      	bne.n	8000fd8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000fb4:	4a11      	ldr	r2, [pc, #68]	; (8000ffc <HAL_ADC_Start+0x154>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d105      	bne.n	8000fc6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000fba:	4b11      	ldr	r3, [pc, #68]	; (8001000 <HAL_ADC_Start+0x158>)
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d108      	bne.n	8000fd8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	689a      	ldr	r2, [r3, #8]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000fd4:	609a      	str	r2, [r3, #8]
 8000fd6:	e00c      	b.n	8000ff2 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	689a      	ldr	r2, [r3, #8]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	e003      	b.n	8000ff2 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2200      	movs	r2, #0
 8000fee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40012800 	.word	0x40012800
 8001000:	40012400 	.word	0x40012400

08001004 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001012:	4618      	mov	r0, r3
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr

0800101c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001026:	2300      	movs	r3, #0
 8001028:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800102a:	2300      	movs	r3, #0
 800102c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001034:	2b01      	cmp	r3, #1
 8001036:	d101      	bne.n	800103c <HAL_ADC_ConfigChannel+0x20>
 8001038:	2302      	movs	r3, #2
 800103a:	e0dc      	b.n	80011f6 <HAL_ADC_ConfigChannel+0x1da>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2201      	movs	r2, #1
 8001040:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	2b06      	cmp	r3, #6
 800104a:	d81c      	bhi.n	8001086 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685a      	ldr	r2, [r3, #4]
 8001056:	4613      	mov	r3, r2
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	4413      	add	r3, r2
 800105c:	3b05      	subs	r3, #5
 800105e:	221f      	movs	r2, #31
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	4019      	ands	r1, r3
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	6818      	ldr	r0, [r3, #0]
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685a      	ldr	r2, [r3, #4]
 8001070:	4613      	mov	r3, r2
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	4413      	add	r3, r2
 8001076:	3b05      	subs	r3, #5
 8001078:	fa00 f203 	lsl.w	r2, r0, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	430a      	orrs	r2, r1
 8001082:	635a      	str	r2, [r3, #52]	; 0x34
 8001084:	e03c      	b.n	8001100 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	2b0c      	cmp	r3, #12
 800108c:	d81c      	bhi.n	80010c8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685a      	ldr	r2, [r3, #4]
 8001098:	4613      	mov	r3, r2
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	4413      	add	r3, r2
 800109e:	3b23      	subs	r3, #35	; 0x23
 80010a0:	221f      	movs	r2, #31
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43db      	mvns	r3, r3
 80010a8:	4019      	ands	r1, r3
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	6818      	ldr	r0, [r3, #0]
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685a      	ldr	r2, [r3, #4]
 80010b2:	4613      	mov	r3, r2
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	4413      	add	r3, r2
 80010b8:	3b23      	subs	r3, #35	; 0x23
 80010ba:	fa00 f203 	lsl.w	r2, r0, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	430a      	orrs	r2, r1
 80010c4:	631a      	str	r2, [r3, #48]	; 0x30
 80010c6:	e01b      	b.n	8001100 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685a      	ldr	r2, [r3, #4]
 80010d2:	4613      	mov	r3, r2
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	4413      	add	r3, r2
 80010d8:	3b41      	subs	r3, #65	; 0x41
 80010da:	221f      	movs	r2, #31
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	4019      	ands	r1, r3
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	6818      	ldr	r0, [r3, #0]
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685a      	ldr	r2, [r3, #4]
 80010ec:	4613      	mov	r3, r2
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	4413      	add	r3, r2
 80010f2:	3b41      	subs	r3, #65	; 0x41
 80010f4:	fa00 f203 	lsl.w	r2, r0, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	430a      	orrs	r2, r1
 80010fe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b09      	cmp	r3, #9
 8001106:	d91c      	bls.n	8001142 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	68d9      	ldr	r1, [r3, #12]
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	4613      	mov	r3, r2
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	4413      	add	r3, r2
 8001118:	3b1e      	subs	r3, #30
 800111a:	2207      	movs	r2, #7
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	4019      	ands	r1, r3
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	6898      	ldr	r0, [r3, #8]
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	4613      	mov	r3, r2
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	4413      	add	r3, r2
 8001132:	3b1e      	subs	r3, #30
 8001134:	fa00 f203 	lsl.w	r2, r0, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	430a      	orrs	r2, r1
 800113e:	60da      	str	r2, [r3, #12]
 8001140:	e019      	b.n	8001176 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	6919      	ldr	r1, [r3, #16]
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	4613      	mov	r3, r2
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	4413      	add	r3, r2
 8001152:	2207      	movs	r2, #7
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	43db      	mvns	r3, r3
 800115a:	4019      	ands	r1, r3
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	6898      	ldr	r0, [r3, #8]
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	4613      	mov	r3, r2
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	4413      	add	r3, r2
 800116a:	fa00 f203 	lsl.w	r2, r0, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	430a      	orrs	r2, r1
 8001174:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2b10      	cmp	r3, #16
 800117c:	d003      	beq.n	8001186 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001182:	2b11      	cmp	r3, #17
 8001184:	d132      	bne.n	80011ec <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a1d      	ldr	r2, [pc, #116]	; (8001200 <HAL_ADC_ConfigChannel+0x1e4>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d125      	bne.n	80011dc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d126      	bne.n	80011ec <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	689a      	ldr	r2, [r3, #8]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80011ac:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2b10      	cmp	r3, #16
 80011b4:	d11a      	bne.n	80011ec <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80011b6:	4b13      	ldr	r3, [pc, #76]	; (8001204 <HAL_ADC_ConfigChannel+0x1e8>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a13      	ldr	r2, [pc, #76]	; (8001208 <HAL_ADC_ConfigChannel+0x1ec>)
 80011bc:	fba2 2303 	umull	r2, r3, r2, r3
 80011c0:	0c9a      	lsrs	r2, r3, #18
 80011c2:	4613      	mov	r3, r2
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	4413      	add	r3, r2
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011cc:	e002      	b.n	80011d4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	3b01      	subs	r3, #1
 80011d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d1f9      	bne.n	80011ce <HAL_ADC_ConfigChannel+0x1b2>
 80011da:	e007      	b.n	80011ec <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011e0:	f043 0220 	orr.w	r2, r3, #32
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2200      	movs	r2, #0
 80011f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3714      	adds	r7, #20
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bc80      	pop	{r7}
 80011fe:	4770      	bx	lr
 8001200:	40012400 	.word	0x40012400
 8001204:	20000000 	.word	0x20000000
 8001208:	431bde83 	.word	0x431bde83

0800120c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001214:	2300      	movs	r3, #0
 8001216:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001218:	2300      	movs	r3, #0
 800121a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	2b01      	cmp	r3, #1
 8001228:	d040      	beq.n	80012ac <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	689a      	ldr	r2, [r3, #8]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f042 0201 	orr.w	r2, r2, #1
 8001238:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800123a:	4b1f      	ldr	r3, [pc, #124]	; (80012b8 <ADC_Enable+0xac>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a1f      	ldr	r2, [pc, #124]	; (80012bc <ADC_Enable+0xb0>)
 8001240:	fba2 2303 	umull	r2, r3, r2, r3
 8001244:	0c9b      	lsrs	r3, r3, #18
 8001246:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001248:	e002      	b.n	8001250 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	3b01      	subs	r3, #1
 800124e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d1f9      	bne.n	800124a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001256:	f7ff fd45 	bl	8000ce4 <HAL_GetTick>
 800125a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800125c:	e01f      	b.n	800129e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800125e:	f7ff fd41 	bl	8000ce4 <HAL_GetTick>
 8001262:	4602      	mov	r2, r0
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	2b02      	cmp	r3, #2
 800126a:	d918      	bls.n	800129e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	2b01      	cmp	r3, #1
 8001278:	d011      	beq.n	800129e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800127e:	f043 0210 	orr.w	r2, r3, #16
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800128a:	f043 0201 	orr.w	r2, r3, #1
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2200      	movs	r2, #0
 8001296:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e007      	b.n	80012ae <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	f003 0301 	and.w	r3, r3, #1
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d1d8      	bne.n	800125e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000000 	.word	0x20000000
 80012bc:	431bde83 	.word	0x431bde83

080012c0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80012c8:	2300      	movs	r3, #0
 80012ca:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d12e      	bne.n	8001338 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	689a      	ldr	r2, [r3, #8]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f022 0201 	bic.w	r2, r2, #1
 80012e8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80012ea:	f7ff fcfb 	bl	8000ce4 <HAL_GetTick>
 80012ee:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80012f0:	e01b      	b.n	800132a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80012f2:	f7ff fcf7 	bl	8000ce4 <HAL_GetTick>
 80012f6:	4602      	mov	r2, r0
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d914      	bls.n	800132a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	2b01      	cmp	r3, #1
 800130c:	d10d      	bne.n	800132a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001312:	f043 0210 	orr.w	r2, r3, #16
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800131e:	f043 0201 	orr.w	r2, r3, #1
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e007      	b.n	800133a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	f003 0301 	and.w	r3, r3, #1
 8001334:	2b01      	cmp	r3, #1
 8001336:	d0dc      	beq.n	80012f2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001354:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <__NVIC_SetPriorityGrouping+0x44>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800135a:	68ba      	ldr	r2, [r7, #8]
 800135c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001360:	4013      	ands	r3, r2
 8001362:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800136c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001370:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001374:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001376:	4a04      	ldr	r2, [pc, #16]	; (8001388 <__NVIC_SetPriorityGrouping+0x44>)
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	60d3      	str	r3, [r2, #12]
}
 800137c:	bf00      	nop
 800137e:	3714      	adds	r7, #20
 8001380:	46bd      	mov	sp, r7
 8001382:	bc80      	pop	{r7}
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001390:	4b04      	ldr	r3, [pc, #16]	; (80013a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	0a1b      	lsrs	r3, r3, #8
 8001396:	f003 0307 	and.w	r3, r3, #7
}
 800139a:	4618      	mov	r0, r3
 800139c:	46bd      	mov	sp, r7
 800139e:	bc80      	pop	{r7}
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	db0b      	blt.n	80013d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	f003 021f 	and.w	r2, r3, #31
 80013c0:	4906      	ldr	r1, [pc, #24]	; (80013dc <__NVIC_EnableIRQ+0x34>)
 80013c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c6:	095b      	lsrs	r3, r3, #5
 80013c8:	2001      	movs	r0, #1
 80013ca:	fa00 f202 	lsl.w	r2, r0, r2
 80013ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr
 80013dc:	e000e100 	.word	0xe000e100

080013e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	6039      	str	r1, [r7, #0]
 80013ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	db0a      	blt.n	800140a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	490c      	ldr	r1, [pc, #48]	; (800142c <__NVIC_SetPriority+0x4c>)
 80013fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fe:	0112      	lsls	r2, r2, #4
 8001400:	b2d2      	uxtb	r2, r2
 8001402:	440b      	add	r3, r1
 8001404:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001408:	e00a      	b.n	8001420 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	b2da      	uxtb	r2, r3
 800140e:	4908      	ldr	r1, [pc, #32]	; (8001430 <__NVIC_SetPriority+0x50>)
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	f003 030f 	and.w	r3, r3, #15
 8001416:	3b04      	subs	r3, #4
 8001418:	0112      	lsls	r2, r2, #4
 800141a:	b2d2      	uxtb	r2, r2
 800141c:	440b      	add	r3, r1
 800141e:	761a      	strb	r2, [r3, #24]
}
 8001420:	bf00      	nop
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	bc80      	pop	{r7}
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	e000e100 	.word	0xe000e100
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001434:	b480      	push	{r7}
 8001436:	b089      	sub	sp, #36	; 0x24
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f003 0307 	and.w	r3, r3, #7
 8001446:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	f1c3 0307 	rsb	r3, r3, #7
 800144e:	2b04      	cmp	r3, #4
 8001450:	bf28      	it	cs
 8001452:	2304      	movcs	r3, #4
 8001454:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	3304      	adds	r3, #4
 800145a:	2b06      	cmp	r3, #6
 800145c:	d902      	bls.n	8001464 <NVIC_EncodePriority+0x30>
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	3b03      	subs	r3, #3
 8001462:	e000      	b.n	8001466 <NVIC_EncodePriority+0x32>
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001468:	f04f 32ff 	mov.w	r2, #4294967295
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	43da      	mvns	r2, r3
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	401a      	ands	r2, r3
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800147c:	f04f 31ff 	mov.w	r1, #4294967295
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	fa01 f303 	lsl.w	r3, r1, r3
 8001486:	43d9      	mvns	r1, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800148c:	4313      	orrs	r3, r2
         );
}
 800148e:	4618      	mov	r0, r3
 8001490:	3724      	adds	r7, #36	; 0x24
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr

08001498 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3b01      	subs	r3, #1
 80014a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014a8:	d301      	bcc.n	80014ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014aa:	2301      	movs	r3, #1
 80014ac:	e00f      	b.n	80014ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ae:	4a0a      	ldr	r2, [pc, #40]	; (80014d8 <SysTick_Config+0x40>)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3b01      	subs	r3, #1
 80014b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014b6:	210f      	movs	r1, #15
 80014b8:	f04f 30ff 	mov.w	r0, #4294967295
 80014bc:	f7ff ff90 	bl	80013e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014c0:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <SysTick_Config+0x40>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014c6:	4b04      	ldr	r3, [pc, #16]	; (80014d8 <SysTick_Config+0x40>)
 80014c8:	2207      	movs	r2, #7
 80014ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	e000e010 	.word	0xe000e010

080014dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f7ff ff2d 	bl	8001344 <__NVIC_SetPriorityGrouping>
}
 80014ea:	bf00      	nop
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b086      	sub	sp, #24
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	4603      	mov	r3, r0
 80014fa:	60b9      	str	r1, [r7, #8]
 80014fc:	607a      	str	r2, [r7, #4]
 80014fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001504:	f7ff ff42 	bl	800138c <__NVIC_GetPriorityGrouping>
 8001508:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	68b9      	ldr	r1, [r7, #8]
 800150e:	6978      	ldr	r0, [r7, #20]
 8001510:	f7ff ff90 	bl	8001434 <NVIC_EncodePriority>
 8001514:	4602      	mov	r2, r0
 8001516:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800151a:	4611      	mov	r1, r2
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff ff5f 	bl	80013e0 <__NVIC_SetPriority>
}
 8001522:	bf00      	nop
 8001524:	3718      	adds	r7, #24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b082      	sub	sp, #8
 800152e:	af00      	add	r7, sp, #0
 8001530:	4603      	mov	r3, r0
 8001532:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff ff35 	bl	80013a8 <__NVIC_EnableIRQ>
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b082      	sub	sp, #8
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f7ff ffa2 	bl	8001498 <SysTick_Config>
 8001554:	4603      	mov	r3, r0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800155e:	b480      	push	{r7}
 8001560:	b085      	sub	sp, #20
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001566:	2300      	movs	r3, #0
 8001568:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001570:	2b02      	cmp	r3, #2
 8001572:	d008      	beq.n	8001586 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2204      	movs	r2, #4
 8001578:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e020      	b.n	80015c8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f022 020e 	bic.w	r2, r2, #14
 8001594:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f022 0201 	bic.w	r2, r2, #1
 80015a4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015ae:	2101      	movs	r1, #1
 80015b0:	fa01 f202 	lsl.w	r2, r1, r2
 80015b4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2201      	movs	r2, #1
 80015ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80015c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3714      	adds	r7, #20
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bc80      	pop	{r7}
 80015d0:	4770      	bx	lr
	...

080015d4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015dc:	2300      	movs	r3, #0
 80015de:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d005      	beq.n	80015f6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2204      	movs	r2, #4
 80015ee:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	73fb      	strb	r3, [r7, #15]
 80015f4:	e051      	b.n	800169a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f022 020e 	bic.w	r2, r2, #14
 8001604:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f022 0201 	bic.w	r2, r2, #1
 8001614:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a22      	ldr	r2, [pc, #136]	; (80016a4 <HAL_DMA_Abort_IT+0xd0>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d029      	beq.n	8001674 <HAL_DMA_Abort_IT+0xa0>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a20      	ldr	r2, [pc, #128]	; (80016a8 <HAL_DMA_Abort_IT+0xd4>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d022      	beq.n	8001670 <HAL_DMA_Abort_IT+0x9c>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a1f      	ldr	r2, [pc, #124]	; (80016ac <HAL_DMA_Abort_IT+0xd8>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d01a      	beq.n	800166a <HAL_DMA_Abort_IT+0x96>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a1d      	ldr	r2, [pc, #116]	; (80016b0 <HAL_DMA_Abort_IT+0xdc>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d012      	beq.n	8001664 <HAL_DMA_Abort_IT+0x90>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a1c      	ldr	r2, [pc, #112]	; (80016b4 <HAL_DMA_Abort_IT+0xe0>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d00a      	beq.n	800165e <HAL_DMA_Abort_IT+0x8a>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a1a      	ldr	r2, [pc, #104]	; (80016b8 <HAL_DMA_Abort_IT+0xe4>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d102      	bne.n	8001658 <HAL_DMA_Abort_IT+0x84>
 8001652:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001656:	e00e      	b.n	8001676 <HAL_DMA_Abort_IT+0xa2>
 8001658:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800165c:	e00b      	b.n	8001676 <HAL_DMA_Abort_IT+0xa2>
 800165e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001662:	e008      	b.n	8001676 <HAL_DMA_Abort_IT+0xa2>
 8001664:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001668:	e005      	b.n	8001676 <HAL_DMA_Abort_IT+0xa2>
 800166a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800166e:	e002      	b.n	8001676 <HAL_DMA_Abort_IT+0xa2>
 8001670:	2310      	movs	r3, #16
 8001672:	e000      	b.n	8001676 <HAL_DMA_Abort_IT+0xa2>
 8001674:	2301      	movs	r3, #1
 8001676:	4a11      	ldr	r2, [pc, #68]	; (80016bc <HAL_DMA_Abort_IT+0xe8>)
 8001678:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2201      	movs	r2, #1
 800167e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	4798      	blx	r3
    } 
  }
  return status;
 800169a:	7bfb      	ldrb	r3, [r7, #15]
}
 800169c:	4618      	mov	r0, r3
 800169e:	3710      	adds	r7, #16
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40020008 	.word	0x40020008
 80016a8:	4002001c 	.word	0x4002001c
 80016ac:	40020030 	.word	0x40020030
 80016b0:	40020044 	.word	0x40020044
 80016b4:	40020058 	.word	0x40020058
 80016b8:	4002006c 	.word	0x4002006c
 80016bc:	40020000 	.word	0x40020000

080016c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b08b      	sub	sp, #44	; 0x2c
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ca:	2300      	movs	r3, #0
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016ce:	2300      	movs	r3, #0
 80016d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016d2:	e148      	b.n	8001966 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016d4:	2201      	movs	r2, #1
 80016d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	69fa      	ldr	r2, [r7, #28]
 80016e4:	4013      	ands	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	f040 8137 	bne.w	8001960 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	4aa3      	ldr	r2, [pc, #652]	; (8001984 <HAL_GPIO_Init+0x2c4>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d05e      	beq.n	80017ba <HAL_GPIO_Init+0xfa>
 80016fc:	4aa1      	ldr	r2, [pc, #644]	; (8001984 <HAL_GPIO_Init+0x2c4>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d875      	bhi.n	80017ee <HAL_GPIO_Init+0x12e>
 8001702:	4aa1      	ldr	r2, [pc, #644]	; (8001988 <HAL_GPIO_Init+0x2c8>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d058      	beq.n	80017ba <HAL_GPIO_Init+0xfa>
 8001708:	4a9f      	ldr	r2, [pc, #636]	; (8001988 <HAL_GPIO_Init+0x2c8>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d86f      	bhi.n	80017ee <HAL_GPIO_Init+0x12e>
 800170e:	4a9f      	ldr	r2, [pc, #636]	; (800198c <HAL_GPIO_Init+0x2cc>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d052      	beq.n	80017ba <HAL_GPIO_Init+0xfa>
 8001714:	4a9d      	ldr	r2, [pc, #628]	; (800198c <HAL_GPIO_Init+0x2cc>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d869      	bhi.n	80017ee <HAL_GPIO_Init+0x12e>
 800171a:	4a9d      	ldr	r2, [pc, #628]	; (8001990 <HAL_GPIO_Init+0x2d0>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d04c      	beq.n	80017ba <HAL_GPIO_Init+0xfa>
 8001720:	4a9b      	ldr	r2, [pc, #620]	; (8001990 <HAL_GPIO_Init+0x2d0>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d863      	bhi.n	80017ee <HAL_GPIO_Init+0x12e>
 8001726:	4a9b      	ldr	r2, [pc, #620]	; (8001994 <HAL_GPIO_Init+0x2d4>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d046      	beq.n	80017ba <HAL_GPIO_Init+0xfa>
 800172c:	4a99      	ldr	r2, [pc, #612]	; (8001994 <HAL_GPIO_Init+0x2d4>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d85d      	bhi.n	80017ee <HAL_GPIO_Init+0x12e>
 8001732:	2b12      	cmp	r3, #18
 8001734:	d82a      	bhi.n	800178c <HAL_GPIO_Init+0xcc>
 8001736:	2b12      	cmp	r3, #18
 8001738:	d859      	bhi.n	80017ee <HAL_GPIO_Init+0x12e>
 800173a:	a201      	add	r2, pc, #4	; (adr r2, 8001740 <HAL_GPIO_Init+0x80>)
 800173c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001740:	080017bb 	.word	0x080017bb
 8001744:	08001795 	.word	0x08001795
 8001748:	080017a7 	.word	0x080017a7
 800174c:	080017e9 	.word	0x080017e9
 8001750:	080017ef 	.word	0x080017ef
 8001754:	080017ef 	.word	0x080017ef
 8001758:	080017ef 	.word	0x080017ef
 800175c:	080017ef 	.word	0x080017ef
 8001760:	080017ef 	.word	0x080017ef
 8001764:	080017ef 	.word	0x080017ef
 8001768:	080017ef 	.word	0x080017ef
 800176c:	080017ef 	.word	0x080017ef
 8001770:	080017ef 	.word	0x080017ef
 8001774:	080017ef 	.word	0x080017ef
 8001778:	080017ef 	.word	0x080017ef
 800177c:	080017ef 	.word	0x080017ef
 8001780:	080017ef 	.word	0x080017ef
 8001784:	0800179d 	.word	0x0800179d
 8001788:	080017b1 	.word	0x080017b1
 800178c:	4a82      	ldr	r2, [pc, #520]	; (8001998 <HAL_GPIO_Init+0x2d8>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d013      	beq.n	80017ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001792:	e02c      	b.n	80017ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	623b      	str	r3, [r7, #32]
          break;
 800179a:	e029      	b.n	80017f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	3304      	adds	r3, #4
 80017a2:	623b      	str	r3, [r7, #32]
          break;
 80017a4:	e024      	b.n	80017f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	3308      	adds	r3, #8
 80017ac:	623b      	str	r3, [r7, #32]
          break;
 80017ae:	e01f      	b.n	80017f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	330c      	adds	r3, #12
 80017b6:	623b      	str	r3, [r7, #32]
          break;
 80017b8:	e01a      	b.n	80017f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d102      	bne.n	80017c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017c2:	2304      	movs	r3, #4
 80017c4:	623b      	str	r3, [r7, #32]
          break;
 80017c6:	e013      	b.n	80017f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d105      	bne.n	80017dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017d0:	2308      	movs	r3, #8
 80017d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	69fa      	ldr	r2, [r7, #28]
 80017d8:	611a      	str	r2, [r3, #16]
          break;
 80017da:	e009      	b.n	80017f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017dc:	2308      	movs	r3, #8
 80017de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	69fa      	ldr	r2, [r7, #28]
 80017e4:	615a      	str	r2, [r3, #20]
          break;
 80017e6:	e003      	b.n	80017f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017e8:	2300      	movs	r3, #0
 80017ea:	623b      	str	r3, [r7, #32]
          break;
 80017ec:	e000      	b.n	80017f0 <HAL_GPIO_Init+0x130>
          break;
 80017ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	2bff      	cmp	r3, #255	; 0xff
 80017f4:	d801      	bhi.n	80017fa <HAL_GPIO_Init+0x13a>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	e001      	b.n	80017fe <HAL_GPIO_Init+0x13e>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	3304      	adds	r3, #4
 80017fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	2bff      	cmp	r3, #255	; 0xff
 8001804:	d802      	bhi.n	800180c <HAL_GPIO_Init+0x14c>
 8001806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	e002      	b.n	8001812 <HAL_GPIO_Init+0x152>
 800180c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180e:	3b08      	subs	r3, #8
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	210f      	movs	r1, #15
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	fa01 f303 	lsl.w	r3, r1, r3
 8001820:	43db      	mvns	r3, r3
 8001822:	401a      	ands	r2, r3
 8001824:	6a39      	ldr	r1, [r7, #32]
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	fa01 f303 	lsl.w	r3, r1, r3
 800182c:	431a      	orrs	r2, r3
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183a:	2b00      	cmp	r3, #0
 800183c:	f000 8090 	beq.w	8001960 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001840:	4b56      	ldr	r3, [pc, #344]	; (800199c <HAL_GPIO_Init+0x2dc>)
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	4a55      	ldr	r2, [pc, #340]	; (800199c <HAL_GPIO_Init+0x2dc>)
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	6193      	str	r3, [r2, #24]
 800184c:	4b53      	ldr	r3, [pc, #332]	; (800199c <HAL_GPIO_Init+0x2dc>)
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	f003 0301 	and.w	r3, r3, #1
 8001854:	60bb      	str	r3, [r7, #8]
 8001856:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001858:	4a51      	ldr	r2, [pc, #324]	; (80019a0 <HAL_GPIO_Init+0x2e0>)
 800185a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185c:	089b      	lsrs	r3, r3, #2
 800185e:	3302      	adds	r3, #2
 8001860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001864:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001868:	f003 0303 	and.w	r3, r3, #3
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	220f      	movs	r2, #15
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	43db      	mvns	r3, r3
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	4013      	ands	r3, r2
 800187a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4a49      	ldr	r2, [pc, #292]	; (80019a4 <HAL_GPIO_Init+0x2e4>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d00d      	beq.n	80018a0 <HAL_GPIO_Init+0x1e0>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4a48      	ldr	r2, [pc, #288]	; (80019a8 <HAL_GPIO_Init+0x2e8>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d007      	beq.n	800189c <HAL_GPIO_Init+0x1dc>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	4a47      	ldr	r2, [pc, #284]	; (80019ac <HAL_GPIO_Init+0x2ec>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d101      	bne.n	8001898 <HAL_GPIO_Init+0x1d8>
 8001894:	2302      	movs	r3, #2
 8001896:	e004      	b.n	80018a2 <HAL_GPIO_Init+0x1e2>
 8001898:	2303      	movs	r3, #3
 800189a:	e002      	b.n	80018a2 <HAL_GPIO_Init+0x1e2>
 800189c:	2301      	movs	r3, #1
 800189e:	e000      	b.n	80018a2 <HAL_GPIO_Init+0x1e2>
 80018a0:	2300      	movs	r3, #0
 80018a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018a4:	f002 0203 	and.w	r2, r2, #3
 80018a8:	0092      	lsls	r2, r2, #2
 80018aa:	4093      	lsls	r3, r2
 80018ac:	68fa      	ldr	r2, [r7, #12]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018b2:	493b      	ldr	r1, [pc, #236]	; (80019a0 <HAL_GPIO_Init+0x2e0>)
 80018b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b6:	089b      	lsrs	r3, r3, #2
 80018b8:	3302      	adds	r3, #2
 80018ba:	68fa      	ldr	r2, [r7, #12]
 80018bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d006      	beq.n	80018da <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018cc:	4b38      	ldr	r3, [pc, #224]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	4937      	ldr	r1, [pc, #220]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	600b      	str	r3, [r1, #0]
 80018d8:	e006      	b.n	80018e8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018da:	4b35      	ldr	r3, [pc, #212]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	43db      	mvns	r3, r3
 80018e2:	4933      	ldr	r1, [pc, #204]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 80018e4:	4013      	ands	r3, r2
 80018e6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d006      	beq.n	8001902 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018f4:	4b2e      	ldr	r3, [pc, #184]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 80018f6:	685a      	ldr	r2, [r3, #4]
 80018f8:	492d      	ldr	r1, [pc, #180]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	604b      	str	r3, [r1, #4]
 8001900:	e006      	b.n	8001910 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001902:	4b2b      	ldr	r3, [pc, #172]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 8001904:	685a      	ldr	r2, [r3, #4]
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	43db      	mvns	r3, r3
 800190a:	4929      	ldr	r1, [pc, #164]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 800190c:	4013      	ands	r3, r2
 800190e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d006      	beq.n	800192a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800191c:	4b24      	ldr	r3, [pc, #144]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 800191e:	689a      	ldr	r2, [r3, #8]
 8001920:	4923      	ldr	r1, [pc, #140]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	4313      	orrs	r3, r2
 8001926:	608b      	str	r3, [r1, #8]
 8001928:	e006      	b.n	8001938 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800192a:	4b21      	ldr	r3, [pc, #132]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 800192c:	689a      	ldr	r2, [r3, #8]
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	43db      	mvns	r3, r3
 8001932:	491f      	ldr	r1, [pc, #124]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 8001934:	4013      	ands	r3, r2
 8001936:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d006      	beq.n	8001952 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001944:	4b1a      	ldr	r3, [pc, #104]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 8001946:	68da      	ldr	r2, [r3, #12]
 8001948:	4919      	ldr	r1, [pc, #100]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	4313      	orrs	r3, r2
 800194e:	60cb      	str	r3, [r1, #12]
 8001950:	e006      	b.n	8001960 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001952:	4b17      	ldr	r3, [pc, #92]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 8001954:	68da      	ldr	r2, [r3, #12]
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	43db      	mvns	r3, r3
 800195a:	4915      	ldr	r1, [pc, #84]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 800195c:	4013      	ands	r3, r2
 800195e:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001962:	3301      	adds	r3, #1
 8001964:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196c:	fa22 f303 	lsr.w	r3, r2, r3
 8001970:	2b00      	cmp	r3, #0
 8001972:	f47f aeaf 	bne.w	80016d4 <HAL_GPIO_Init+0x14>
  }
}
 8001976:	bf00      	nop
 8001978:	bf00      	nop
 800197a:	372c      	adds	r7, #44	; 0x2c
 800197c:	46bd      	mov	sp, r7
 800197e:	bc80      	pop	{r7}
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	10320000 	.word	0x10320000
 8001988:	10310000 	.word	0x10310000
 800198c:	10220000 	.word	0x10220000
 8001990:	10210000 	.word	0x10210000
 8001994:	10120000 	.word	0x10120000
 8001998:	10110000 	.word	0x10110000
 800199c:	40021000 	.word	0x40021000
 80019a0:	40010000 	.word	0x40010000
 80019a4:	40010800 	.word	0x40010800
 80019a8:	40010c00 	.word	0x40010c00
 80019ac:	40011000 	.word	0x40011000
 80019b0:	40010400 	.word	0x40010400

080019b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	460b      	mov	r3, r1
 80019be:	807b      	strh	r3, [r7, #2]
 80019c0:	4613      	mov	r3, r2
 80019c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019c4:	787b      	ldrb	r3, [r7, #1]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d003      	beq.n	80019d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019ca:	887a      	ldrh	r2, [r7, #2]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019d0:	e003      	b.n	80019da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019d2:	887b      	ldrh	r3, [r7, #2]
 80019d4:	041a      	lsls	r2, r3, #16
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	611a      	str	r2, [r3, #16]
}
 80019da:	bf00      	nop
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	bc80      	pop	{r7}
 80019e2:	4770      	bx	lr

080019e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d101      	bne.n	80019f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e26c      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	f000 8087 	beq.w	8001b12 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a04:	4b92      	ldr	r3, [pc, #584]	; (8001c50 <HAL_RCC_OscConfig+0x26c>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f003 030c 	and.w	r3, r3, #12
 8001a0c:	2b04      	cmp	r3, #4
 8001a0e:	d00c      	beq.n	8001a2a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a10:	4b8f      	ldr	r3, [pc, #572]	; (8001c50 <HAL_RCC_OscConfig+0x26c>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f003 030c 	and.w	r3, r3, #12
 8001a18:	2b08      	cmp	r3, #8
 8001a1a:	d112      	bne.n	8001a42 <HAL_RCC_OscConfig+0x5e>
 8001a1c:	4b8c      	ldr	r3, [pc, #560]	; (8001c50 <HAL_RCC_OscConfig+0x26c>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a28:	d10b      	bne.n	8001a42 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a2a:	4b89      	ldr	r3, [pc, #548]	; (8001c50 <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d06c      	beq.n	8001b10 <HAL_RCC_OscConfig+0x12c>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d168      	bne.n	8001b10 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e246      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a4a:	d106      	bne.n	8001a5a <HAL_RCC_OscConfig+0x76>
 8001a4c:	4b80      	ldr	r3, [pc, #512]	; (8001c50 <HAL_RCC_OscConfig+0x26c>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a7f      	ldr	r2, [pc, #508]	; (8001c50 <HAL_RCC_OscConfig+0x26c>)
 8001a52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a56:	6013      	str	r3, [r2, #0]
 8001a58:	e02e      	b.n	8001ab8 <HAL_RCC_OscConfig+0xd4>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d10c      	bne.n	8001a7c <HAL_RCC_OscConfig+0x98>
 8001a62:	4b7b      	ldr	r3, [pc, #492]	; (8001c50 <HAL_RCC_OscConfig+0x26c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a7a      	ldr	r2, [pc, #488]	; (8001c50 <HAL_RCC_OscConfig+0x26c>)
 8001a68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a6c:	6013      	str	r3, [r2, #0]
 8001a6e:	4b78      	ldr	r3, [pc, #480]	; (8001c50 <HAL_RCC_OscConfig+0x26c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a77      	ldr	r2, [pc, #476]	; (8001c50 <HAL_RCC_OscConfig+0x26c>)
 8001a74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a78:	6013      	str	r3, [r2, #0]
 8001a7a:	e01d      	b.n	8001ab8 <HAL_RCC_OscConfig+0xd4>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a84:	d10c      	bne.n	8001aa0 <HAL_RCC_OscConfig+0xbc>
 8001a86:	4b72      	ldr	r3, [pc, #456]	; (8001c50 <HAL_RCC_OscConfig+0x26c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a71      	ldr	r2, [pc, #452]	; (8001c50 <HAL_RCC_OscConfig+0x26c>)
 8001a8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a90:	6013      	str	r3, [r2, #0]
 8001a92:	4b6f      	ldr	r3, [pc, #444]	; (8001c50 <HAL_RCC_OscConfig+0x26c>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a6e      	ldr	r2, [pc, #440]	; (8001c50 <HAL_RCC_OscConfig+0x26c>)
 8001a98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a9c:	6013      	str	r3, [r2, #0]
 8001a9e:	e00b      	b.n	8001ab8 <HAL_RCC_OscConfig+0xd4>
 8001aa0:	4b6b      	ldr	r3, [pc, #428]	; (8001c50 <HAL_RCC_OscConfig+0x26c>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a6a      	ldr	r2, [pc, #424]	; (8001c50 <HAL_RCC_OscConfig+0x26c>)
 8001aa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aaa:	6013      	str	r3, [r2, #0]
 8001aac:	4b68      	ldr	r3, [pc, #416]	; (8001c50 <HAL_RCC_OscConfig+0x26c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a67      	ldr	r2, [pc, #412]	; (8001c50 <HAL_RCC_OscConfig+0x26c>)
 8001ab2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ab6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d013      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac0:	f7ff f910 	bl	8000ce4 <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac6:	e008      	b.n	8001ada <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ac8:	f7ff f90c 	bl	8000ce4 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b64      	cmp	r3, #100	; 0x64
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e1fa      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ada:	4b5d      	ldr	r3, [pc, #372]	; (8001c50 <HAL_RCC_OscConfig+0x26c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d0f0      	beq.n	8001ac8 <HAL_RCC_OscConfig+0xe4>
 8001ae6:	e014      	b.n	8001b12 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae8:	f7ff f8fc 	bl	8000ce4 <HAL_GetTick>
 8001aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aee:	e008      	b.n	8001b02 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001af0:	f7ff f8f8 	bl	8000ce4 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b64      	cmp	r3, #100	; 0x64
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e1e6      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b02:	4b53      	ldr	r3, [pc, #332]	; (8001c50 <HAL_RCC_OscConfig+0x26c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1f0      	bne.n	8001af0 <HAL_RCC_OscConfig+0x10c>
 8001b0e:	e000      	b.n	8001b12 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d063      	beq.n	8001be6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b1e:	4b4c      	ldr	r3, [pc, #304]	; (8001c50 <HAL_RCC_OscConfig+0x26c>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f003 030c 	and.w	r3, r3, #12
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d00b      	beq.n	8001b42 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b2a:	4b49      	ldr	r3, [pc, #292]	; (8001c50 <HAL_RCC_OscConfig+0x26c>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f003 030c 	and.w	r3, r3, #12
 8001b32:	2b08      	cmp	r3, #8
 8001b34:	d11c      	bne.n	8001b70 <HAL_RCC_OscConfig+0x18c>
 8001b36:	4b46      	ldr	r3, [pc, #280]	; (8001c50 <HAL_RCC_OscConfig+0x26c>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d116      	bne.n	8001b70 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b42:	4b43      	ldr	r3, [pc, #268]	; (8001c50 <HAL_RCC_OscConfig+0x26c>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d005      	beq.n	8001b5a <HAL_RCC_OscConfig+0x176>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d001      	beq.n	8001b5a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e1ba      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b5a:	4b3d      	ldr	r3, [pc, #244]	; (8001c50 <HAL_RCC_OscConfig+0x26c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	695b      	ldr	r3, [r3, #20]
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	4939      	ldr	r1, [pc, #228]	; (8001c50 <HAL_RCC_OscConfig+0x26c>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b6e:	e03a      	b.n	8001be6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	691b      	ldr	r3, [r3, #16]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d020      	beq.n	8001bba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b78:	4b36      	ldr	r3, [pc, #216]	; (8001c54 <HAL_RCC_OscConfig+0x270>)
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7e:	f7ff f8b1 	bl	8000ce4 <HAL_GetTick>
 8001b82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b84:	e008      	b.n	8001b98 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b86:	f7ff f8ad 	bl	8000ce4 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d901      	bls.n	8001b98 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e19b      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b98:	4b2d      	ldr	r3, [pc, #180]	; (8001c50 <HAL_RCC_OscConfig+0x26c>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d0f0      	beq.n	8001b86 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba4:	4b2a      	ldr	r3, [pc, #168]	; (8001c50 <HAL_RCC_OscConfig+0x26c>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	695b      	ldr	r3, [r3, #20]
 8001bb0:	00db      	lsls	r3, r3, #3
 8001bb2:	4927      	ldr	r1, [pc, #156]	; (8001c50 <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	600b      	str	r3, [r1, #0]
 8001bb8:	e015      	b.n	8001be6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bba:	4b26      	ldr	r3, [pc, #152]	; (8001c54 <HAL_RCC_OscConfig+0x270>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc0:	f7ff f890 	bl	8000ce4 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bc8:	f7ff f88c 	bl	8000ce4 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e17a      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bda:	4b1d      	ldr	r3, [pc, #116]	; (8001c50 <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1f0      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0308 	and.w	r3, r3, #8
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d03a      	beq.n	8001c68 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d019      	beq.n	8001c2e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bfa:	4b17      	ldr	r3, [pc, #92]	; (8001c58 <HAL_RCC_OscConfig+0x274>)
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c00:	f7ff f870 	bl	8000ce4 <HAL_GetTick>
 8001c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c08:	f7ff f86c 	bl	8000ce4 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e15a      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c1a:	4b0d      	ldr	r3, [pc, #52]	; (8001c50 <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d0f0      	beq.n	8001c08 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c26:	2001      	movs	r0, #1
 8001c28:	f000 fad8 	bl	80021dc <RCC_Delay>
 8001c2c:	e01c      	b.n	8001c68 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c2e:	4b0a      	ldr	r3, [pc, #40]	; (8001c58 <HAL_RCC_OscConfig+0x274>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c34:	f7ff f856 	bl	8000ce4 <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c3a:	e00f      	b.n	8001c5c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c3c:	f7ff f852 	bl	8000ce4 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d908      	bls.n	8001c5c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e140      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4ec>
 8001c4e:	bf00      	nop
 8001c50:	40021000 	.word	0x40021000
 8001c54:	42420000 	.word	0x42420000
 8001c58:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c5c:	4b9e      	ldr	r3, [pc, #632]	; (8001ed8 <HAL_RCC_OscConfig+0x4f4>)
 8001c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1e9      	bne.n	8001c3c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0304 	and.w	r3, r3, #4
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	f000 80a6 	beq.w	8001dc2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c76:	2300      	movs	r3, #0
 8001c78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c7a:	4b97      	ldr	r3, [pc, #604]	; (8001ed8 <HAL_RCC_OscConfig+0x4f4>)
 8001c7c:	69db      	ldr	r3, [r3, #28]
 8001c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d10d      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c86:	4b94      	ldr	r3, [pc, #592]	; (8001ed8 <HAL_RCC_OscConfig+0x4f4>)
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	4a93      	ldr	r2, [pc, #588]	; (8001ed8 <HAL_RCC_OscConfig+0x4f4>)
 8001c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c90:	61d3      	str	r3, [r2, #28]
 8001c92:	4b91      	ldr	r3, [pc, #580]	; (8001ed8 <HAL_RCC_OscConfig+0x4f4>)
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c9a:	60bb      	str	r3, [r7, #8]
 8001c9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca2:	4b8e      	ldr	r3, [pc, #568]	; (8001edc <HAL_RCC_OscConfig+0x4f8>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d118      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cae:	4b8b      	ldr	r3, [pc, #556]	; (8001edc <HAL_RCC_OscConfig+0x4f8>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a8a      	ldr	r2, [pc, #552]	; (8001edc <HAL_RCC_OscConfig+0x4f8>)
 8001cb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cba:	f7ff f813 	bl	8000ce4 <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc0:	e008      	b.n	8001cd4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cc2:	f7ff f80f 	bl	8000ce4 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b64      	cmp	r3, #100	; 0x64
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e0fd      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd4:	4b81      	ldr	r3, [pc, #516]	; (8001edc <HAL_RCC_OscConfig+0x4f8>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d0f0      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d106      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x312>
 8001ce8:	4b7b      	ldr	r3, [pc, #492]	; (8001ed8 <HAL_RCC_OscConfig+0x4f4>)
 8001cea:	6a1b      	ldr	r3, [r3, #32]
 8001cec:	4a7a      	ldr	r2, [pc, #488]	; (8001ed8 <HAL_RCC_OscConfig+0x4f4>)
 8001cee:	f043 0301 	orr.w	r3, r3, #1
 8001cf2:	6213      	str	r3, [r2, #32]
 8001cf4:	e02d      	b.n	8001d52 <HAL_RCC_OscConfig+0x36e>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d10c      	bne.n	8001d18 <HAL_RCC_OscConfig+0x334>
 8001cfe:	4b76      	ldr	r3, [pc, #472]	; (8001ed8 <HAL_RCC_OscConfig+0x4f4>)
 8001d00:	6a1b      	ldr	r3, [r3, #32]
 8001d02:	4a75      	ldr	r2, [pc, #468]	; (8001ed8 <HAL_RCC_OscConfig+0x4f4>)
 8001d04:	f023 0301 	bic.w	r3, r3, #1
 8001d08:	6213      	str	r3, [r2, #32]
 8001d0a:	4b73      	ldr	r3, [pc, #460]	; (8001ed8 <HAL_RCC_OscConfig+0x4f4>)
 8001d0c:	6a1b      	ldr	r3, [r3, #32]
 8001d0e:	4a72      	ldr	r2, [pc, #456]	; (8001ed8 <HAL_RCC_OscConfig+0x4f4>)
 8001d10:	f023 0304 	bic.w	r3, r3, #4
 8001d14:	6213      	str	r3, [r2, #32]
 8001d16:	e01c      	b.n	8001d52 <HAL_RCC_OscConfig+0x36e>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	2b05      	cmp	r3, #5
 8001d1e:	d10c      	bne.n	8001d3a <HAL_RCC_OscConfig+0x356>
 8001d20:	4b6d      	ldr	r3, [pc, #436]	; (8001ed8 <HAL_RCC_OscConfig+0x4f4>)
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	4a6c      	ldr	r2, [pc, #432]	; (8001ed8 <HAL_RCC_OscConfig+0x4f4>)
 8001d26:	f043 0304 	orr.w	r3, r3, #4
 8001d2a:	6213      	str	r3, [r2, #32]
 8001d2c:	4b6a      	ldr	r3, [pc, #424]	; (8001ed8 <HAL_RCC_OscConfig+0x4f4>)
 8001d2e:	6a1b      	ldr	r3, [r3, #32]
 8001d30:	4a69      	ldr	r2, [pc, #420]	; (8001ed8 <HAL_RCC_OscConfig+0x4f4>)
 8001d32:	f043 0301 	orr.w	r3, r3, #1
 8001d36:	6213      	str	r3, [r2, #32]
 8001d38:	e00b      	b.n	8001d52 <HAL_RCC_OscConfig+0x36e>
 8001d3a:	4b67      	ldr	r3, [pc, #412]	; (8001ed8 <HAL_RCC_OscConfig+0x4f4>)
 8001d3c:	6a1b      	ldr	r3, [r3, #32]
 8001d3e:	4a66      	ldr	r2, [pc, #408]	; (8001ed8 <HAL_RCC_OscConfig+0x4f4>)
 8001d40:	f023 0301 	bic.w	r3, r3, #1
 8001d44:	6213      	str	r3, [r2, #32]
 8001d46:	4b64      	ldr	r3, [pc, #400]	; (8001ed8 <HAL_RCC_OscConfig+0x4f4>)
 8001d48:	6a1b      	ldr	r3, [r3, #32]
 8001d4a:	4a63      	ldr	r2, [pc, #396]	; (8001ed8 <HAL_RCC_OscConfig+0x4f4>)
 8001d4c:	f023 0304 	bic.w	r3, r3, #4
 8001d50:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d015      	beq.n	8001d86 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d5a:	f7fe ffc3 	bl	8000ce4 <HAL_GetTick>
 8001d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d60:	e00a      	b.n	8001d78 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d62:	f7fe ffbf 	bl	8000ce4 <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d901      	bls.n	8001d78 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e0ab      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d78:	4b57      	ldr	r3, [pc, #348]	; (8001ed8 <HAL_RCC_OscConfig+0x4f4>)
 8001d7a:	6a1b      	ldr	r3, [r3, #32]
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d0ee      	beq.n	8001d62 <HAL_RCC_OscConfig+0x37e>
 8001d84:	e014      	b.n	8001db0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d86:	f7fe ffad 	bl	8000ce4 <HAL_GetTick>
 8001d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d8c:	e00a      	b.n	8001da4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d8e:	f7fe ffa9 	bl	8000ce4 <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e095      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001da4:	4b4c      	ldr	r3, [pc, #304]	; (8001ed8 <HAL_RCC_OscConfig+0x4f4>)
 8001da6:	6a1b      	ldr	r3, [r3, #32]
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d1ee      	bne.n	8001d8e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001db0:	7dfb      	ldrb	r3, [r7, #23]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d105      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001db6:	4b48      	ldr	r3, [pc, #288]	; (8001ed8 <HAL_RCC_OscConfig+0x4f4>)
 8001db8:	69db      	ldr	r3, [r3, #28]
 8001dba:	4a47      	ldr	r2, [pc, #284]	; (8001ed8 <HAL_RCC_OscConfig+0x4f4>)
 8001dbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dc0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	69db      	ldr	r3, [r3, #28]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f000 8081 	beq.w	8001ece <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dcc:	4b42      	ldr	r3, [pc, #264]	; (8001ed8 <HAL_RCC_OscConfig+0x4f4>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f003 030c 	and.w	r3, r3, #12
 8001dd4:	2b08      	cmp	r3, #8
 8001dd6:	d061      	beq.n	8001e9c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	69db      	ldr	r3, [r3, #28]
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d146      	bne.n	8001e6e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001de0:	4b3f      	ldr	r3, [pc, #252]	; (8001ee0 <HAL_RCC_OscConfig+0x4fc>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de6:	f7fe ff7d 	bl	8000ce4 <HAL_GetTick>
 8001dea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dec:	e008      	b.n	8001e00 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dee:	f7fe ff79 	bl	8000ce4 <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d901      	bls.n	8001e00 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e067      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e00:	4b35      	ldr	r3, [pc, #212]	; (8001ed8 <HAL_RCC_OscConfig+0x4f4>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d1f0      	bne.n	8001dee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a1b      	ldr	r3, [r3, #32]
 8001e10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e14:	d108      	bne.n	8001e28 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e16:	4b30      	ldr	r3, [pc, #192]	; (8001ed8 <HAL_RCC_OscConfig+0x4f4>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	492d      	ldr	r1, [pc, #180]	; (8001ed8 <HAL_RCC_OscConfig+0x4f4>)
 8001e24:	4313      	orrs	r3, r2
 8001e26:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e28:	4b2b      	ldr	r3, [pc, #172]	; (8001ed8 <HAL_RCC_OscConfig+0x4f4>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a19      	ldr	r1, [r3, #32]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e38:	430b      	orrs	r3, r1
 8001e3a:	4927      	ldr	r1, [pc, #156]	; (8001ed8 <HAL_RCC_OscConfig+0x4f4>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e40:	4b27      	ldr	r3, [pc, #156]	; (8001ee0 <HAL_RCC_OscConfig+0x4fc>)
 8001e42:	2201      	movs	r2, #1
 8001e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e46:	f7fe ff4d 	bl	8000ce4 <HAL_GetTick>
 8001e4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e4c:	e008      	b.n	8001e60 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e4e:	f7fe ff49 	bl	8000ce4 <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e037      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e60:	4b1d      	ldr	r3, [pc, #116]	; (8001ed8 <HAL_RCC_OscConfig+0x4f4>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d0f0      	beq.n	8001e4e <HAL_RCC_OscConfig+0x46a>
 8001e6c:	e02f      	b.n	8001ece <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e6e:	4b1c      	ldr	r3, [pc, #112]	; (8001ee0 <HAL_RCC_OscConfig+0x4fc>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e74:	f7fe ff36 	bl	8000ce4 <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e7c:	f7fe ff32 	bl	8000ce4 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e020      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e8e:	4b12      	ldr	r3, [pc, #72]	; (8001ed8 <HAL_RCC_OscConfig+0x4f4>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1f0      	bne.n	8001e7c <HAL_RCC_OscConfig+0x498>
 8001e9a:	e018      	b.n	8001ece <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	69db      	ldr	r3, [r3, #28]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d101      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e013      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ea8:	4b0b      	ldr	r3, [pc, #44]	; (8001ed8 <HAL_RCC_OscConfig+0x4f4>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a1b      	ldr	r3, [r3, #32]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d106      	bne.n	8001eca <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d001      	beq.n	8001ece <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e000      	b.n	8001ed0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3718      	adds	r7, #24
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	40007000 	.word	0x40007000
 8001ee0:	42420060 	.word	0x42420060

08001ee4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d101      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e0d0      	b.n	800209a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ef8:	4b6a      	ldr	r3, [pc, #424]	; (80020a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0307 	and.w	r3, r3, #7
 8001f00:	683a      	ldr	r2, [r7, #0]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d910      	bls.n	8001f28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f06:	4b67      	ldr	r3, [pc, #412]	; (80020a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f023 0207 	bic.w	r2, r3, #7
 8001f0e:	4965      	ldr	r1, [pc, #404]	; (80020a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f16:	4b63      	ldr	r3, [pc, #396]	; (80020a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d001      	beq.n	8001f28 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e0b8      	b.n	800209a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d020      	beq.n	8001f76 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d005      	beq.n	8001f4c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f40:	4b59      	ldr	r3, [pc, #356]	; (80020a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	4a58      	ldr	r2, [pc, #352]	; (80020a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f46:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f4a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0308 	and.w	r3, r3, #8
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d005      	beq.n	8001f64 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f58:	4b53      	ldr	r3, [pc, #332]	; (80020a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	4a52      	ldr	r2, [pc, #328]	; (80020a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f62:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f64:	4b50      	ldr	r3, [pc, #320]	; (80020a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	494d      	ldr	r1, [pc, #308]	; (80020a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d040      	beq.n	8002004 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d107      	bne.n	8001f9a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f8a:	4b47      	ldr	r3, [pc, #284]	; (80020a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d115      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e07f      	b.n	800209a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d107      	bne.n	8001fb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fa2:	4b41      	ldr	r3, [pc, #260]	; (80020a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d109      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e073      	b.n	800209a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb2:	4b3d      	ldr	r3, [pc, #244]	; (80020a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d101      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e06b      	b.n	800209a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fc2:	4b39      	ldr	r3, [pc, #228]	; (80020a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f023 0203 	bic.w	r2, r3, #3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	4936      	ldr	r1, [pc, #216]	; (80020a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fd4:	f7fe fe86 	bl	8000ce4 <HAL_GetTick>
 8001fd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fda:	e00a      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fdc:	f7fe fe82 	bl	8000ce4 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e053      	b.n	800209a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ff2:	4b2d      	ldr	r3, [pc, #180]	; (80020a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f003 020c 	and.w	r2, r3, #12
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	429a      	cmp	r2, r3
 8002002:	d1eb      	bne.n	8001fdc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002004:	4b27      	ldr	r3, [pc, #156]	; (80020a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	429a      	cmp	r2, r3
 8002010:	d210      	bcs.n	8002034 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002012:	4b24      	ldr	r3, [pc, #144]	; (80020a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f023 0207 	bic.w	r2, r3, #7
 800201a:	4922      	ldr	r1, [pc, #136]	; (80020a4 <HAL_RCC_ClockConfig+0x1c0>)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	4313      	orrs	r3, r2
 8002020:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002022:	4b20      	ldr	r3, [pc, #128]	; (80020a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0307 	and.w	r3, r3, #7
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	429a      	cmp	r2, r3
 800202e:	d001      	beq.n	8002034 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e032      	b.n	800209a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0304 	and.w	r3, r3, #4
 800203c:	2b00      	cmp	r3, #0
 800203e:	d008      	beq.n	8002052 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002040:	4b19      	ldr	r3, [pc, #100]	; (80020a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	4916      	ldr	r1, [pc, #88]	; (80020a8 <HAL_RCC_ClockConfig+0x1c4>)
 800204e:	4313      	orrs	r3, r2
 8002050:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0308 	and.w	r3, r3, #8
 800205a:	2b00      	cmp	r3, #0
 800205c:	d009      	beq.n	8002072 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800205e:	4b12      	ldr	r3, [pc, #72]	; (80020a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	490e      	ldr	r1, [pc, #56]	; (80020a8 <HAL_RCC_ClockConfig+0x1c4>)
 800206e:	4313      	orrs	r3, r2
 8002070:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002072:	f000 f821 	bl	80020b8 <HAL_RCC_GetSysClockFreq>
 8002076:	4602      	mov	r2, r0
 8002078:	4b0b      	ldr	r3, [pc, #44]	; (80020a8 <HAL_RCC_ClockConfig+0x1c4>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	091b      	lsrs	r3, r3, #4
 800207e:	f003 030f 	and.w	r3, r3, #15
 8002082:	490a      	ldr	r1, [pc, #40]	; (80020ac <HAL_RCC_ClockConfig+0x1c8>)
 8002084:	5ccb      	ldrb	r3, [r1, r3]
 8002086:	fa22 f303 	lsr.w	r3, r2, r3
 800208a:	4a09      	ldr	r2, [pc, #36]	; (80020b0 <HAL_RCC_ClockConfig+0x1cc>)
 800208c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800208e:	4b09      	ldr	r3, [pc, #36]	; (80020b4 <HAL_RCC_ClockConfig+0x1d0>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f7fe fde4 	bl	8000c60 <HAL_InitTick>

  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40022000 	.word	0x40022000
 80020a8:	40021000 	.word	0x40021000
 80020ac:	08004928 	.word	0x08004928
 80020b0:	20000000 	.word	0x20000000
 80020b4:	20000018 	.word	0x20000018

080020b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020b8:	b490      	push	{r4, r7}
 80020ba:	b08a      	sub	sp, #40	; 0x28
 80020bc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80020be:	4b2a      	ldr	r3, [pc, #168]	; (8002168 <HAL_RCC_GetSysClockFreq+0xb0>)
 80020c0:	1d3c      	adds	r4, r7, #4
 80020c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80020c8:	f240 2301 	movw	r3, #513	; 0x201
 80020cc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020ce:	2300      	movs	r3, #0
 80020d0:	61fb      	str	r3, [r7, #28]
 80020d2:	2300      	movs	r3, #0
 80020d4:	61bb      	str	r3, [r7, #24]
 80020d6:	2300      	movs	r3, #0
 80020d8:	627b      	str	r3, [r7, #36]	; 0x24
 80020da:	2300      	movs	r3, #0
 80020dc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80020de:	2300      	movs	r3, #0
 80020e0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020e2:	4b22      	ldr	r3, [pc, #136]	; (800216c <HAL_RCC_GetSysClockFreq+0xb4>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	f003 030c 	and.w	r3, r3, #12
 80020ee:	2b04      	cmp	r3, #4
 80020f0:	d002      	beq.n	80020f8 <HAL_RCC_GetSysClockFreq+0x40>
 80020f2:	2b08      	cmp	r3, #8
 80020f4:	d003      	beq.n	80020fe <HAL_RCC_GetSysClockFreq+0x46>
 80020f6:	e02d      	b.n	8002154 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020f8:	4b1d      	ldr	r3, [pc, #116]	; (8002170 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020fa:	623b      	str	r3, [r7, #32]
      break;
 80020fc:	e02d      	b.n	800215a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	0c9b      	lsrs	r3, r3, #18
 8002102:	f003 030f 	and.w	r3, r3, #15
 8002106:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800210a:	4413      	add	r3, r2
 800210c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002110:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d013      	beq.n	8002144 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800211c:	4b13      	ldr	r3, [pc, #76]	; (800216c <HAL_RCC_GetSysClockFreq+0xb4>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	0c5b      	lsrs	r3, r3, #17
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800212a:	4413      	add	r3, r2
 800212c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002130:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	4a0e      	ldr	r2, [pc, #56]	; (8002170 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002136:	fb02 f203 	mul.w	r2, r2, r3
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002140:	627b      	str	r3, [r7, #36]	; 0x24
 8002142:	e004      	b.n	800214e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	4a0b      	ldr	r2, [pc, #44]	; (8002174 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002148:	fb02 f303 	mul.w	r3, r2, r3
 800214c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800214e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002150:	623b      	str	r3, [r7, #32]
      break;
 8002152:	e002      	b.n	800215a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002154:	4b06      	ldr	r3, [pc, #24]	; (8002170 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002156:	623b      	str	r3, [r7, #32]
      break;
 8002158:	bf00      	nop
    }
  }
  return sysclockfreq;
 800215a:	6a3b      	ldr	r3, [r7, #32]
}
 800215c:	4618      	mov	r0, r3
 800215e:	3728      	adds	r7, #40	; 0x28
 8002160:	46bd      	mov	sp, r7
 8002162:	bc90      	pop	{r4, r7}
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	08004918 	.word	0x08004918
 800216c:	40021000 	.word	0x40021000
 8002170:	007a1200 	.word	0x007a1200
 8002174:	003d0900 	.word	0x003d0900

08002178 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800217c:	4b02      	ldr	r3, [pc, #8]	; (8002188 <HAL_RCC_GetHCLKFreq+0x10>)
 800217e:	681b      	ldr	r3, [r3, #0]
}
 8002180:	4618      	mov	r0, r3
 8002182:	46bd      	mov	sp, r7
 8002184:	bc80      	pop	{r7}
 8002186:	4770      	bx	lr
 8002188:	20000000 	.word	0x20000000

0800218c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002190:	f7ff fff2 	bl	8002178 <HAL_RCC_GetHCLKFreq>
 8002194:	4602      	mov	r2, r0
 8002196:	4b05      	ldr	r3, [pc, #20]	; (80021ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	0a1b      	lsrs	r3, r3, #8
 800219c:	f003 0307 	and.w	r3, r3, #7
 80021a0:	4903      	ldr	r1, [pc, #12]	; (80021b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021a2:	5ccb      	ldrb	r3, [r1, r3]
 80021a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40021000 	.word	0x40021000
 80021b0:	08004938 	.word	0x08004938

080021b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021b8:	f7ff ffde 	bl	8002178 <HAL_RCC_GetHCLKFreq>
 80021bc:	4602      	mov	r2, r0
 80021be:	4b05      	ldr	r3, [pc, #20]	; (80021d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	0adb      	lsrs	r3, r3, #11
 80021c4:	f003 0307 	and.w	r3, r3, #7
 80021c8:	4903      	ldr	r1, [pc, #12]	; (80021d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021ca:	5ccb      	ldrb	r3, [r1, r3]
 80021cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40021000 	.word	0x40021000
 80021d8:	08004938 	.word	0x08004938

080021dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021e4:	4b0a      	ldr	r3, [pc, #40]	; (8002210 <RCC_Delay+0x34>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a0a      	ldr	r2, [pc, #40]	; (8002214 <RCC_Delay+0x38>)
 80021ea:	fba2 2303 	umull	r2, r3, r2, r3
 80021ee:	0a5b      	lsrs	r3, r3, #9
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	fb02 f303 	mul.w	r3, r2, r3
 80021f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021f8:	bf00      	nop
  }
  while (Delay --);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	1e5a      	subs	r2, r3, #1
 80021fe:	60fa      	str	r2, [r7, #12]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d1f9      	bne.n	80021f8 <RCC_Delay+0x1c>
}
 8002204:	bf00      	nop
 8002206:	bf00      	nop
 8002208:	3714      	adds	r7, #20
 800220a:	46bd      	mov	sp, r7
 800220c:	bc80      	pop	{r7}
 800220e:	4770      	bx	lr
 8002210:	20000000 	.word	0x20000000
 8002214:	10624dd3 	.word	0x10624dd3

08002218 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002220:	2300      	movs	r3, #0
 8002222:	613b      	str	r3, [r7, #16]
 8002224:	2300      	movs	r3, #0
 8002226:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0301 	and.w	r3, r3, #1
 8002230:	2b00      	cmp	r3, #0
 8002232:	d07d      	beq.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002234:	2300      	movs	r3, #0
 8002236:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002238:	4b4f      	ldr	r3, [pc, #316]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800223a:	69db      	ldr	r3, [r3, #28]
 800223c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d10d      	bne.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002244:	4b4c      	ldr	r3, [pc, #304]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002246:	69db      	ldr	r3, [r3, #28]
 8002248:	4a4b      	ldr	r2, [pc, #300]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800224a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800224e:	61d3      	str	r3, [r2, #28]
 8002250:	4b49      	ldr	r3, [pc, #292]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002252:	69db      	ldr	r3, [r3, #28]
 8002254:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002258:	60bb      	str	r3, [r7, #8]
 800225a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800225c:	2301      	movs	r3, #1
 800225e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002260:	4b46      	ldr	r3, [pc, #280]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002268:	2b00      	cmp	r3, #0
 800226a:	d118      	bne.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800226c:	4b43      	ldr	r3, [pc, #268]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a42      	ldr	r2, [pc, #264]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002272:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002276:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002278:	f7fe fd34 	bl	8000ce4 <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800227e:	e008      	b.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002280:	f7fe fd30 	bl	8000ce4 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b64      	cmp	r3, #100	; 0x64
 800228c:	d901      	bls.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e06d      	b.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002292:	4b3a      	ldr	r3, [pc, #232]	; (800237c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800229a:	2b00      	cmp	r3, #0
 800229c:	d0f0      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800229e:	4b36      	ldr	r3, [pc, #216]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022a0:	6a1b      	ldr	r3, [r3, #32]
 80022a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022a6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d02e      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d027      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022bc:	4b2e      	ldr	r3, [pc, #184]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022be:	6a1b      	ldr	r3, [r3, #32]
 80022c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022c4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022c6:	4b2e      	ldr	r3, [pc, #184]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022c8:	2201      	movs	r2, #1
 80022ca:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022cc:	4b2c      	ldr	r3, [pc, #176]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80022d2:	4a29      	ldr	r2, [pc, #164]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d014      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e2:	f7fe fcff 	bl	8000ce4 <HAL_GetTick>
 80022e6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022e8:	e00a      	b.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ea:	f7fe fcfb 	bl	8000ce4 <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d901      	bls.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e036      	b.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002300:	4b1d      	ldr	r3, [pc, #116]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d0ee      	beq.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800230c:	4b1a      	ldr	r3, [pc, #104]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800230e:	6a1b      	ldr	r3, [r3, #32]
 8002310:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	4917      	ldr	r1, [pc, #92]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800231a:	4313      	orrs	r3, r2
 800231c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800231e:	7dfb      	ldrb	r3, [r7, #23]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d105      	bne.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002324:	4b14      	ldr	r3, [pc, #80]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002326:	69db      	ldr	r3, [r3, #28]
 8002328:	4a13      	ldr	r2, [pc, #76]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800232a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800232e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d008      	beq.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800233c:	4b0e      	ldr	r3, [pc, #56]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	490b      	ldr	r1, [pc, #44]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800234a:	4313      	orrs	r3, r2
 800234c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0310 	and.w	r3, r3, #16
 8002356:	2b00      	cmp	r3, #0
 8002358:	d008      	beq.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800235a:	4b07      	ldr	r3, [pc, #28]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	4904      	ldr	r1, [pc, #16]	; (8002378 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002368:	4313      	orrs	r3, r2
 800236a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3718      	adds	r7, #24
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	40021000 	.word	0x40021000
 800237c:	40007000 	.word	0x40007000
 8002380:	42420440 	.word	0x42420440

08002384 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e041      	b.n	800241a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d106      	bne.n	80023b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f7fe f946 	bl	800063c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2202      	movs	r2, #2
 80023b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	3304      	adds	r3, #4
 80023c0:	4619      	mov	r1, r3
 80023c2:	4610      	mov	r0, r2
 80023c4:	f000 fa6a 	bl	800289c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
	...

08002424 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002432:	b2db      	uxtb	r3, r3
 8002434:	2b01      	cmp	r3, #1
 8002436:	d001      	beq.n	800243c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e035      	b.n	80024a8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2202      	movs	r2, #2
 8002440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68da      	ldr	r2, [r3, #12]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f042 0201 	orr.w	r2, r2, #1
 8002452:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a16      	ldr	r2, [pc, #88]	; (80024b4 <HAL_TIM_Base_Start_IT+0x90>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d009      	beq.n	8002472 <HAL_TIM_Base_Start_IT+0x4e>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002466:	d004      	beq.n	8002472 <HAL_TIM_Base_Start_IT+0x4e>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a12      	ldr	r2, [pc, #72]	; (80024b8 <HAL_TIM_Base_Start_IT+0x94>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d111      	bne.n	8002496 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f003 0307 	and.w	r3, r3, #7
 800247c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2b06      	cmp	r3, #6
 8002482:	d010      	beq.n	80024a6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f042 0201 	orr.w	r2, r2, #1
 8002492:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002494:	e007      	b.n	80024a6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f042 0201 	orr.w	r2, r2, #1
 80024a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3714      	adds	r7, #20
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bc80      	pop	{r7}
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	40012c00 	.word	0x40012c00
 80024b8:	40000400 	.word	0x40000400

080024bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d122      	bne.n	8002518 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d11b      	bne.n	8002518 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f06f 0202 	mvn.w	r2, #2
 80024e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2201      	movs	r2, #1
 80024ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	f003 0303 	and.w	r3, r3, #3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 f9b1 	bl	8002866 <HAL_TIM_IC_CaptureCallback>
 8002504:	e005      	b.n	8002512 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 f9a4 	bl	8002854 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f000 f9b3 	bl	8002878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	f003 0304 	and.w	r3, r3, #4
 8002522:	2b04      	cmp	r3, #4
 8002524:	d122      	bne.n	800256c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	f003 0304 	and.w	r3, r3, #4
 8002530:	2b04      	cmp	r3, #4
 8002532:	d11b      	bne.n	800256c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f06f 0204 	mvn.w	r2, #4
 800253c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2202      	movs	r2, #2
 8002542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 f987 	bl	8002866 <HAL_TIM_IC_CaptureCallback>
 8002558:	e005      	b.n	8002566 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f97a 	bl	8002854 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f000 f989 	bl	8002878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	f003 0308 	and.w	r3, r3, #8
 8002576:	2b08      	cmp	r3, #8
 8002578:	d122      	bne.n	80025c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	f003 0308 	and.w	r3, r3, #8
 8002584:	2b08      	cmp	r3, #8
 8002586:	d11b      	bne.n	80025c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f06f 0208 	mvn.w	r2, #8
 8002590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2204      	movs	r2, #4
 8002596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	f003 0303 	and.w	r3, r3, #3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 f95d 	bl	8002866 <HAL_TIM_IC_CaptureCallback>
 80025ac:	e005      	b.n	80025ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 f950 	bl	8002854 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f000 f95f 	bl	8002878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	f003 0310 	and.w	r3, r3, #16
 80025ca:	2b10      	cmp	r3, #16
 80025cc:	d122      	bne.n	8002614 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	f003 0310 	and.w	r3, r3, #16
 80025d8:	2b10      	cmp	r3, #16
 80025da:	d11b      	bne.n	8002614 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f06f 0210 	mvn.w	r2, #16
 80025e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2208      	movs	r2, #8
 80025ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 f933 	bl	8002866 <HAL_TIM_IC_CaptureCallback>
 8002600:	e005      	b.n	800260e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f926 	bl	8002854 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f000 f935 	bl	8002878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b01      	cmp	r3, #1
 8002620:	d10e      	bne.n	8002640 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	2b01      	cmp	r3, #1
 800262e:	d107      	bne.n	8002640 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f06f 0201 	mvn.w	r2, #1
 8002638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f7fd ff7c 	bl	8000538 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800264a:	2b80      	cmp	r3, #128	; 0x80
 800264c:	d10e      	bne.n	800266c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002658:	2b80      	cmp	r3, #128	; 0x80
 800265a:	d107      	bne.n	800266c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002664:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 fa67 	bl	8002b3a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002676:	2b40      	cmp	r3, #64	; 0x40
 8002678:	d10e      	bne.n	8002698 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002684:	2b40      	cmp	r3, #64	; 0x40
 8002686:	d107      	bne.n	8002698 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002690:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 f8f9 	bl	800288a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	f003 0320 	and.w	r3, r3, #32
 80026a2:	2b20      	cmp	r3, #32
 80026a4:	d10e      	bne.n	80026c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	f003 0320 	and.w	r3, r3, #32
 80026b0:	2b20      	cmp	r3, #32
 80026b2:	d107      	bne.n	80026c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f06f 0220 	mvn.w	r2, #32
 80026bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 fa32 	bl	8002b28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026c4:	bf00      	nop
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d101      	bne.n	80026e4 <HAL_TIM_ConfigClockSource+0x18>
 80026e0:	2302      	movs	r3, #2
 80026e2:	e0b3      	b.n	800284c <HAL_TIM_ConfigClockSource+0x180>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2202      	movs	r2, #2
 80026f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002702:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800270a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800271c:	d03e      	beq.n	800279c <HAL_TIM_ConfigClockSource+0xd0>
 800271e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002722:	f200 8087 	bhi.w	8002834 <HAL_TIM_ConfigClockSource+0x168>
 8002726:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800272a:	f000 8085 	beq.w	8002838 <HAL_TIM_ConfigClockSource+0x16c>
 800272e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002732:	d87f      	bhi.n	8002834 <HAL_TIM_ConfigClockSource+0x168>
 8002734:	2b70      	cmp	r3, #112	; 0x70
 8002736:	d01a      	beq.n	800276e <HAL_TIM_ConfigClockSource+0xa2>
 8002738:	2b70      	cmp	r3, #112	; 0x70
 800273a:	d87b      	bhi.n	8002834 <HAL_TIM_ConfigClockSource+0x168>
 800273c:	2b60      	cmp	r3, #96	; 0x60
 800273e:	d050      	beq.n	80027e2 <HAL_TIM_ConfigClockSource+0x116>
 8002740:	2b60      	cmp	r3, #96	; 0x60
 8002742:	d877      	bhi.n	8002834 <HAL_TIM_ConfigClockSource+0x168>
 8002744:	2b50      	cmp	r3, #80	; 0x50
 8002746:	d03c      	beq.n	80027c2 <HAL_TIM_ConfigClockSource+0xf6>
 8002748:	2b50      	cmp	r3, #80	; 0x50
 800274a:	d873      	bhi.n	8002834 <HAL_TIM_ConfigClockSource+0x168>
 800274c:	2b40      	cmp	r3, #64	; 0x40
 800274e:	d058      	beq.n	8002802 <HAL_TIM_ConfigClockSource+0x136>
 8002750:	2b40      	cmp	r3, #64	; 0x40
 8002752:	d86f      	bhi.n	8002834 <HAL_TIM_ConfigClockSource+0x168>
 8002754:	2b30      	cmp	r3, #48	; 0x30
 8002756:	d064      	beq.n	8002822 <HAL_TIM_ConfigClockSource+0x156>
 8002758:	2b30      	cmp	r3, #48	; 0x30
 800275a:	d86b      	bhi.n	8002834 <HAL_TIM_ConfigClockSource+0x168>
 800275c:	2b20      	cmp	r3, #32
 800275e:	d060      	beq.n	8002822 <HAL_TIM_ConfigClockSource+0x156>
 8002760:	2b20      	cmp	r3, #32
 8002762:	d867      	bhi.n	8002834 <HAL_TIM_ConfigClockSource+0x168>
 8002764:	2b00      	cmp	r3, #0
 8002766:	d05c      	beq.n	8002822 <HAL_TIM_ConfigClockSource+0x156>
 8002768:	2b10      	cmp	r3, #16
 800276a:	d05a      	beq.n	8002822 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800276c:	e062      	b.n	8002834 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6818      	ldr	r0, [r3, #0]
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	6899      	ldr	r1, [r3, #8]
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685a      	ldr	r2, [r3, #4]
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	f000 f95c 	bl	8002a3a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002790:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	609a      	str	r2, [r3, #8]
      break;
 800279a:	e04e      	b.n	800283a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6818      	ldr	r0, [r3, #0]
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	6899      	ldr	r1, [r3, #8]
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685a      	ldr	r2, [r3, #4]
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	f000 f945 	bl	8002a3a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	689a      	ldr	r2, [r3, #8]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027be:	609a      	str	r2, [r3, #8]
      break;
 80027c0:	e03b      	b.n	800283a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6818      	ldr	r0, [r3, #0]
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	6859      	ldr	r1, [r3, #4]
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	461a      	mov	r2, r3
 80027d0:	f000 f8bc 	bl	800294c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2150      	movs	r1, #80	; 0x50
 80027da:	4618      	mov	r0, r3
 80027dc:	f000 f913 	bl	8002a06 <TIM_ITRx_SetConfig>
      break;
 80027e0:	e02b      	b.n	800283a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6818      	ldr	r0, [r3, #0]
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	6859      	ldr	r1, [r3, #4]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	461a      	mov	r2, r3
 80027f0:	f000 f8da 	bl	80029a8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2160      	movs	r1, #96	; 0x60
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 f903 	bl	8002a06 <TIM_ITRx_SetConfig>
      break;
 8002800:	e01b      	b.n	800283a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6818      	ldr	r0, [r3, #0]
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	6859      	ldr	r1, [r3, #4]
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	461a      	mov	r2, r3
 8002810:	f000 f89c 	bl	800294c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2140      	movs	r1, #64	; 0x40
 800281a:	4618      	mov	r0, r3
 800281c:	f000 f8f3 	bl	8002a06 <TIM_ITRx_SetConfig>
      break;
 8002820:	e00b      	b.n	800283a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4619      	mov	r1, r3
 800282c:	4610      	mov	r0, r2
 800282e:	f000 f8ea 	bl	8002a06 <TIM_ITRx_SetConfig>
        break;
 8002832:	e002      	b.n	800283a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002834:	bf00      	nop
 8002836:	e000      	b.n	800283a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002838:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2201      	movs	r2, #1
 800283e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3710      	adds	r7, #16
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	bc80      	pop	{r7}
 8002864:	4770      	bx	lr

08002866 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002866:	b480      	push	{r7}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800286e:	bf00      	nop
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	bc80      	pop	{r7}
 8002876:	4770      	bx	lr

08002878 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	bc80      	pop	{r7}
 8002888:	4770      	bx	lr

0800288a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800288a:	b480      	push	{r7}
 800288c:	b083      	sub	sp, #12
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002892:	bf00      	nop
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr

0800289c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4a25      	ldr	r2, [pc, #148]	; (8002944 <TIM_Base_SetConfig+0xa8>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d007      	beq.n	80028c4 <TIM_Base_SetConfig+0x28>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ba:	d003      	beq.n	80028c4 <TIM_Base_SetConfig+0x28>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a22      	ldr	r2, [pc, #136]	; (8002948 <TIM_Base_SetConfig+0xac>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d108      	bne.n	80028d6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	68fa      	ldr	r2, [r7, #12]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a1a      	ldr	r2, [pc, #104]	; (8002944 <TIM_Base_SetConfig+0xa8>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d007      	beq.n	80028ee <TIM_Base_SetConfig+0x52>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028e4:	d003      	beq.n	80028ee <TIM_Base_SetConfig+0x52>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a17      	ldr	r2, [pc, #92]	; (8002948 <TIM_Base_SetConfig+0xac>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d108      	bne.n	8002900 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	4313      	orrs	r3, r2
 800290c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	689a      	ldr	r2, [r3, #8]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a07      	ldr	r2, [pc, #28]	; (8002944 <TIM_Base_SetConfig+0xa8>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d103      	bne.n	8002934 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	691a      	ldr	r2, [r3, #16]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	615a      	str	r2, [r3, #20]
}
 800293a:	bf00      	nop
 800293c:	3714      	adds	r7, #20
 800293e:	46bd      	mov	sp, r7
 8002940:	bc80      	pop	{r7}
 8002942:	4770      	bx	lr
 8002944:	40012c00 	.word	0x40012c00
 8002948:	40000400 	.word	0x40000400

0800294c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800294c:	b480      	push	{r7}
 800294e:	b087      	sub	sp, #28
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6a1b      	ldr	r3, [r3, #32]
 8002962:	f023 0201 	bic.w	r2, r3, #1
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002976:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	011b      	lsls	r3, r3, #4
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	4313      	orrs	r3, r2
 8002980:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	f023 030a 	bic.w	r3, r3, #10
 8002988:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	4313      	orrs	r3, r2
 8002990:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	621a      	str	r2, [r3, #32]
}
 800299e:	bf00      	nop
 80029a0:	371c      	adds	r7, #28
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bc80      	pop	{r7}
 80029a6:	4770      	bx	lr

080029a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b087      	sub	sp, #28
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	f023 0210 	bic.w	r2, r3, #16
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029d2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	031b      	lsls	r3, r3, #12
 80029d8:	697a      	ldr	r2, [r7, #20]
 80029da:	4313      	orrs	r3, r2
 80029dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80029e4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	011b      	lsls	r3, r3, #4
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	621a      	str	r2, [r3, #32]
}
 80029fc:	bf00      	nop
 80029fe:	371c      	adds	r7, #28
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bc80      	pop	{r7}
 8002a04:	4770      	bx	lr

08002a06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a06:	b480      	push	{r7}
 8002a08:	b085      	sub	sp, #20
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
 8002a0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a1e:	683a      	ldr	r2, [r7, #0]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	f043 0307 	orr.w	r3, r3, #7
 8002a28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	609a      	str	r2, [r3, #8]
}
 8002a30:	bf00      	nop
 8002a32:	3714      	adds	r7, #20
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bc80      	pop	{r7}
 8002a38:	4770      	bx	lr

08002a3a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b087      	sub	sp, #28
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	60f8      	str	r0, [r7, #12]
 8002a42:	60b9      	str	r1, [r7, #8]
 8002a44:	607a      	str	r2, [r7, #4]
 8002a46:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a54:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	021a      	lsls	r2, r3, #8
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	431a      	orrs	r2, r3
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	697a      	ldr	r2, [r7, #20]
 8002a6c:	609a      	str	r2, [r3, #8]
}
 8002a6e:	bf00      	nop
 8002a70:	371c      	adds	r7, #28
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc80      	pop	{r7}
 8002a76:	4770      	bx	lr

08002a78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d101      	bne.n	8002a90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	e041      	b.n	8002b14 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ab6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a14      	ldr	r2, [pc, #80]	; (8002b20 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d009      	beq.n	8002ae8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002adc:	d004      	beq.n	8002ae8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a10      	ldr	r2, [pc, #64]	; (8002b24 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d10c      	bne.n	8002b02 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002aee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	68ba      	ldr	r2, [r7, #8]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68ba      	ldr	r2, [r7, #8]
 8002b00:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3714      	adds	r7, #20
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bc80      	pop	{r7}
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	40012c00 	.word	0x40012c00
 8002b24:	40000400 	.word	0x40000400

08002b28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bc80      	pop	{r7}
 8002b38:	4770      	bx	lr

08002b3a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b083      	sub	sp, #12
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b42:	bf00      	nop
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bc80      	pop	{r7}
 8002b4a:	4770      	bx	lr

08002b4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e03f      	b.n	8002bde <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d106      	bne.n	8002b78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f7fd fd86 	bl	8000684 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2224      	movs	r2, #36	; 0x24
 8002b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68da      	ldr	r2, [r3, #12]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f000 fc85 	bl	80034a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	691a      	ldr	r2, [r3, #16]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ba4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	695a      	ldr	r2, [r3, #20]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68da      	ldr	r2, [r3, #12]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2220      	movs	r2, #32
 8002bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b08a      	sub	sp, #40	; 0x28
 8002bea:	af02      	add	r7, sp, #8
 8002bec:	60f8      	str	r0, [r7, #12]
 8002bee:	60b9      	str	r1, [r7, #8]
 8002bf0:	603b      	str	r3, [r7, #0]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b20      	cmp	r3, #32
 8002c04:	d17c      	bne.n	8002d00 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d002      	beq.n	8002c12 <HAL_UART_Transmit+0x2c>
 8002c0c:	88fb      	ldrh	r3, [r7, #6]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e075      	b.n	8002d02 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d101      	bne.n	8002c24 <HAL_UART_Transmit+0x3e>
 8002c20:	2302      	movs	r3, #2
 8002c22:	e06e      	b.n	8002d02 <HAL_UART_Transmit+0x11c>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2221      	movs	r2, #33	; 0x21
 8002c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c3a:	f7fe f853 	bl	8000ce4 <HAL_GetTick>
 8002c3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	88fa      	ldrh	r2, [r7, #6]
 8002c44:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	88fa      	ldrh	r2, [r7, #6]
 8002c4a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c54:	d108      	bne.n	8002c68 <HAL_UART_Transmit+0x82>
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d104      	bne.n	8002c68 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	61bb      	str	r3, [r7, #24]
 8002c66:	e003      	b.n	8002c70 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002c78:	e02a      	b.n	8002cd0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	9300      	str	r3, [sp, #0]
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	2200      	movs	r2, #0
 8002c82:	2180      	movs	r1, #128	; 0x80
 8002c84:	68f8      	ldr	r0, [r7, #12]
 8002c86:	f000 fa38 	bl	80030fa <UART_WaitOnFlagUntilTimeout>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e036      	b.n	8002d02 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d10b      	bne.n	8002cb2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	881b      	ldrh	r3, [r3, #0]
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ca8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	3302      	adds	r3, #2
 8002cae:	61bb      	str	r3, [r7, #24]
 8002cb0:	e007      	b.n	8002cc2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	781a      	ldrb	r2, [r3, #0]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1cf      	bne.n	8002c7a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	9300      	str	r3, [sp, #0]
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	2140      	movs	r1, #64	; 0x40
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f000 fa08 	bl	80030fa <UART_WaitOnFlagUntilTimeout>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e006      	b.n	8002d02 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	e000      	b.n	8002d02 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002d00:	2302      	movs	r3, #2
  }
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3720      	adds	r7, #32
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b084      	sub	sp, #16
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	60f8      	str	r0, [r7, #12]
 8002d12:	60b9      	str	r1, [r7, #8]
 8002d14:	4613      	mov	r3, r2
 8002d16:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	2b20      	cmp	r3, #32
 8002d22:	d11d      	bne.n	8002d60 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d002      	beq.n	8002d30 <HAL_UART_Receive_IT+0x26>
 8002d2a:	88fb      	ldrh	r3, [r7, #6]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d101      	bne.n	8002d34 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e016      	b.n	8002d62 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d101      	bne.n	8002d42 <HAL_UART_Receive_IT+0x38>
 8002d3e:	2302      	movs	r3, #2
 8002d40:	e00f      	b.n	8002d62 <HAL_UART_Receive_IT+0x58>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002d50:	88fb      	ldrh	r3, [r7, #6]
 8002d52:	461a      	mov	r2, r3
 8002d54:	68b9      	ldr	r1, [r7, #8]
 8002d56:	68f8      	ldr	r0, [r7, #12]
 8002d58:	f000 fa19 	bl	800318e <UART_Start_Receive_IT>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	e000      	b.n	8002d62 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002d60:	2302      	movs	r3, #2
  }
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3710      	adds	r7, #16
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
	...

08002d6c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b08a      	sub	sp, #40	; 0x28
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002d90:	2300      	movs	r3, #0
 8002d92:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d96:	f003 030f 	and.w	r3, r3, #15
 8002d9a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d10d      	bne.n	8002dbe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da4:	f003 0320 	and.w	r3, r3, #32
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d008      	beq.n	8002dbe <HAL_UART_IRQHandler+0x52>
 8002dac:	6a3b      	ldr	r3, [r7, #32]
 8002dae:	f003 0320 	and.w	r3, r3, #32
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d003      	beq.n	8002dbe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 fac9 	bl	800334e <UART_Receive_IT>
      return;
 8002dbc:	e17b      	b.n	80030b6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f000 80b1 	beq.w	8002f28 <HAL_UART_IRQHandler+0x1bc>
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	f003 0301 	and.w	r3, r3, #1
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d105      	bne.n	8002ddc <HAL_UART_IRQHandler+0x70>
 8002dd0:	6a3b      	ldr	r3, [r7, #32]
 8002dd2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	f000 80a6 	beq.w	8002f28 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00a      	beq.n	8002dfc <HAL_UART_IRQHandler+0x90>
 8002de6:	6a3b      	ldr	r3, [r7, #32]
 8002de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d005      	beq.n	8002dfc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df4:	f043 0201 	orr.w	r2, r3, #1
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfe:	f003 0304 	and.w	r3, r3, #4
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00a      	beq.n	8002e1c <HAL_UART_IRQHandler+0xb0>
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d005      	beq.n	8002e1c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e14:	f043 0202 	orr.w	r2, r3, #2
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00a      	beq.n	8002e3c <HAL_UART_IRQHandler+0xd0>
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d005      	beq.n	8002e3c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e34:	f043 0204 	orr.w	r2, r3, #4
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3e:	f003 0308 	and.w	r3, r3, #8
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00f      	beq.n	8002e66 <HAL_UART_IRQHandler+0xfa>
 8002e46:	6a3b      	ldr	r3, [r7, #32]
 8002e48:	f003 0320 	and.w	r3, r3, #32
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d104      	bne.n	8002e5a <HAL_UART_IRQHandler+0xee>
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d005      	beq.n	8002e66 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	f043 0208 	orr.w	r2, r3, #8
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f000 811e 	beq.w	80030ac <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e72:	f003 0320 	and.w	r3, r3, #32
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d007      	beq.n	8002e8a <HAL_UART_IRQHandler+0x11e>
 8002e7a:	6a3b      	ldr	r3, [r7, #32]
 8002e7c:	f003 0320 	and.w	r3, r3, #32
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d002      	beq.n	8002e8a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f000 fa62 	bl	800334e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	695b      	ldr	r3, [r3, #20]
 8002e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	bf14      	ite	ne
 8002e98:	2301      	movne	r3, #1
 8002e9a:	2300      	moveq	r3, #0
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea4:	f003 0308 	and.w	r3, r3, #8
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d102      	bne.n	8002eb2 <HAL_UART_IRQHandler+0x146>
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d031      	beq.n	8002f16 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 f9a4 	bl	8003200 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d023      	beq.n	8002f0e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	695a      	ldr	r2, [r3, #20]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ed4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d013      	beq.n	8002f06 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee2:	4a76      	ldr	r2, [pc, #472]	; (80030bc <HAL_UART_IRQHandler+0x350>)
 8002ee4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7fe fb72 	bl	80015d4 <HAL_DMA_Abort_IT>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d016      	beq.n	8002f24 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f00:	4610      	mov	r0, r2
 8002f02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f04:	e00e      	b.n	8002f24 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 f8e3 	bl	80030d2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f0c:	e00a      	b.n	8002f24 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 f8df 	bl	80030d2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f14:	e006      	b.n	8002f24 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 f8db 	bl	80030d2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002f22:	e0c3      	b.n	80030ac <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f24:	bf00      	nop
    return;
 8002f26:	e0c1      	b.n	80030ac <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	f040 80a1 	bne.w	8003074 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f34:	f003 0310 	and.w	r3, r3, #16
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f000 809b 	beq.w	8003074 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002f3e:	6a3b      	ldr	r3, [r7, #32]
 8002f40:	f003 0310 	and.w	r3, r3, #16
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	f000 8095 	beq.w	8003074 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	60fb      	str	r3, [r7, #12]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	60fb      	str	r3, [r7, #12]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	60fb      	str	r3, [r7, #12]
 8002f5e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d04e      	beq.n	800300c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002f78:	8a3b      	ldrh	r3, [r7, #16]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f000 8098 	beq.w	80030b0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f84:	8a3a      	ldrh	r2, [r7, #16]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	f080 8092 	bcs.w	80030b0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	8a3a      	ldrh	r2, [r7, #16]
 8002f90:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	2b20      	cmp	r3, #32
 8002f9a:	d02b      	beq.n	8002ff4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68da      	ldr	r2, [r3, #12]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002faa:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	695a      	ldr	r2, [r3, #20]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f022 0201 	bic.w	r2, r2, #1
 8002fba:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	695a      	ldr	r2, [r3, #20]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fca:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2220      	movs	r2, #32
 8002fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68da      	ldr	r2, [r3, #12]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f022 0210 	bic.w	r2, r2, #16
 8002fe8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7fe fab5 	bl	800155e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	b29b      	uxth	r3, r3
 8003002:	4619      	mov	r1, r3
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f000 f86d 	bl	80030e4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800300a:	e051      	b.n	80030b0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003014:	b29b      	uxth	r3, r3
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800301e:	b29b      	uxth	r3, r3
 8003020:	2b00      	cmp	r3, #0
 8003022:	d047      	beq.n	80030b4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003024:	8a7b      	ldrh	r3, [r7, #18]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d044      	beq.n	80030b4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68da      	ldr	r2, [r3, #12]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003038:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	695a      	ldr	r2, [r3, #20]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 0201 	bic.w	r2, r2, #1
 8003048:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2220      	movs	r2, #32
 800304e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68da      	ldr	r2, [r3, #12]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f022 0210 	bic.w	r2, r2, #16
 8003066:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003068:	8a7b      	ldrh	r3, [r7, #18]
 800306a:	4619      	mov	r1, r3
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 f839 	bl	80030e4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003072:	e01f      	b.n	80030b4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800307a:	2b00      	cmp	r3, #0
 800307c:	d008      	beq.n	8003090 <HAL_UART_IRQHandler+0x324>
 800307e:	6a3b      	ldr	r3, [r7, #32]
 8003080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003084:	2b00      	cmp	r3, #0
 8003086:	d003      	beq.n	8003090 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 f8f9 	bl	8003280 <UART_Transmit_IT>
    return;
 800308e:	e012      	b.n	80030b6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00d      	beq.n	80030b6 <HAL_UART_IRQHandler+0x34a>
 800309a:	6a3b      	ldr	r3, [r7, #32]
 800309c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d008      	beq.n	80030b6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 f93a 	bl	800331e <UART_EndTransmit_IT>
    return;
 80030aa:	e004      	b.n	80030b6 <HAL_UART_IRQHandler+0x34a>
    return;
 80030ac:	bf00      	nop
 80030ae:	e002      	b.n	80030b6 <HAL_UART_IRQHandler+0x34a>
      return;
 80030b0:	bf00      	nop
 80030b2:	e000      	b.n	80030b6 <HAL_UART_IRQHandler+0x34a>
      return;
 80030b4:	bf00      	nop
  }
}
 80030b6:	3728      	adds	r7, #40	; 0x28
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	08003259 	.word	0x08003259

080030c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bc80      	pop	{r7}
 80030d0:	4770      	bx	lr

080030d2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80030d2:	b480      	push	{r7}
 80030d4:	b083      	sub	sp, #12
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80030da:	bf00      	nop
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	bc80      	pop	{r7}
 80030e2:	4770      	bx	lr

080030e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	460b      	mov	r3, r1
 80030ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80030f0:	bf00      	nop
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bc80      	pop	{r7}
 80030f8:	4770      	bx	lr

080030fa <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b084      	sub	sp, #16
 80030fe:	af00      	add	r7, sp, #0
 8003100:	60f8      	str	r0, [r7, #12]
 8003102:	60b9      	str	r1, [r7, #8]
 8003104:	603b      	str	r3, [r7, #0]
 8003106:	4613      	mov	r3, r2
 8003108:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800310a:	e02c      	b.n	8003166 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003112:	d028      	beq.n	8003166 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d007      	beq.n	800312a <UART_WaitOnFlagUntilTimeout+0x30>
 800311a:	f7fd fde3 	bl	8000ce4 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	429a      	cmp	r2, r3
 8003128:	d21d      	bcs.n	8003166 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68da      	ldr	r2, [r3, #12]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003138:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	695a      	ldr	r2, [r3, #20]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f022 0201 	bic.w	r2, r2, #1
 8003148:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2220      	movs	r2, #32
 800314e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2220      	movs	r2, #32
 8003156:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e00f      	b.n	8003186 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	4013      	ands	r3, r2
 8003170:	68ba      	ldr	r2, [r7, #8]
 8003172:	429a      	cmp	r2, r3
 8003174:	bf0c      	ite	eq
 8003176:	2301      	moveq	r3, #1
 8003178:	2300      	movne	r3, #0
 800317a:	b2db      	uxtb	r3, r3
 800317c:	461a      	mov	r2, r3
 800317e:	79fb      	ldrb	r3, [r7, #7]
 8003180:	429a      	cmp	r2, r3
 8003182:	d0c3      	beq.n	800310c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800318e:	b480      	push	{r7}
 8003190:	b085      	sub	sp, #20
 8003192:	af00      	add	r7, sp, #0
 8003194:	60f8      	str	r0, [r7, #12]
 8003196:	60b9      	str	r1, [r7, #8]
 8003198:	4613      	mov	r3, r2
 800319a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	68ba      	ldr	r2, [r7, #8]
 80031a0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	88fa      	ldrh	r2, [r7, #6]
 80031a6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	88fa      	ldrh	r2, [r7, #6]
 80031ac:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2222      	movs	r2, #34	; 0x22
 80031b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68da      	ldr	r2, [r3, #12]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031d2:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	695a      	ldr	r2, [r3, #20]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f042 0201 	orr.w	r2, r2, #1
 80031e2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68da      	ldr	r2, [r3, #12]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f042 0220 	orr.w	r2, r2, #32
 80031f2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3714      	adds	r7, #20
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bc80      	pop	{r7}
 80031fe:	4770      	bx	lr

08003200 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68da      	ldr	r2, [r3, #12]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003216:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	695a      	ldr	r2, [r3, #20]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f022 0201 	bic.w	r2, r2, #1
 8003226:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322c:	2b01      	cmp	r3, #1
 800322e:	d107      	bne.n	8003240 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68da      	ldr	r2, [r3, #12]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f022 0210 	bic.w	r2, r2, #16
 800323e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2220      	movs	r2, #32
 8003244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800324e:	bf00      	nop
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	bc80      	pop	{r7}
 8003256:	4770      	bx	lr

08003258 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003264:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f7ff ff2d 	bl	80030d2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003278:	bf00      	nop
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800328e:	b2db      	uxtb	r3, r3
 8003290:	2b21      	cmp	r3, #33	; 0x21
 8003292:	d13e      	bne.n	8003312 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800329c:	d114      	bne.n	80032c8 <UART_Transmit_IT+0x48>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d110      	bne.n	80032c8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a1b      	ldr	r3, [r3, #32]
 80032aa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	881b      	ldrh	r3, [r3, #0]
 80032b0:	461a      	mov	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032ba:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a1b      	ldr	r3, [r3, #32]
 80032c0:	1c9a      	adds	r2, r3, #2
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	621a      	str	r2, [r3, #32]
 80032c6:	e008      	b.n	80032da <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a1b      	ldr	r3, [r3, #32]
 80032cc:	1c59      	adds	r1, r3, #1
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	6211      	str	r1, [r2, #32]
 80032d2:	781a      	ldrb	r2, [r3, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032de:	b29b      	uxth	r3, r3
 80032e0:	3b01      	subs	r3, #1
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	4619      	mov	r1, r3
 80032e8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d10f      	bne.n	800330e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68da      	ldr	r2, [r3, #12]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032fc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68da      	ldr	r2, [r3, #12]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800330c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800330e:	2300      	movs	r3, #0
 8003310:	e000      	b.n	8003314 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003312:	2302      	movs	r3, #2
  }
}
 8003314:	4618      	mov	r0, r3
 8003316:	3714      	adds	r7, #20
 8003318:	46bd      	mov	sp, r7
 800331a:	bc80      	pop	{r7}
 800331c:	4770      	bx	lr

0800331e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b082      	sub	sp, #8
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68da      	ldr	r2, [r3, #12]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003334:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2220      	movs	r2, #32
 800333a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f7ff febe 	bl	80030c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3708      	adds	r7, #8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800334e:	b580      	push	{r7, lr}
 8003350:	b086      	sub	sp, #24
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b22      	cmp	r3, #34	; 0x22
 8003360:	f040 8099 	bne.w	8003496 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800336c:	d117      	bne.n	800339e <UART_Receive_IT+0x50>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d113      	bne.n	800339e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003376:	2300      	movs	r3, #0
 8003378:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	b29b      	uxth	r3, r3
 8003388:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800338c:	b29a      	uxth	r2, r3
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003396:	1c9a      	adds	r2, r3, #2
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	629a      	str	r2, [r3, #40]	; 0x28
 800339c:	e026      	b.n	80033ec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80033a4:	2300      	movs	r3, #0
 80033a6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033b0:	d007      	beq.n	80033c2 <UART_Receive_IT+0x74>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10a      	bne.n	80033d0 <UART_Receive_IT+0x82>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d106      	bne.n	80033d0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	b2da      	uxtb	r2, r3
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	701a      	strb	r2, [r3, #0]
 80033ce:	e008      	b.n	80033e2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033dc:	b2da      	uxtb	r2, r3
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e6:	1c5a      	adds	r2, r3, #1
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	3b01      	subs	r3, #1
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	4619      	mov	r1, r3
 80033fa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d148      	bne.n	8003492 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68da      	ldr	r2, [r3, #12]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f022 0220 	bic.w	r2, r2, #32
 800340e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68da      	ldr	r2, [r3, #12]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800341e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	695a      	ldr	r2, [r3, #20]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f022 0201 	bic.w	r2, r2, #1
 800342e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2220      	movs	r2, #32
 8003434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343c:	2b01      	cmp	r3, #1
 800343e:	d123      	bne.n	8003488 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68da      	ldr	r2, [r3, #12]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f022 0210 	bic.w	r2, r2, #16
 8003454:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0310 	and.w	r3, r3, #16
 8003460:	2b10      	cmp	r3, #16
 8003462:	d10a      	bne.n	800347a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003464:	2300      	movs	r3, #0
 8003466:	60fb      	str	r3, [r7, #12]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	60fb      	str	r3, [r7, #12]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	60fb      	str	r3, [r7, #12]
 8003478:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800347e:	4619      	mov	r1, r3
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f7ff fe2f 	bl	80030e4 <HAL_UARTEx_RxEventCallback>
 8003486:	e002      	b.n	800348e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f7fc feb3 	bl	80001f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800348e:	2300      	movs	r3, #0
 8003490:	e002      	b.n	8003498 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003492:	2300      	movs	r3, #0
 8003494:	e000      	b.n	8003498 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003496:	2302      	movs	r3, #2
  }
}
 8003498:	4618      	mov	r0, r3
 800349a:	3718      	adds	r7, #24
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	68da      	ldr	r2, [r3, #12]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	430a      	orrs	r2, r1
 80034bc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	689a      	ldr	r2, [r3, #8]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	431a      	orrs	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	695b      	ldr	r3, [r3, #20]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80034da:	f023 030c 	bic.w	r3, r3, #12
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	6812      	ldr	r2, [r2, #0]
 80034e2:	68b9      	ldr	r1, [r7, #8]
 80034e4:	430b      	orrs	r3, r1
 80034e6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	699a      	ldr	r2, [r3, #24]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	430a      	orrs	r2, r1
 80034fc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a2c      	ldr	r2, [pc, #176]	; (80035b4 <UART_SetConfig+0x114>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d103      	bne.n	8003510 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003508:	f7fe fe54 	bl	80021b4 <HAL_RCC_GetPCLK2Freq>
 800350c:	60f8      	str	r0, [r7, #12]
 800350e:	e002      	b.n	8003516 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003510:	f7fe fe3c 	bl	800218c <HAL_RCC_GetPCLK1Freq>
 8003514:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	4613      	mov	r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	4413      	add	r3, r2
 800351e:	009a      	lsls	r2, r3, #2
 8003520:	441a      	add	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	fbb2 f3f3 	udiv	r3, r2, r3
 800352c:	4a22      	ldr	r2, [pc, #136]	; (80035b8 <UART_SetConfig+0x118>)
 800352e:	fba2 2303 	umull	r2, r3, r2, r3
 8003532:	095b      	lsrs	r3, r3, #5
 8003534:	0119      	lsls	r1, r3, #4
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	4613      	mov	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4413      	add	r3, r2
 800353e:	009a      	lsls	r2, r3, #2
 8003540:	441a      	add	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	fbb2 f2f3 	udiv	r2, r2, r3
 800354c:	4b1a      	ldr	r3, [pc, #104]	; (80035b8 <UART_SetConfig+0x118>)
 800354e:	fba3 0302 	umull	r0, r3, r3, r2
 8003552:	095b      	lsrs	r3, r3, #5
 8003554:	2064      	movs	r0, #100	; 0x64
 8003556:	fb00 f303 	mul.w	r3, r0, r3
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	011b      	lsls	r3, r3, #4
 800355e:	3332      	adds	r3, #50	; 0x32
 8003560:	4a15      	ldr	r2, [pc, #84]	; (80035b8 <UART_SetConfig+0x118>)
 8003562:	fba2 2303 	umull	r2, r3, r2, r3
 8003566:	095b      	lsrs	r3, r3, #5
 8003568:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800356c:	4419      	add	r1, r3
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	4613      	mov	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	4413      	add	r3, r2
 8003576:	009a      	lsls	r2, r3, #2
 8003578:	441a      	add	r2, r3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	fbb2 f2f3 	udiv	r2, r2, r3
 8003584:	4b0c      	ldr	r3, [pc, #48]	; (80035b8 <UART_SetConfig+0x118>)
 8003586:	fba3 0302 	umull	r0, r3, r3, r2
 800358a:	095b      	lsrs	r3, r3, #5
 800358c:	2064      	movs	r0, #100	; 0x64
 800358e:	fb00 f303 	mul.w	r3, r0, r3
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	011b      	lsls	r3, r3, #4
 8003596:	3332      	adds	r3, #50	; 0x32
 8003598:	4a07      	ldr	r2, [pc, #28]	; (80035b8 <UART_SetConfig+0x118>)
 800359a:	fba2 2303 	umull	r2, r3, r2, r3
 800359e:	095b      	lsrs	r3, r3, #5
 80035a0:	f003 020f 	and.w	r2, r3, #15
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	440a      	add	r2, r1
 80035aa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80035ac:	bf00      	nop
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	40013800 	.word	0x40013800
 80035b8:	51eb851f 	.word	0x51eb851f

080035bc <__errno>:
 80035bc:	4b01      	ldr	r3, [pc, #4]	; (80035c4 <__errno+0x8>)
 80035be:	6818      	ldr	r0, [r3, #0]
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	20000020 	.word	0x20000020

080035c8 <__libc_init_array>:
 80035c8:	b570      	push	{r4, r5, r6, lr}
 80035ca:	2600      	movs	r6, #0
 80035cc:	4d0c      	ldr	r5, [pc, #48]	; (8003600 <__libc_init_array+0x38>)
 80035ce:	4c0d      	ldr	r4, [pc, #52]	; (8003604 <__libc_init_array+0x3c>)
 80035d0:	1b64      	subs	r4, r4, r5
 80035d2:	10a4      	asrs	r4, r4, #2
 80035d4:	42a6      	cmp	r6, r4
 80035d6:	d109      	bne.n	80035ec <__libc_init_array+0x24>
 80035d8:	f001 f97e 	bl	80048d8 <_init>
 80035dc:	2600      	movs	r6, #0
 80035de:	4d0a      	ldr	r5, [pc, #40]	; (8003608 <__libc_init_array+0x40>)
 80035e0:	4c0a      	ldr	r4, [pc, #40]	; (800360c <__libc_init_array+0x44>)
 80035e2:	1b64      	subs	r4, r4, r5
 80035e4:	10a4      	asrs	r4, r4, #2
 80035e6:	42a6      	cmp	r6, r4
 80035e8:	d105      	bne.n	80035f6 <__libc_init_array+0x2e>
 80035ea:	bd70      	pop	{r4, r5, r6, pc}
 80035ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80035f0:	4798      	blx	r3
 80035f2:	3601      	adds	r6, #1
 80035f4:	e7ee      	b.n	80035d4 <__libc_init_array+0xc>
 80035f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80035fa:	4798      	blx	r3
 80035fc:	3601      	adds	r6, #1
 80035fe:	e7f2      	b.n	80035e6 <__libc_init_array+0x1e>
 8003600:	080049d8 	.word	0x080049d8
 8003604:	080049d8 	.word	0x080049d8
 8003608:	080049d8 	.word	0x080049d8
 800360c:	080049dc 	.word	0x080049dc

08003610 <memset>:
 8003610:	4603      	mov	r3, r0
 8003612:	4402      	add	r2, r0
 8003614:	4293      	cmp	r3, r2
 8003616:	d100      	bne.n	800361a <memset+0xa>
 8003618:	4770      	bx	lr
 800361a:	f803 1b01 	strb.w	r1, [r3], #1
 800361e:	e7f9      	b.n	8003614 <memset+0x4>

08003620 <iprintf>:
 8003620:	b40f      	push	{r0, r1, r2, r3}
 8003622:	4b0a      	ldr	r3, [pc, #40]	; (800364c <iprintf+0x2c>)
 8003624:	b513      	push	{r0, r1, r4, lr}
 8003626:	681c      	ldr	r4, [r3, #0]
 8003628:	b124      	cbz	r4, 8003634 <iprintf+0x14>
 800362a:	69a3      	ldr	r3, [r4, #24]
 800362c:	b913      	cbnz	r3, 8003634 <iprintf+0x14>
 800362e:	4620      	mov	r0, r4
 8003630:	f000 f8b0 	bl	8003794 <__sinit>
 8003634:	ab05      	add	r3, sp, #20
 8003636:	4620      	mov	r0, r4
 8003638:	9a04      	ldr	r2, [sp, #16]
 800363a:	68a1      	ldr	r1, [r4, #8]
 800363c:	9301      	str	r3, [sp, #4]
 800363e:	f000 fb27 	bl	8003c90 <_vfiprintf_r>
 8003642:	b002      	add	sp, #8
 8003644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003648:	b004      	add	sp, #16
 800364a:	4770      	bx	lr
 800364c:	20000020 	.word	0x20000020

08003650 <siprintf>:
 8003650:	b40e      	push	{r1, r2, r3}
 8003652:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003656:	b500      	push	{lr}
 8003658:	b09c      	sub	sp, #112	; 0x70
 800365a:	ab1d      	add	r3, sp, #116	; 0x74
 800365c:	9002      	str	r0, [sp, #8]
 800365e:	9006      	str	r0, [sp, #24]
 8003660:	9107      	str	r1, [sp, #28]
 8003662:	9104      	str	r1, [sp, #16]
 8003664:	4808      	ldr	r0, [pc, #32]	; (8003688 <siprintf+0x38>)
 8003666:	4909      	ldr	r1, [pc, #36]	; (800368c <siprintf+0x3c>)
 8003668:	f853 2b04 	ldr.w	r2, [r3], #4
 800366c:	9105      	str	r1, [sp, #20]
 800366e:	6800      	ldr	r0, [r0, #0]
 8003670:	a902      	add	r1, sp, #8
 8003672:	9301      	str	r3, [sp, #4]
 8003674:	f000 f9e4 	bl	8003a40 <_svfiprintf_r>
 8003678:	2200      	movs	r2, #0
 800367a:	9b02      	ldr	r3, [sp, #8]
 800367c:	701a      	strb	r2, [r3, #0]
 800367e:	b01c      	add	sp, #112	; 0x70
 8003680:	f85d eb04 	ldr.w	lr, [sp], #4
 8003684:	b003      	add	sp, #12
 8003686:	4770      	bx	lr
 8003688:	20000020 	.word	0x20000020
 800368c:	ffff0208 	.word	0xffff0208

08003690 <strncpy>:
 8003690:	4603      	mov	r3, r0
 8003692:	b510      	push	{r4, lr}
 8003694:	3901      	subs	r1, #1
 8003696:	b132      	cbz	r2, 80036a6 <strncpy+0x16>
 8003698:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800369c:	3a01      	subs	r2, #1
 800369e:	f803 4b01 	strb.w	r4, [r3], #1
 80036a2:	2c00      	cmp	r4, #0
 80036a4:	d1f7      	bne.n	8003696 <strncpy+0x6>
 80036a6:	2100      	movs	r1, #0
 80036a8:	441a      	add	r2, r3
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d100      	bne.n	80036b0 <strncpy+0x20>
 80036ae:	bd10      	pop	{r4, pc}
 80036b0:	f803 1b01 	strb.w	r1, [r3], #1
 80036b4:	e7f9      	b.n	80036aa <strncpy+0x1a>

080036b6 <strstr>:
 80036b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036b8:	780c      	ldrb	r4, [r1, #0]
 80036ba:	b164      	cbz	r4, 80036d6 <strstr+0x20>
 80036bc:	4603      	mov	r3, r0
 80036be:	781a      	ldrb	r2, [r3, #0]
 80036c0:	4618      	mov	r0, r3
 80036c2:	1c5e      	adds	r6, r3, #1
 80036c4:	b90a      	cbnz	r2, 80036ca <strstr+0x14>
 80036c6:	4610      	mov	r0, r2
 80036c8:	e005      	b.n	80036d6 <strstr+0x20>
 80036ca:	4294      	cmp	r4, r2
 80036cc:	d108      	bne.n	80036e0 <strstr+0x2a>
 80036ce:	460d      	mov	r5, r1
 80036d0:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80036d4:	b902      	cbnz	r2, 80036d8 <strstr+0x22>
 80036d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036d8:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80036dc:	4297      	cmp	r7, r2
 80036de:	d0f7      	beq.n	80036d0 <strstr+0x1a>
 80036e0:	4633      	mov	r3, r6
 80036e2:	e7ec      	b.n	80036be <strstr+0x8>

080036e4 <std>:
 80036e4:	2300      	movs	r3, #0
 80036e6:	b510      	push	{r4, lr}
 80036e8:	4604      	mov	r4, r0
 80036ea:	e9c0 3300 	strd	r3, r3, [r0]
 80036ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80036f2:	6083      	str	r3, [r0, #8]
 80036f4:	8181      	strh	r1, [r0, #12]
 80036f6:	6643      	str	r3, [r0, #100]	; 0x64
 80036f8:	81c2      	strh	r2, [r0, #14]
 80036fa:	6183      	str	r3, [r0, #24]
 80036fc:	4619      	mov	r1, r3
 80036fe:	2208      	movs	r2, #8
 8003700:	305c      	adds	r0, #92	; 0x5c
 8003702:	f7ff ff85 	bl	8003610 <memset>
 8003706:	4b05      	ldr	r3, [pc, #20]	; (800371c <std+0x38>)
 8003708:	6224      	str	r4, [r4, #32]
 800370a:	6263      	str	r3, [r4, #36]	; 0x24
 800370c:	4b04      	ldr	r3, [pc, #16]	; (8003720 <std+0x3c>)
 800370e:	62a3      	str	r3, [r4, #40]	; 0x28
 8003710:	4b04      	ldr	r3, [pc, #16]	; (8003724 <std+0x40>)
 8003712:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003714:	4b04      	ldr	r3, [pc, #16]	; (8003728 <std+0x44>)
 8003716:	6323      	str	r3, [r4, #48]	; 0x30
 8003718:	bd10      	pop	{r4, pc}
 800371a:	bf00      	nop
 800371c:	0800423d 	.word	0x0800423d
 8003720:	0800425f 	.word	0x0800425f
 8003724:	08004297 	.word	0x08004297
 8003728:	080042bb 	.word	0x080042bb

0800372c <_cleanup_r>:
 800372c:	4901      	ldr	r1, [pc, #4]	; (8003734 <_cleanup_r+0x8>)
 800372e:	f000 b8af 	b.w	8003890 <_fwalk_reent>
 8003732:	bf00      	nop
 8003734:	08004595 	.word	0x08004595

08003738 <__sfmoreglue>:
 8003738:	b570      	push	{r4, r5, r6, lr}
 800373a:	2568      	movs	r5, #104	; 0x68
 800373c:	1e4a      	subs	r2, r1, #1
 800373e:	4355      	muls	r5, r2
 8003740:	460e      	mov	r6, r1
 8003742:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003746:	f000 f8c5 	bl	80038d4 <_malloc_r>
 800374a:	4604      	mov	r4, r0
 800374c:	b140      	cbz	r0, 8003760 <__sfmoreglue+0x28>
 800374e:	2100      	movs	r1, #0
 8003750:	e9c0 1600 	strd	r1, r6, [r0]
 8003754:	300c      	adds	r0, #12
 8003756:	60a0      	str	r0, [r4, #8]
 8003758:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800375c:	f7ff ff58 	bl	8003610 <memset>
 8003760:	4620      	mov	r0, r4
 8003762:	bd70      	pop	{r4, r5, r6, pc}

08003764 <__sfp_lock_acquire>:
 8003764:	4801      	ldr	r0, [pc, #4]	; (800376c <__sfp_lock_acquire+0x8>)
 8003766:	f000 b8b3 	b.w	80038d0 <__retarget_lock_acquire_recursive>
 800376a:	bf00      	nop
 800376c:	200001d0 	.word	0x200001d0

08003770 <__sfp_lock_release>:
 8003770:	4801      	ldr	r0, [pc, #4]	; (8003778 <__sfp_lock_release+0x8>)
 8003772:	f000 b8ae 	b.w	80038d2 <__retarget_lock_release_recursive>
 8003776:	bf00      	nop
 8003778:	200001d0 	.word	0x200001d0

0800377c <__sinit_lock_acquire>:
 800377c:	4801      	ldr	r0, [pc, #4]	; (8003784 <__sinit_lock_acquire+0x8>)
 800377e:	f000 b8a7 	b.w	80038d0 <__retarget_lock_acquire_recursive>
 8003782:	bf00      	nop
 8003784:	200001cb 	.word	0x200001cb

08003788 <__sinit_lock_release>:
 8003788:	4801      	ldr	r0, [pc, #4]	; (8003790 <__sinit_lock_release+0x8>)
 800378a:	f000 b8a2 	b.w	80038d2 <__retarget_lock_release_recursive>
 800378e:	bf00      	nop
 8003790:	200001cb 	.word	0x200001cb

08003794 <__sinit>:
 8003794:	b510      	push	{r4, lr}
 8003796:	4604      	mov	r4, r0
 8003798:	f7ff fff0 	bl	800377c <__sinit_lock_acquire>
 800379c:	69a3      	ldr	r3, [r4, #24]
 800379e:	b11b      	cbz	r3, 80037a8 <__sinit+0x14>
 80037a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037a4:	f7ff bff0 	b.w	8003788 <__sinit_lock_release>
 80037a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80037ac:	6523      	str	r3, [r4, #80]	; 0x50
 80037ae:	4b13      	ldr	r3, [pc, #76]	; (80037fc <__sinit+0x68>)
 80037b0:	4a13      	ldr	r2, [pc, #76]	; (8003800 <__sinit+0x6c>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80037b6:	42a3      	cmp	r3, r4
 80037b8:	bf08      	it	eq
 80037ba:	2301      	moveq	r3, #1
 80037bc:	4620      	mov	r0, r4
 80037be:	bf08      	it	eq
 80037c0:	61a3      	streq	r3, [r4, #24]
 80037c2:	f000 f81f 	bl	8003804 <__sfp>
 80037c6:	6060      	str	r0, [r4, #4]
 80037c8:	4620      	mov	r0, r4
 80037ca:	f000 f81b 	bl	8003804 <__sfp>
 80037ce:	60a0      	str	r0, [r4, #8]
 80037d0:	4620      	mov	r0, r4
 80037d2:	f000 f817 	bl	8003804 <__sfp>
 80037d6:	2200      	movs	r2, #0
 80037d8:	2104      	movs	r1, #4
 80037da:	60e0      	str	r0, [r4, #12]
 80037dc:	6860      	ldr	r0, [r4, #4]
 80037de:	f7ff ff81 	bl	80036e4 <std>
 80037e2:	2201      	movs	r2, #1
 80037e4:	2109      	movs	r1, #9
 80037e6:	68a0      	ldr	r0, [r4, #8]
 80037e8:	f7ff ff7c 	bl	80036e4 <std>
 80037ec:	2202      	movs	r2, #2
 80037ee:	2112      	movs	r1, #18
 80037f0:	68e0      	ldr	r0, [r4, #12]
 80037f2:	f7ff ff77 	bl	80036e4 <std>
 80037f6:	2301      	movs	r3, #1
 80037f8:	61a3      	str	r3, [r4, #24]
 80037fa:	e7d1      	b.n	80037a0 <__sinit+0xc>
 80037fc:	08004940 	.word	0x08004940
 8003800:	0800372d 	.word	0x0800372d

08003804 <__sfp>:
 8003804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003806:	4607      	mov	r7, r0
 8003808:	f7ff ffac 	bl	8003764 <__sfp_lock_acquire>
 800380c:	4b1e      	ldr	r3, [pc, #120]	; (8003888 <__sfp+0x84>)
 800380e:	681e      	ldr	r6, [r3, #0]
 8003810:	69b3      	ldr	r3, [r6, #24]
 8003812:	b913      	cbnz	r3, 800381a <__sfp+0x16>
 8003814:	4630      	mov	r0, r6
 8003816:	f7ff ffbd 	bl	8003794 <__sinit>
 800381a:	3648      	adds	r6, #72	; 0x48
 800381c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003820:	3b01      	subs	r3, #1
 8003822:	d503      	bpl.n	800382c <__sfp+0x28>
 8003824:	6833      	ldr	r3, [r6, #0]
 8003826:	b30b      	cbz	r3, 800386c <__sfp+0x68>
 8003828:	6836      	ldr	r6, [r6, #0]
 800382a:	e7f7      	b.n	800381c <__sfp+0x18>
 800382c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003830:	b9d5      	cbnz	r5, 8003868 <__sfp+0x64>
 8003832:	4b16      	ldr	r3, [pc, #88]	; (800388c <__sfp+0x88>)
 8003834:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003838:	60e3      	str	r3, [r4, #12]
 800383a:	6665      	str	r5, [r4, #100]	; 0x64
 800383c:	f000 f847 	bl	80038ce <__retarget_lock_init_recursive>
 8003840:	f7ff ff96 	bl	8003770 <__sfp_lock_release>
 8003844:	2208      	movs	r2, #8
 8003846:	4629      	mov	r1, r5
 8003848:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800384c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003850:	6025      	str	r5, [r4, #0]
 8003852:	61a5      	str	r5, [r4, #24]
 8003854:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003858:	f7ff feda 	bl	8003610 <memset>
 800385c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003860:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003864:	4620      	mov	r0, r4
 8003866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003868:	3468      	adds	r4, #104	; 0x68
 800386a:	e7d9      	b.n	8003820 <__sfp+0x1c>
 800386c:	2104      	movs	r1, #4
 800386e:	4638      	mov	r0, r7
 8003870:	f7ff ff62 	bl	8003738 <__sfmoreglue>
 8003874:	4604      	mov	r4, r0
 8003876:	6030      	str	r0, [r6, #0]
 8003878:	2800      	cmp	r0, #0
 800387a:	d1d5      	bne.n	8003828 <__sfp+0x24>
 800387c:	f7ff ff78 	bl	8003770 <__sfp_lock_release>
 8003880:	230c      	movs	r3, #12
 8003882:	603b      	str	r3, [r7, #0]
 8003884:	e7ee      	b.n	8003864 <__sfp+0x60>
 8003886:	bf00      	nop
 8003888:	08004940 	.word	0x08004940
 800388c:	ffff0001 	.word	0xffff0001

08003890 <_fwalk_reent>:
 8003890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003894:	4606      	mov	r6, r0
 8003896:	4688      	mov	r8, r1
 8003898:	2700      	movs	r7, #0
 800389a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800389e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80038a2:	f1b9 0901 	subs.w	r9, r9, #1
 80038a6:	d505      	bpl.n	80038b4 <_fwalk_reent+0x24>
 80038a8:	6824      	ldr	r4, [r4, #0]
 80038aa:	2c00      	cmp	r4, #0
 80038ac:	d1f7      	bne.n	800389e <_fwalk_reent+0xe>
 80038ae:	4638      	mov	r0, r7
 80038b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038b4:	89ab      	ldrh	r3, [r5, #12]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d907      	bls.n	80038ca <_fwalk_reent+0x3a>
 80038ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80038be:	3301      	adds	r3, #1
 80038c0:	d003      	beq.n	80038ca <_fwalk_reent+0x3a>
 80038c2:	4629      	mov	r1, r5
 80038c4:	4630      	mov	r0, r6
 80038c6:	47c0      	blx	r8
 80038c8:	4307      	orrs	r7, r0
 80038ca:	3568      	adds	r5, #104	; 0x68
 80038cc:	e7e9      	b.n	80038a2 <_fwalk_reent+0x12>

080038ce <__retarget_lock_init_recursive>:
 80038ce:	4770      	bx	lr

080038d0 <__retarget_lock_acquire_recursive>:
 80038d0:	4770      	bx	lr

080038d2 <__retarget_lock_release_recursive>:
 80038d2:	4770      	bx	lr

080038d4 <_malloc_r>:
 80038d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038d6:	1ccd      	adds	r5, r1, #3
 80038d8:	f025 0503 	bic.w	r5, r5, #3
 80038dc:	3508      	adds	r5, #8
 80038de:	2d0c      	cmp	r5, #12
 80038e0:	bf38      	it	cc
 80038e2:	250c      	movcc	r5, #12
 80038e4:	2d00      	cmp	r5, #0
 80038e6:	4606      	mov	r6, r0
 80038e8:	db01      	blt.n	80038ee <_malloc_r+0x1a>
 80038ea:	42a9      	cmp	r1, r5
 80038ec:	d903      	bls.n	80038f6 <_malloc_r+0x22>
 80038ee:	230c      	movs	r3, #12
 80038f0:	6033      	str	r3, [r6, #0]
 80038f2:	2000      	movs	r0, #0
 80038f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038f6:	f000 ff35 	bl	8004764 <__malloc_lock>
 80038fa:	4921      	ldr	r1, [pc, #132]	; (8003980 <_malloc_r+0xac>)
 80038fc:	680a      	ldr	r2, [r1, #0]
 80038fe:	4614      	mov	r4, r2
 8003900:	b99c      	cbnz	r4, 800392a <_malloc_r+0x56>
 8003902:	4f20      	ldr	r7, [pc, #128]	; (8003984 <_malloc_r+0xb0>)
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	b923      	cbnz	r3, 8003912 <_malloc_r+0x3e>
 8003908:	4621      	mov	r1, r4
 800390a:	4630      	mov	r0, r6
 800390c:	f000 fc86 	bl	800421c <_sbrk_r>
 8003910:	6038      	str	r0, [r7, #0]
 8003912:	4629      	mov	r1, r5
 8003914:	4630      	mov	r0, r6
 8003916:	f000 fc81 	bl	800421c <_sbrk_r>
 800391a:	1c43      	adds	r3, r0, #1
 800391c:	d123      	bne.n	8003966 <_malloc_r+0x92>
 800391e:	230c      	movs	r3, #12
 8003920:	4630      	mov	r0, r6
 8003922:	6033      	str	r3, [r6, #0]
 8003924:	f000 ff24 	bl	8004770 <__malloc_unlock>
 8003928:	e7e3      	b.n	80038f2 <_malloc_r+0x1e>
 800392a:	6823      	ldr	r3, [r4, #0]
 800392c:	1b5b      	subs	r3, r3, r5
 800392e:	d417      	bmi.n	8003960 <_malloc_r+0x8c>
 8003930:	2b0b      	cmp	r3, #11
 8003932:	d903      	bls.n	800393c <_malloc_r+0x68>
 8003934:	6023      	str	r3, [r4, #0]
 8003936:	441c      	add	r4, r3
 8003938:	6025      	str	r5, [r4, #0]
 800393a:	e004      	b.n	8003946 <_malloc_r+0x72>
 800393c:	6863      	ldr	r3, [r4, #4]
 800393e:	42a2      	cmp	r2, r4
 8003940:	bf0c      	ite	eq
 8003942:	600b      	streq	r3, [r1, #0]
 8003944:	6053      	strne	r3, [r2, #4]
 8003946:	4630      	mov	r0, r6
 8003948:	f000 ff12 	bl	8004770 <__malloc_unlock>
 800394c:	f104 000b 	add.w	r0, r4, #11
 8003950:	1d23      	adds	r3, r4, #4
 8003952:	f020 0007 	bic.w	r0, r0, #7
 8003956:	1ac2      	subs	r2, r0, r3
 8003958:	d0cc      	beq.n	80038f4 <_malloc_r+0x20>
 800395a:	1a1b      	subs	r3, r3, r0
 800395c:	50a3      	str	r3, [r4, r2]
 800395e:	e7c9      	b.n	80038f4 <_malloc_r+0x20>
 8003960:	4622      	mov	r2, r4
 8003962:	6864      	ldr	r4, [r4, #4]
 8003964:	e7cc      	b.n	8003900 <_malloc_r+0x2c>
 8003966:	1cc4      	adds	r4, r0, #3
 8003968:	f024 0403 	bic.w	r4, r4, #3
 800396c:	42a0      	cmp	r0, r4
 800396e:	d0e3      	beq.n	8003938 <_malloc_r+0x64>
 8003970:	1a21      	subs	r1, r4, r0
 8003972:	4630      	mov	r0, r6
 8003974:	f000 fc52 	bl	800421c <_sbrk_r>
 8003978:	3001      	adds	r0, #1
 800397a:	d1dd      	bne.n	8003938 <_malloc_r+0x64>
 800397c:	e7cf      	b.n	800391e <_malloc_r+0x4a>
 800397e:	bf00      	nop
 8003980:	200000bc 	.word	0x200000bc
 8003984:	200000c0 	.word	0x200000c0

08003988 <__ssputs_r>:
 8003988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800398c:	688e      	ldr	r6, [r1, #8]
 800398e:	4682      	mov	sl, r0
 8003990:	429e      	cmp	r6, r3
 8003992:	460c      	mov	r4, r1
 8003994:	4690      	mov	r8, r2
 8003996:	461f      	mov	r7, r3
 8003998:	d838      	bhi.n	8003a0c <__ssputs_r+0x84>
 800399a:	898a      	ldrh	r2, [r1, #12]
 800399c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80039a0:	d032      	beq.n	8003a08 <__ssputs_r+0x80>
 80039a2:	6825      	ldr	r5, [r4, #0]
 80039a4:	6909      	ldr	r1, [r1, #16]
 80039a6:	3301      	adds	r3, #1
 80039a8:	eba5 0901 	sub.w	r9, r5, r1
 80039ac:	6965      	ldr	r5, [r4, #20]
 80039ae:	444b      	add	r3, r9
 80039b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80039b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80039b8:	106d      	asrs	r5, r5, #1
 80039ba:	429d      	cmp	r5, r3
 80039bc:	bf38      	it	cc
 80039be:	461d      	movcc	r5, r3
 80039c0:	0553      	lsls	r3, r2, #21
 80039c2:	d531      	bpl.n	8003a28 <__ssputs_r+0xa0>
 80039c4:	4629      	mov	r1, r5
 80039c6:	f7ff ff85 	bl	80038d4 <_malloc_r>
 80039ca:	4606      	mov	r6, r0
 80039cc:	b950      	cbnz	r0, 80039e4 <__ssputs_r+0x5c>
 80039ce:	230c      	movs	r3, #12
 80039d0:	f04f 30ff 	mov.w	r0, #4294967295
 80039d4:	f8ca 3000 	str.w	r3, [sl]
 80039d8:	89a3      	ldrh	r3, [r4, #12]
 80039da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039de:	81a3      	strh	r3, [r4, #12]
 80039e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039e4:	464a      	mov	r2, r9
 80039e6:	6921      	ldr	r1, [r4, #16]
 80039e8:	f000 fe94 	bl	8004714 <memcpy>
 80039ec:	89a3      	ldrh	r3, [r4, #12]
 80039ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80039f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039f6:	81a3      	strh	r3, [r4, #12]
 80039f8:	6126      	str	r6, [r4, #16]
 80039fa:	444e      	add	r6, r9
 80039fc:	6026      	str	r6, [r4, #0]
 80039fe:	463e      	mov	r6, r7
 8003a00:	6165      	str	r5, [r4, #20]
 8003a02:	eba5 0509 	sub.w	r5, r5, r9
 8003a06:	60a5      	str	r5, [r4, #8]
 8003a08:	42be      	cmp	r6, r7
 8003a0a:	d900      	bls.n	8003a0e <__ssputs_r+0x86>
 8003a0c:	463e      	mov	r6, r7
 8003a0e:	4632      	mov	r2, r6
 8003a10:	4641      	mov	r1, r8
 8003a12:	6820      	ldr	r0, [r4, #0]
 8003a14:	f000 fe8c 	bl	8004730 <memmove>
 8003a18:	68a3      	ldr	r3, [r4, #8]
 8003a1a:	6822      	ldr	r2, [r4, #0]
 8003a1c:	1b9b      	subs	r3, r3, r6
 8003a1e:	4432      	add	r2, r6
 8003a20:	2000      	movs	r0, #0
 8003a22:	60a3      	str	r3, [r4, #8]
 8003a24:	6022      	str	r2, [r4, #0]
 8003a26:	e7db      	b.n	80039e0 <__ssputs_r+0x58>
 8003a28:	462a      	mov	r2, r5
 8003a2a:	f000 fef3 	bl	8004814 <_realloc_r>
 8003a2e:	4606      	mov	r6, r0
 8003a30:	2800      	cmp	r0, #0
 8003a32:	d1e1      	bne.n	80039f8 <__ssputs_r+0x70>
 8003a34:	4650      	mov	r0, sl
 8003a36:	6921      	ldr	r1, [r4, #16]
 8003a38:	f000 fea0 	bl	800477c <_free_r>
 8003a3c:	e7c7      	b.n	80039ce <__ssputs_r+0x46>
	...

08003a40 <_svfiprintf_r>:
 8003a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a44:	4698      	mov	r8, r3
 8003a46:	898b      	ldrh	r3, [r1, #12]
 8003a48:	4607      	mov	r7, r0
 8003a4a:	061b      	lsls	r3, r3, #24
 8003a4c:	460d      	mov	r5, r1
 8003a4e:	4614      	mov	r4, r2
 8003a50:	b09d      	sub	sp, #116	; 0x74
 8003a52:	d50e      	bpl.n	8003a72 <_svfiprintf_r+0x32>
 8003a54:	690b      	ldr	r3, [r1, #16]
 8003a56:	b963      	cbnz	r3, 8003a72 <_svfiprintf_r+0x32>
 8003a58:	2140      	movs	r1, #64	; 0x40
 8003a5a:	f7ff ff3b 	bl	80038d4 <_malloc_r>
 8003a5e:	6028      	str	r0, [r5, #0]
 8003a60:	6128      	str	r0, [r5, #16]
 8003a62:	b920      	cbnz	r0, 8003a6e <_svfiprintf_r+0x2e>
 8003a64:	230c      	movs	r3, #12
 8003a66:	603b      	str	r3, [r7, #0]
 8003a68:	f04f 30ff 	mov.w	r0, #4294967295
 8003a6c:	e0d1      	b.n	8003c12 <_svfiprintf_r+0x1d2>
 8003a6e:	2340      	movs	r3, #64	; 0x40
 8003a70:	616b      	str	r3, [r5, #20]
 8003a72:	2300      	movs	r3, #0
 8003a74:	9309      	str	r3, [sp, #36]	; 0x24
 8003a76:	2320      	movs	r3, #32
 8003a78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003a7c:	2330      	movs	r3, #48	; 0x30
 8003a7e:	f04f 0901 	mov.w	r9, #1
 8003a82:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a86:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003c2c <_svfiprintf_r+0x1ec>
 8003a8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003a8e:	4623      	mov	r3, r4
 8003a90:	469a      	mov	sl, r3
 8003a92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a96:	b10a      	cbz	r2, 8003a9c <_svfiprintf_r+0x5c>
 8003a98:	2a25      	cmp	r2, #37	; 0x25
 8003a9a:	d1f9      	bne.n	8003a90 <_svfiprintf_r+0x50>
 8003a9c:	ebba 0b04 	subs.w	fp, sl, r4
 8003aa0:	d00b      	beq.n	8003aba <_svfiprintf_r+0x7a>
 8003aa2:	465b      	mov	r3, fp
 8003aa4:	4622      	mov	r2, r4
 8003aa6:	4629      	mov	r1, r5
 8003aa8:	4638      	mov	r0, r7
 8003aaa:	f7ff ff6d 	bl	8003988 <__ssputs_r>
 8003aae:	3001      	adds	r0, #1
 8003ab0:	f000 80aa 	beq.w	8003c08 <_svfiprintf_r+0x1c8>
 8003ab4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ab6:	445a      	add	r2, fp
 8003ab8:	9209      	str	r2, [sp, #36]	; 0x24
 8003aba:	f89a 3000 	ldrb.w	r3, [sl]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	f000 80a2 	beq.w	8003c08 <_svfiprintf_r+0x1c8>
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8003aca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ace:	f10a 0a01 	add.w	sl, sl, #1
 8003ad2:	9304      	str	r3, [sp, #16]
 8003ad4:	9307      	str	r3, [sp, #28]
 8003ad6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003ada:	931a      	str	r3, [sp, #104]	; 0x68
 8003adc:	4654      	mov	r4, sl
 8003ade:	2205      	movs	r2, #5
 8003ae0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ae4:	4851      	ldr	r0, [pc, #324]	; (8003c2c <_svfiprintf_r+0x1ec>)
 8003ae6:	f000 fe07 	bl	80046f8 <memchr>
 8003aea:	9a04      	ldr	r2, [sp, #16]
 8003aec:	b9d8      	cbnz	r0, 8003b26 <_svfiprintf_r+0xe6>
 8003aee:	06d0      	lsls	r0, r2, #27
 8003af0:	bf44      	itt	mi
 8003af2:	2320      	movmi	r3, #32
 8003af4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003af8:	0711      	lsls	r1, r2, #28
 8003afa:	bf44      	itt	mi
 8003afc:	232b      	movmi	r3, #43	; 0x2b
 8003afe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b02:	f89a 3000 	ldrb.w	r3, [sl]
 8003b06:	2b2a      	cmp	r3, #42	; 0x2a
 8003b08:	d015      	beq.n	8003b36 <_svfiprintf_r+0xf6>
 8003b0a:	4654      	mov	r4, sl
 8003b0c:	2000      	movs	r0, #0
 8003b0e:	f04f 0c0a 	mov.w	ip, #10
 8003b12:	9a07      	ldr	r2, [sp, #28]
 8003b14:	4621      	mov	r1, r4
 8003b16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b1a:	3b30      	subs	r3, #48	; 0x30
 8003b1c:	2b09      	cmp	r3, #9
 8003b1e:	d94e      	bls.n	8003bbe <_svfiprintf_r+0x17e>
 8003b20:	b1b0      	cbz	r0, 8003b50 <_svfiprintf_r+0x110>
 8003b22:	9207      	str	r2, [sp, #28]
 8003b24:	e014      	b.n	8003b50 <_svfiprintf_r+0x110>
 8003b26:	eba0 0308 	sub.w	r3, r0, r8
 8003b2a:	fa09 f303 	lsl.w	r3, r9, r3
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	46a2      	mov	sl, r4
 8003b32:	9304      	str	r3, [sp, #16]
 8003b34:	e7d2      	b.n	8003adc <_svfiprintf_r+0x9c>
 8003b36:	9b03      	ldr	r3, [sp, #12]
 8003b38:	1d19      	adds	r1, r3, #4
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	9103      	str	r1, [sp, #12]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	bfbb      	ittet	lt
 8003b42:	425b      	neglt	r3, r3
 8003b44:	f042 0202 	orrlt.w	r2, r2, #2
 8003b48:	9307      	strge	r3, [sp, #28]
 8003b4a:	9307      	strlt	r3, [sp, #28]
 8003b4c:	bfb8      	it	lt
 8003b4e:	9204      	strlt	r2, [sp, #16]
 8003b50:	7823      	ldrb	r3, [r4, #0]
 8003b52:	2b2e      	cmp	r3, #46	; 0x2e
 8003b54:	d10c      	bne.n	8003b70 <_svfiprintf_r+0x130>
 8003b56:	7863      	ldrb	r3, [r4, #1]
 8003b58:	2b2a      	cmp	r3, #42	; 0x2a
 8003b5a:	d135      	bne.n	8003bc8 <_svfiprintf_r+0x188>
 8003b5c:	9b03      	ldr	r3, [sp, #12]
 8003b5e:	3402      	adds	r4, #2
 8003b60:	1d1a      	adds	r2, r3, #4
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	9203      	str	r2, [sp, #12]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	bfb8      	it	lt
 8003b6a:	f04f 33ff 	movlt.w	r3, #4294967295
 8003b6e:	9305      	str	r3, [sp, #20]
 8003b70:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003c3c <_svfiprintf_r+0x1fc>
 8003b74:	2203      	movs	r2, #3
 8003b76:	4650      	mov	r0, sl
 8003b78:	7821      	ldrb	r1, [r4, #0]
 8003b7a:	f000 fdbd 	bl	80046f8 <memchr>
 8003b7e:	b140      	cbz	r0, 8003b92 <_svfiprintf_r+0x152>
 8003b80:	2340      	movs	r3, #64	; 0x40
 8003b82:	eba0 000a 	sub.w	r0, r0, sl
 8003b86:	fa03 f000 	lsl.w	r0, r3, r0
 8003b8a:	9b04      	ldr	r3, [sp, #16]
 8003b8c:	3401      	adds	r4, #1
 8003b8e:	4303      	orrs	r3, r0
 8003b90:	9304      	str	r3, [sp, #16]
 8003b92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b96:	2206      	movs	r2, #6
 8003b98:	4825      	ldr	r0, [pc, #148]	; (8003c30 <_svfiprintf_r+0x1f0>)
 8003b9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b9e:	f000 fdab 	bl	80046f8 <memchr>
 8003ba2:	2800      	cmp	r0, #0
 8003ba4:	d038      	beq.n	8003c18 <_svfiprintf_r+0x1d8>
 8003ba6:	4b23      	ldr	r3, [pc, #140]	; (8003c34 <_svfiprintf_r+0x1f4>)
 8003ba8:	bb1b      	cbnz	r3, 8003bf2 <_svfiprintf_r+0x1b2>
 8003baa:	9b03      	ldr	r3, [sp, #12]
 8003bac:	3307      	adds	r3, #7
 8003bae:	f023 0307 	bic.w	r3, r3, #7
 8003bb2:	3308      	adds	r3, #8
 8003bb4:	9303      	str	r3, [sp, #12]
 8003bb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bb8:	4433      	add	r3, r6
 8003bba:	9309      	str	r3, [sp, #36]	; 0x24
 8003bbc:	e767      	b.n	8003a8e <_svfiprintf_r+0x4e>
 8003bbe:	460c      	mov	r4, r1
 8003bc0:	2001      	movs	r0, #1
 8003bc2:	fb0c 3202 	mla	r2, ip, r2, r3
 8003bc6:	e7a5      	b.n	8003b14 <_svfiprintf_r+0xd4>
 8003bc8:	2300      	movs	r3, #0
 8003bca:	f04f 0c0a 	mov.w	ip, #10
 8003bce:	4619      	mov	r1, r3
 8003bd0:	3401      	adds	r4, #1
 8003bd2:	9305      	str	r3, [sp, #20]
 8003bd4:	4620      	mov	r0, r4
 8003bd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003bda:	3a30      	subs	r2, #48	; 0x30
 8003bdc:	2a09      	cmp	r2, #9
 8003bde:	d903      	bls.n	8003be8 <_svfiprintf_r+0x1a8>
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d0c5      	beq.n	8003b70 <_svfiprintf_r+0x130>
 8003be4:	9105      	str	r1, [sp, #20]
 8003be6:	e7c3      	b.n	8003b70 <_svfiprintf_r+0x130>
 8003be8:	4604      	mov	r4, r0
 8003bea:	2301      	movs	r3, #1
 8003bec:	fb0c 2101 	mla	r1, ip, r1, r2
 8003bf0:	e7f0      	b.n	8003bd4 <_svfiprintf_r+0x194>
 8003bf2:	ab03      	add	r3, sp, #12
 8003bf4:	9300      	str	r3, [sp, #0]
 8003bf6:	462a      	mov	r2, r5
 8003bf8:	4638      	mov	r0, r7
 8003bfa:	4b0f      	ldr	r3, [pc, #60]	; (8003c38 <_svfiprintf_r+0x1f8>)
 8003bfc:	a904      	add	r1, sp, #16
 8003bfe:	f3af 8000 	nop.w
 8003c02:	1c42      	adds	r2, r0, #1
 8003c04:	4606      	mov	r6, r0
 8003c06:	d1d6      	bne.n	8003bb6 <_svfiprintf_r+0x176>
 8003c08:	89ab      	ldrh	r3, [r5, #12]
 8003c0a:	065b      	lsls	r3, r3, #25
 8003c0c:	f53f af2c 	bmi.w	8003a68 <_svfiprintf_r+0x28>
 8003c10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c12:	b01d      	add	sp, #116	; 0x74
 8003c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c18:	ab03      	add	r3, sp, #12
 8003c1a:	9300      	str	r3, [sp, #0]
 8003c1c:	462a      	mov	r2, r5
 8003c1e:	4638      	mov	r0, r7
 8003c20:	4b05      	ldr	r3, [pc, #20]	; (8003c38 <_svfiprintf_r+0x1f8>)
 8003c22:	a904      	add	r1, sp, #16
 8003c24:	f000 f9d4 	bl	8003fd0 <_printf_i>
 8003c28:	e7eb      	b.n	8003c02 <_svfiprintf_r+0x1c2>
 8003c2a:	bf00      	nop
 8003c2c:	080049a4 	.word	0x080049a4
 8003c30:	080049ae 	.word	0x080049ae
 8003c34:	00000000 	.word	0x00000000
 8003c38:	08003989 	.word	0x08003989
 8003c3c:	080049aa 	.word	0x080049aa

08003c40 <__sfputc_r>:
 8003c40:	6893      	ldr	r3, [r2, #8]
 8003c42:	b410      	push	{r4}
 8003c44:	3b01      	subs	r3, #1
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	6093      	str	r3, [r2, #8]
 8003c4a:	da07      	bge.n	8003c5c <__sfputc_r+0x1c>
 8003c4c:	6994      	ldr	r4, [r2, #24]
 8003c4e:	42a3      	cmp	r3, r4
 8003c50:	db01      	blt.n	8003c56 <__sfputc_r+0x16>
 8003c52:	290a      	cmp	r1, #10
 8003c54:	d102      	bne.n	8003c5c <__sfputc_r+0x1c>
 8003c56:	bc10      	pop	{r4}
 8003c58:	f000 bb34 	b.w	80042c4 <__swbuf_r>
 8003c5c:	6813      	ldr	r3, [r2, #0]
 8003c5e:	1c58      	adds	r0, r3, #1
 8003c60:	6010      	str	r0, [r2, #0]
 8003c62:	7019      	strb	r1, [r3, #0]
 8003c64:	4608      	mov	r0, r1
 8003c66:	bc10      	pop	{r4}
 8003c68:	4770      	bx	lr

08003c6a <__sfputs_r>:
 8003c6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c6c:	4606      	mov	r6, r0
 8003c6e:	460f      	mov	r7, r1
 8003c70:	4614      	mov	r4, r2
 8003c72:	18d5      	adds	r5, r2, r3
 8003c74:	42ac      	cmp	r4, r5
 8003c76:	d101      	bne.n	8003c7c <__sfputs_r+0x12>
 8003c78:	2000      	movs	r0, #0
 8003c7a:	e007      	b.n	8003c8c <__sfputs_r+0x22>
 8003c7c:	463a      	mov	r2, r7
 8003c7e:	4630      	mov	r0, r6
 8003c80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c84:	f7ff ffdc 	bl	8003c40 <__sfputc_r>
 8003c88:	1c43      	adds	r3, r0, #1
 8003c8a:	d1f3      	bne.n	8003c74 <__sfputs_r+0xa>
 8003c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003c90 <_vfiprintf_r>:
 8003c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c94:	460d      	mov	r5, r1
 8003c96:	4614      	mov	r4, r2
 8003c98:	4698      	mov	r8, r3
 8003c9a:	4606      	mov	r6, r0
 8003c9c:	b09d      	sub	sp, #116	; 0x74
 8003c9e:	b118      	cbz	r0, 8003ca8 <_vfiprintf_r+0x18>
 8003ca0:	6983      	ldr	r3, [r0, #24]
 8003ca2:	b90b      	cbnz	r3, 8003ca8 <_vfiprintf_r+0x18>
 8003ca4:	f7ff fd76 	bl	8003794 <__sinit>
 8003ca8:	4b89      	ldr	r3, [pc, #548]	; (8003ed0 <_vfiprintf_r+0x240>)
 8003caa:	429d      	cmp	r5, r3
 8003cac:	d11b      	bne.n	8003ce6 <_vfiprintf_r+0x56>
 8003cae:	6875      	ldr	r5, [r6, #4]
 8003cb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003cb2:	07d9      	lsls	r1, r3, #31
 8003cb4:	d405      	bmi.n	8003cc2 <_vfiprintf_r+0x32>
 8003cb6:	89ab      	ldrh	r3, [r5, #12]
 8003cb8:	059a      	lsls	r2, r3, #22
 8003cba:	d402      	bmi.n	8003cc2 <_vfiprintf_r+0x32>
 8003cbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003cbe:	f7ff fe07 	bl	80038d0 <__retarget_lock_acquire_recursive>
 8003cc2:	89ab      	ldrh	r3, [r5, #12]
 8003cc4:	071b      	lsls	r3, r3, #28
 8003cc6:	d501      	bpl.n	8003ccc <_vfiprintf_r+0x3c>
 8003cc8:	692b      	ldr	r3, [r5, #16]
 8003cca:	b9eb      	cbnz	r3, 8003d08 <_vfiprintf_r+0x78>
 8003ccc:	4629      	mov	r1, r5
 8003cce:	4630      	mov	r0, r6
 8003cd0:	f000 fb5c 	bl	800438c <__swsetup_r>
 8003cd4:	b1c0      	cbz	r0, 8003d08 <_vfiprintf_r+0x78>
 8003cd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003cd8:	07dc      	lsls	r4, r3, #31
 8003cda:	d50e      	bpl.n	8003cfa <_vfiprintf_r+0x6a>
 8003cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce0:	b01d      	add	sp, #116	; 0x74
 8003ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ce6:	4b7b      	ldr	r3, [pc, #492]	; (8003ed4 <_vfiprintf_r+0x244>)
 8003ce8:	429d      	cmp	r5, r3
 8003cea:	d101      	bne.n	8003cf0 <_vfiprintf_r+0x60>
 8003cec:	68b5      	ldr	r5, [r6, #8]
 8003cee:	e7df      	b.n	8003cb0 <_vfiprintf_r+0x20>
 8003cf0:	4b79      	ldr	r3, [pc, #484]	; (8003ed8 <_vfiprintf_r+0x248>)
 8003cf2:	429d      	cmp	r5, r3
 8003cf4:	bf08      	it	eq
 8003cf6:	68f5      	ldreq	r5, [r6, #12]
 8003cf8:	e7da      	b.n	8003cb0 <_vfiprintf_r+0x20>
 8003cfa:	89ab      	ldrh	r3, [r5, #12]
 8003cfc:	0598      	lsls	r0, r3, #22
 8003cfe:	d4ed      	bmi.n	8003cdc <_vfiprintf_r+0x4c>
 8003d00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003d02:	f7ff fde6 	bl	80038d2 <__retarget_lock_release_recursive>
 8003d06:	e7e9      	b.n	8003cdc <_vfiprintf_r+0x4c>
 8003d08:	2300      	movs	r3, #0
 8003d0a:	9309      	str	r3, [sp, #36]	; 0x24
 8003d0c:	2320      	movs	r3, #32
 8003d0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d12:	2330      	movs	r3, #48	; 0x30
 8003d14:	f04f 0901 	mov.w	r9, #1
 8003d18:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d1c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003edc <_vfiprintf_r+0x24c>
 8003d20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d24:	4623      	mov	r3, r4
 8003d26:	469a      	mov	sl, r3
 8003d28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d2c:	b10a      	cbz	r2, 8003d32 <_vfiprintf_r+0xa2>
 8003d2e:	2a25      	cmp	r2, #37	; 0x25
 8003d30:	d1f9      	bne.n	8003d26 <_vfiprintf_r+0x96>
 8003d32:	ebba 0b04 	subs.w	fp, sl, r4
 8003d36:	d00b      	beq.n	8003d50 <_vfiprintf_r+0xc0>
 8003d38:	465b      	mov	r3, fp
 8003d3a:	4622      	mov	r2, r4
 8003d3c:	4629      	mov	r1, r5
 8003d3e:	4630      	mov	r0, r6
 8003d40:	f7ff ff93 	bl	8003c6a <__sfputs_r>
 8003d44:	3001      	adds	r0, #1
 8003d46:	f000 80aa 	beq.w	8003e9e <_vfiprintf_r+0x20e>
 8003d4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d4c:	445a      	add	r2, fp
 8003d4e:	9209      	str	r2, [sp, #36]	; 0x24
 8003d50:	f89a 3000 	ldrb.w	r3, [sl]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f000 80a2 	beq.w	8003e9e <_vfiprintf_r+0x20e>
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d64:	f10a 0a01 	add.w	sl, sl, #1
 8003d68:	9304      	str	r3, [sp, #16]
 8003d6a:	9307      	str	r3, [sp, #28]
 8003d6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d70:	931a      	str	r3, [sp, #104]	; 0x68
 8003d72:	4654      	mov	r4, sl
 8003d74:	2205      	movs	r2, #5
 8003d76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d7a:	4858      	ldr	r0, [pc, #352]	; (8003edc <_vfiprintf_r+0x24c>)
 8003d7c:	f000 fcbc 	bl	80046f8 <memchr>
 8003d80:	9a04      	ldr	r2, [sp, #16]
 8003d82:	b9d8      	cbnz	r0, 8003dbc <_vfiprintf_r+0x12c>
 8003d84:	06d1      	lsls	r1, r2, #27
 8003d86:	bf44      	itt	mi
 8003d88:	2320      	movmi	r3, #32
 8003d8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d8e:	0713      	lsls	r3, r2, #28
 8003d90:	bf44      	itt	mi
 8003d92:	232b      	movmi	r3, #43	; 0x2b
 8003d94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d98:	f89a 3000 	ldrb.w	r3, [sl]
 8003d9c:	2b2a      	cmp	r3, #42	; 0x2a
 8003d9e:	d015      	beq.n	8003dcc <_vfiprintf_r+0x13c>
 8003da0:	4654      	mov	r4, sl
 8003da2:	2000      	movs	r0, #0
 8003da4:	f04f 0c0a 	mov.w	ip, #10
 8003da8:	9a07      	ldr	r2, [sp, #28]
 8003daa:	4621      	mov	r1, r4
 8003dac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003db0:	3b30      	subs	r3, #48	; 0x30
 8003db2:	2b09      	cmp	r3, #9
 8003db4:	d94e      	bls.n	8003e54 <_vfiprintf_r+0x1c4>
 8003db6:	b1b0      	cbz	r0, 8003de6 <_vfiprintf_r+0x156>
 8003db8:	9207      	str	r2, [sp, #28]
 8003dba:	e014      	b.n	8003de6 <_vfiprintf_r+0x156>
 8003dbc:	eba0 0308 	sub.w	r3, r0, r8
 8003dc0:	fa09 f303 	lsl.w	r3, r9, r3
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	46a2      	mov	sl, r4
 8003dc8:	9304      	str	r3, [sp, #16]
 8003dca:	e7d2      	b.n	8003d72 <_vfiprintf_r+0xe2>
 8003dcc:	9b03      	ldr	r3, [sp, #12]
 8003dce:	1d19      	adds	r1, r3, #4
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	9103      	str	r1, [sp, #12]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	bfbb      	ittet	lt
 8003dd8:	425b      	neglt	r3, r3
 8003dda:	f042 0202 	orrlt.w	r2, r2, #2
 8003dde:	9307      	strge	r3, [sp, #28]
 8003de0:	9307      	strlt	r3, [sp, #28]
 8003de2:	bfb8      	it	lt
 8003de4:	9204      	strlt	r2, [sp, #16]
 8003de6:	7823      	ldrb	r3, [r4, #0]
 8003de8:	2b2e      	cmp	r3, #46	; 0x2e
 8003dea:	d10c      	bne.n	8003e06 <_vfiprintf_r+0x176>
 8003dec:	7863      	ldrb	r3, [r4, #1]
 8003dee:	2b2a      	cmp	r3, #42	; 0x2a
 8003df0:	d135      	bne.n	8003e5e <_vfiprintf_r+0x1ce>
 8003df2:	9b03      	ldr	r3, [sp, #12]
 8003df4:	3402      	adds	r4, #2
 8003df6:	1d1a      	adds	r2, r3, #4
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	9203      	str	r2, [sp, #12]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	bfb8      	it	lt
 8003e00:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e04:	9305      	str	r3, [sp, #20]
 8003e06:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003eec <_vfiprintf_r+0x25c>
 8003e0a:	2203      	movs	r2, #3
 8003e0c:	4650      	mov	r0, sl
 8003e0e:	7821      	ldrb	r1, [r4, #0]
 8003e10:	f000 fc72 	bl	80046f8 <memchr>
 8003e14:	b140      	cbz	r0, 8003e28 <_vfiprintf_r+0x198>
 8003e16:	2340      	movs	r3, #64	; 0x40
 8003e18:	eba0 000a 	sub.w	r0, r0, sl
 8003e1c:	fa03 f000 	lsl.w	r0, r3, r0
 8003e20:	9b04      	ldr	r3, [sp, #16]
 8003e22:	3401      	adds	r4, #1
 8003e24:	4303      	orrs	r3, r0
 8003e26:	9304      	str	r3, [sp, #16]
 8003e28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e2c:	2206      	movs	r2, #6
 8003e2e:	482c      	ldr	r0, [pc, #176]	; (8003ee0 <_vfiprintf_r+0x250>)
 8003e30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e34:	f000 fc60 	bl	80046f8 <memchr>
 8003e38:	2800      	cmp	r0, #0
 8003e3a:	d03f      	beq.n	8003ebc <_vfiprintf_r+0x22c>
 8003e3c:	4b29      	ldr	r3, [pc, #164]	; (8003ee4 <_vfiprintf_r+0x254>)
 8003e3e:	bb1b      	cbnz	r3, 8003e88 <_vfiprintf_r+0x1f8>
 8003e40:	9b03      	ldr	r3, [sp, #12]
 8003e42:	3307      	adds	r3, #7
 8003e44:	f023 0307 	bic.w	r3, r3, #7
 8003e48:	3308      	adds	r3, #8
 8003e4a:	9303      	str	r3, [sp, #12]
 8003e4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e4e:	443b      	add	r3, r7
 8003e50:	9309      	str	r3, [sp, #36]	; 0x24
 8003e52:	e767      	b.n	8003d24 <_vfiprintf_r+0x94>
 8003e54:	460c      	mov	r4, r1
 8003e56:	2001      	movs	r0, #1
 8003e58:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e5c:	e7a5      	b.n	8003daa <_vfiprintf_r+0x11a>
 8003e5e:	2300      	movs	r3, #0
 8003e60:	f04f 0c0a 	mov.w	ip, #10
 8003e64:	4619      	mov	r1, r3
 8003e66:	3401      	adds	r4, #1
 8003e68:	9305      	str	r3, [sp, #20]
 8003e6a:	4620      	mov	r0, r4
 8003e6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e70:	3a30      	subs	r2, #48	; 0x30
 8003e72:	2a09      	cmp	r2, #9
 8003e74:	d903      	bls.n	8003e7e <_vfiprintf_r+0x1ee>
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d0c5      	beq.n	8003e06 <_vfiprintf_r+0x176>
 8003e7a:	9105      	str	r1, [sp, #20]
 8003e7c:	e7c3      	b.n	8003e06 <_vfiprintf_r+0x176>
 8003e7e:	4604      	mov	r4, r0
 8003e80:	2301      	movs	r3, #1
 8003e82:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e86:	e7f0      	b.n	8003e6a <_vfiprintf_r+0x1da>
 8003e88:	ab03      	add	r3, sp, #12
 8003e8a:	9300      	str	r3, [sp, #0]
 8003e8c:	462a      	mov	r2, r5
 8003e8e:	4630      	mov	r0, r6
 8003e90:	4b15      	ldr	r3, [pc, #84]	; (8003ee8 <_vfiprintf_r+0x258>)
 8003e92:	a904      	add	r1, sp, #16
 8003e94:	f3af 8000 	nop.w
 8003e98:	4607      	mov	r7, r0
 8003e9a:	1c78      	adds	r0, r7, #1
 8003e9c:	d1d6      	bne.n	8003e4c <_vfiprintf_r+0x1bc>
 8003e9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ea0:	07d9      	lsls	r1, r3, #31
 8003ea2:	d405      	bmi.n	8003eb0 <_vfiprintf_r+0x220>
 8003ea4:	89ab      	ldrh	r3, [r5, #12]
 8003ea6:	059a      	lsls	r2, r3, #22
 8003ea8:	d402      	bmi.n	8003eb0 <_vfiprintf_r+0x220>
 8003eaa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003eac:	f7ff fd11 	bl	80038d2 <__retarget_lock_release_recursive>
 8003eb0:	89ab      	ldrh	r3, [r5, #12]
 8003eb2:	065b      	lsls	r3, r3, #25
 8003eb4:	f53f af12 	bmi.w	8003cdc <_vfiprintf_r+0x4c>
 8003eb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003eba:	e711      	b.n	8003ce0 <_vfiprintf_r+0x50>
 8003ebc:	ab03      	add	r3, sp, #12
 8003ebe:	9300      	str	r3, [sp, #0]
 8003ec0:	462a      	mov	r2, r5
 8003ec2:	4630      	mov	r0, r6
 8003ec4:	4b08      	ldr	r3, [pc, #32]	; (8003ee8 <_vfiprintf_r+0x258>)
 8003ec6:	a904      	add	r1, sp, #16
 8003ec8:	f000 f882 	bl	8003fd0 <_printf_i>
 8003ecc:	e7e4      	b.n	8003e98 <_vfiprintf_r+0x208>
 8003ece:	bf00      	nop
 8003ed0:	08004964 	.word	0x08004964
 8003ed4:	08004984 	.word	0x08004984
 8003ed8:	08004944 	.word	0x08004944
 8003edc:	080049a4 	.word	0x080049a4
 8003ee0:	080049ae 	.word	0x080049ae
 8003ee4:	00000000 	.word	0x00000000
 8003ee8:	08003c6b 	.word	0x08003c6b
 8003eec:	080049aa 	.word	0x080049aa

08003ef0 <_printf_common>:
 8003ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ef4:	4616      	mov	r6, r2
 8003ef6:	4699      	mov	r9, r3
 8003ef8:	688a      	ldr	r2, [r1, #8]
 8003efa:	690b      	ldr	r3, [r1, #16]
 8003efc:	4607      	mov	r7, r0
 8003efe:	4293      	cmp	r3, r2
 8003f00:	bfb8      	it	lt
 8003f02:	4613      	movlt	r3, r2
 8003f04:	6033      	str	r3, [r6, #0]
 8003f06:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f0a:	460c      	mov	r4, r1
 8003f0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f10:	b10a      	cbz	r2, 8003f16 <_printf_common+0x26>
 8003f12:	3301      	adds	r3, #1
 8003f14:	6033      	str	r3, [r6, #0]
 8003f16:	6823      	ldr	r3, [r4, #0]
 8003f18:	0699      	lsls	r1, r3, #26
 8003f1a:	bf42      	ittt	mi
 8003f1c:	6833      	ldrmi	r3, [r6, #0]
 8003f1e:	3302      	addmi	r3, #2
 8003f20:	6033      	strmi	r3, [r6, #0]
 8003f22:	6825      	ldr	r5, [r4, #0]
 8003f24:	f015 0506 	ands.w	r5, r5, #6
 8003f28:	d106      	bne.n	8003f38 <_printf_common+0x48>
 8003f2a:	f104 0a19 	add.w	sl, r4, #25
 8003f2e:	68e3      	ldr	r3, [r4, #12]
 8003f30:	6832      	ldr	r2, [r6, #0]
 8003f32:	1a9b      	subs	r3, r3, r2
 8003f34:	42ab      	cmp	r3, r5
 8003f36:	dc28      	bgt.n	8003f8a <_printf_common+0x9a>
 8003f38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f3c:	1e13      	subs	r3, r2, #0
 8003f3e:	6822      	ldr	r2, [r4, #0]
 8003f40:	bf18      	it	ne
 8003f42:	2301      	movne	r3, #1
 8003f44:	0692      	lsls	r2, r2, #26
 8003f46:	d42d      	bmi.n	8003fa4 <_printf_common+0xb4>
 8003f48:	4649      	mov	r1, r9
 8003f4a:	4638      	mov	r0, r7
 8003f4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f50:	47c0      	blx	r8
 8003f52:	3001      	adds	r0, #1
 8003f54:	d020      	beq.n	8003f98 <_printf_common+0xa8>
 8003f56:	6823      	ldr	r3, [r4, #0]
 8003f58:	68e5      	ldr	r5, [r4, #12]
 8003f5a:	f003 0306 	and.w	r3, r3, #6
 8003f5e:	2b04      	cmp	r3, #4
 8003f60:	bf18      	it	ne
 8003f62:	2500      	movne	r5, #0
 8003f64:	6832      	ldr	r2, [r6, #0]
 8003f66:	f04f 0600 	mov.w	r6, #0
 8003f6a:	68a3      	ldr	r3, [r4, #8]
 8003f6c:	bf08      	it	eq
 8003f6e:	1aad      	subeq	r5, r5, r2
 8003f70:	6922      	ldr	r2, [r4, #16]
 8003f72:	bf08      	it	eq
 8003f74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	bfc4      	itt	gt
 8003f7c:	1a9b      	subgt	r3, r3, r2
 8003f7e:	18ed      	addgt	r5, r5, r3
 8003f80:	341a      	adds	r4, #26
 8003f82:	42b5      	cmp	r5, r6
 8003f84:	d11a      	bne.n	8003fbc <_printf_common+0xcc>
 8003f86:	2000      	movs	r0, #0
 8003f88:	e008      	b.n	8003f9c <_printf_common+0xac>
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	4652      	mov	r2, sl
 8003f8e:	4649      	mov	r1, r9
 8003f90:	4638      	mov	r0, r7
 8003f92:	47c0      	blx	r8
 8003f94:	3001      	adds	r0, #1
 8003f96:	d103      	bne.n	8003fa0 <_printf_common+0xb0>
 8003f98:	f04f 30ff 	mov.w	r0, #4294967295
 8003f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fa0:	3501      	adds	r5, #1
 8003fa2:	e7c4      	b.n	8003f2e <_printf_common+0x3e>
 8003fa4:	2030      	movs	r0, #48	; 0x30
 8003fa6:	18e1      	adds	r1, r4, r3
 8003fa8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003fac:	1c5a      	adds	r2, r3, #1
 8003fae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003fb2:	4422      	add	r2, r4
 8003fb4:	3302      	adds	r3, #2
 8003fb6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003fba:	e7c5      	b.n	8003f48 <_printf_common+0x58>
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	4622      	mov	r2, r4
 8003fc0:	4649      	mov	r1, r9
 8003fc2:	4638      	mov	r0, r7
 8003fc4:	47c0      	blx	r8
 8003fc6:	3001      	adds	r0, #1
 8003fc8:	d0e6      	beq.n	8003f98 <_printf_common+0xa8>
 8003fca:	3601      	adds	r6, #1
 8003fcc:	e7d9      	b.n	8003f82 <_printf_common+0x92>
	...

08003fd0 <_printf_i>:
 8003fd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fd4:	460c      	mov	r4, r1
 8003fd6:	7e27      	ldrb	r7, [r4, #24]
 8003fd8:	4691      	mov	r9, r2
 8003fda:	2f78      	cmp	r7, #120	; 0x78
 8003fdc:	4680      	mov	r8, r0
 8003fde:	469a      	mov	sl, r3
 8003fe0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003fe2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003fe6:	d807      	bhi.n	8003ff8 <_printf_i+0x28>
 8003fe8:	2f62      	cmp	r7, #98	; 0x62
 8003fea:	d80a      	bhi.n	8004002 <_printf_i+0x32>
 8003fec:	2f00      	cmp	r7, #0
 8003fee:	f000 80d9 	beq.w	80041a4 <_printf_i+0x1d4>
 8003ff2:	2f58      	cmp	r7, #88	; 0x58
 8003ff4:	f000 80a4 	beq.w	8004140 <_printf_i+0x170>
 8003ff8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003ffc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004000:	e03a      	b.n	8004078 <_printf_i+0xa8>
 8004002:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004006:	2b15      	cmp	r3, #21
 8004008:	d8f6      	bhi.n	8003ff8 <_printf_i+0x28>
 800400a:	a001      	add	r0, pc, #4	; (adr r0, 8004010 <_printf_i+0x40>)
 800400c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004010:	08004069 	.word	0x08004069
 8004014:	0800407d 	.word	0x0800407d
 8004018:	08003ff9 	.word	0x08003ff9
 800401c:	08003ff9 	.word	0x08003ff9
 8004020:	08003ff9 	.word	0x08003ff9
 8004024:	08003ff9 	.word	0x08003ff9
 8004028:	0800407d 	.word	0x0800407d
 800402c:	08003ff9 	.word	0x08003ff9
 8004030:	08003ff9 	.word	0x08003ff9
 8004034:	08003ff9 	.word	0x08003ff9
 8004038:	08003ff9 	.word	0x08003ff9
 800403c:	0800418b 	.word	0x0800418b
 8004040:	080040ad 	.word	0x080040ad
 8004044:	0800416d 	.word	0x0800416d
 8004048:	08003ff9 	.word	0x08003ff9
 800404c:	08003ff9 	.word	0x08003ff9
 8004050:	080041ad 	.word	0x080041ad
 8004054:	08003ff9 	.word	0x08003ff9
 8004058:	080040ad 	.word	0x080040ad
 800405c:	08003ff9 	.word	0x08003ff9
 8004060:	08003ff9 	.word	0x08003ff9
 8004064:	08004175 	.word	0x08004175
 8004068:	680b      	ldr	r3, [r1, #0]
 800406a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800406e:	1d1a      	adds	r2, r3, #4
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	600a      	str	r2, [r1, #0]
 8004074:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004078:	2301      	movs	r3, #1
 800407a:	e0a4      	b.n	80041c6 <_printf_i+0x1f6>
 800407c:	6825      	ldr	r5, [r4, #0]
 800407e:	6808      	ldr	r0, [r1, #0]
 8004080:	062e      	lsls	r6, r5, #24
 8004082:	f100 0304 	add.w	r3, r0, #4
 8004086:	d50a      	bpl.n	800409e <_printf_i+0xce>
 8004088:	6805      	ldr	r5, [r0, #0]
 800408a:	600b      	str	r3, [r1, #0]
 800408c:	2d00      	cmp	r5, #0
 800408e:	da03      	bge.n	8004098 <_printf_i+0xc8>
 8004090:	232d      	movs	r3, #45	; 0x2d
 8004092:	426d      	negs	r5, r5
 8004094:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004098:	230a      	movs	r3, #10
 800409a:	485e      	ldr	r0, [pc, #376]	; (8004214 <_printf_i+0x244>)
 800409c:	e019      	b.n	80040d2 <_printf_i+0x102>
 800409e:	f015 0f40 	tst.w	r5, #64	; 0x40
 80040a2:	6805      	ldr	r5, [r0, #0]
 80040a4:	600b      	str	r3, [r1, #0]
 80040a6:	bf18      	it	ne
 80040a8:	b22d      	sxthne	r5, r5
 80040aa:	e7ef      	b.n	800408c <_printf_i+0xbc>
 80040ac:	680b      	ldr	r3, [r1, #0]
 80040ae:	6825      	ldr	r5, [r4, #0]
 80040b0:	1d18      	adds	r0, r3, #4
 80040b2:	6008      	str	r0, [r1, #0]
 80040b4:	0628      	lsls	r0, r5, #24
 80040b6:	d501      	bpl.n	80040bc <_printf_i+0xec>
 80040b8:	681d      	ldr	r5, [r3, #0]
 80040ba:	e002      	b.n	80040c2 <_printf_i+0xf2>
 80040bc:	0669      	lsls	r1, r5, #25
 80040be:	d5fb      	bpl.n	80040b8 <_printf_i+0xe8>
 80040c0:	881d      	ldrh	r5, [r3, #0]
 80040c2:	2f6f      	cmp	r7, #111	; 0x6f
 80040c4:	bf0c      	ite	eq
 80040c6:	2308      	moveq	r3, #8
 80040c8:	230a      	movne	r3, #10
 80040ca:	4852      	ldr	r0, [pc, #328]	; (8004214 <_printf_i+0x244>)
 80040cc:	2100      	movs	r1, #0
 80040ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040d2:	6866      	ldr	r6, [r4, #4]
 80040d4:	2e00      	cmp	r6, #0
 80040d6:	bfa8      	it	ge
 80040d8:	6821      	ldrge	r1, [r4, #0]
 80040da:	60a6      	str	r6, [r4, #8]
 80040dc:	bfa4      	itt	ge
 80040de:	f021 0104 	bicge.w	r1, r1, #4
 80040e2:	6021      	strge	r1, [r4, #0]
 80040e4:	b90d      	cbnz	r5, 80040ea <_printf_i+0x11a>
 80040e6:	2e00      	cmp	r6, #0
 80040e8:	d04d      	beq.n	8004186 <_printf_i+0x1b6>
 80040ea:	4616      	mov	r6, r2
 80040ec:	fbb5 f1f3 	udiv	r1, r5, r3
 80040f0:	fb03 5711 	mls	r7, r3, r1, r5
 80040f4:	5dc7      	ldrb	r7, [r0, r7]
 80040f6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80040fa:	462f      	mov	r7, r5
 80040fc:	42bb      	cmp	r3, r7
 80040fe:	460d      	mov	r5, r1
 8004100:	d9f4      	bls.n	80040ec <_printf_i+0x11c>
 8004102:	2b08      	cmp	r3, #8
 8004104:	d10b      	bne.n	800411e <_printf_i+0x14e>
 8004106:	6823      	ldr	r3, [r4, #0]
 8004108:	07df      	lsls	r7, r3, #31
 800410a:	d508      	bpl.n	800411e <_printf_i+0x14e>
 800410c:	6923      	ldr	r3, [r4, #16]
 800410e:	6861      	ldr	r1, [r4, #4]
 8004110:	4299      	cmp	r1, r3
 8004112:	bfde      	ittt	le
 8004114:	2330      	movle	r3, #48	; 0x30
 8004116:	f806 3c01 	strble.w	r3, [r6, #-1]
 800411a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800411e:	1b92      	subs	r2, r2, r6
 8004120:	6122      	str	r2, [r4, #16]
 8004122:	464b      	mov	r3, r9
 8004124:	4621      	mov	r1, r4
 8004126:	4640      	mov	r0, r8
 8004128:	f8cd a000 	str.w	sl, [sp]
 800412c:	aa03      	add	r2, sp, #12
 800412e:	f7ff fedf 	bl	8003ef0 <_printf_common>
 8004132:	3001      	adds	r0, #1
 8004134:	d14c      	bne.n	80041d0 <_printf_i+0x200>
 8004136:	f04f 30ff 	mov.w	r0, #4294967295
 800413a:	b004      	add	sp, #16
 800413c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004140:	4834      	ldr	r0, [pc, #208]	; (8004214 <_printf_i+0x244>)
 8004142:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004146:	680e      	ldr	r6, [r1, #0]
 8004148:	6823      	ldr	r3, [r4, #0]
 800414a:	f856 5b04 	ldr.w	r5, [r6], #4
 800414e:	061f      	lsls	r7, r3, #24
 8004150:	600e      	str	r6, [r1, #0]
 8004152:	d514      	bpl.n	800417e <_printf_i+0x1ae>
 8004154:	07d9      	lsls	r1, r3, #31
 8004156:	bf44      	itt	mi
 8004158:	f043 0320 	orrmi.w	r3, r3, #32
 800415c:	6023      	strmi	r3, [r4, #0]
 800415e:	b91d      	cbnz	r5, 8004168 <_printf_i+0x198>
 8004160:	6823      	ldr	r3, [r4, #0]
 8004162:	f023 0320 	bic.w	r3, r3, #32
 8004166:	6023      	str	r3, [r4, #0]
 8004168:	2310      	movs	r3, #16
 800416a:	e7af      	b.n	80040cc <_printf_i+0xfc>
 800416c:	6823      	ldr	r3, [r4, #0]
 800416e:	f043 0320 	orr.w	r3, r3, #32
 8004172:	6023      	str	r3, [r4, #0]
 8004174:	2378      	movs	r3, #120	; 0x78
 8004176:	4828      	ldr	r0, [pc, #160]	; (8004218 <_printf_i+0x248>)
 8004178:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800417c:	e7e3      	b.n	8004146 <_printf_i+0x176>
 800417e:	065e      	lsls	r6, r3, #25
 8004180:	bf48      	it	mi
 8004182:	b2ad      	uxthmi	r5, r5
 8004184:	e7e6      	b.n	8004154 <_printf_i+0x184>
 8004186:	4616      	mov	r6, r2
 8004188:	e7bb      	b.n	8004102 <_printf_i+0x132>
 800418a:	680b      	ldr	r3, [r1, #0]
 800418c:	6826      	ldr	r6, [r4, #0]
 800418e:	1d1d      	adds	r5, r3, #4
 8004190:	6960      	ldr	r0, [r4, #20]
 8004192:	600d      	str	r5, [r1, #0]
 8004194:	0635      	lsls	r5, r6, #24
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	d501      	bpl.n	800419e <_printf_i+0x1ce>
 800419a:	6018      	str	r0, [r3, #0]
 800419c:	e002      	b.n	80041a4 <_printf_i+0x1d4>
 800419e:	0671      	lsls	r1, r6, #25
 80041a0:	d5fb      	bpl.n	800419a <_printf_i+0x1ca>
 80041a2:	8018      	strh	r0, [r3, #0]
 80041a4:	2300      	movs	r3, #0
 80041a6:	4616      	mov	r6, r2
 80041a8:	6123      	str	r3, [r4, #16]
 80041aa:	e7ba      	b.n	8004122 <_printf_i+0x152>
 80041ac:	680b      	ldr	r3, [r1, #0]
 80041ae:	1d1a      	adds	r2, r3, #4
 80041b0:	600a      	str	r2, [r1, #0]
 80041b2:	681e      	ldr	r6, [r3, #0]
 80041b4:	2100      	movs	r1, #0
 80041b6:	4630      	mov	r0, r6
 80041b8:	6862      	ldr	r2, [r4, #4]
 80041ba:	f000 fa9d 	bl	80046f8 <memchr>
 80041be:	b108      	cbz	r0, 80041c4 <_printf_i+0x1f4>
 80041c0:	1b80      	subs	r0, r0, r6
 80041c2:	6060      	str	r0, [r4, #4]
 80041c4:	6863      	ldr	r3, [r4, #4]
 80041c6:	6123      	str	r3, [r4, #16]
 80041c8:	2300      	movs	r3, #0
 80041ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041ce:	e7a8      	b.n	8004122 <_printf_i+0x152>
 80041d0:	4632      	mov	r2, r6
 80041d2:	4649      	mov	r1, r9
 80041d4:	4640      	mov	r0, r8
 80041d6:	6923      	ldr	r3, [r4, #16]
 80041d8:	47d0      	blx	sl
 80041da:	3001      	adds	r0, #1
 80041dc:	d0ab      	beq.n	8004136 <_printf_i+0x166>
 80041de:	6823      	ldr	r3, [r4, #0]
 80041e0:	079b      	lsls	r3, r3, #30
 80041e2:	d413      	bmi.n	800420c <_printf_i+0x23c>
 80041e4:	68e0      	ldr	r0, [r4, #12]
 80041e6:	9b03      	ldr	r3, [sp, #12]
 80041e8:	4298      	cmp	r0, r3
 80041ea:	bfb8      	it	lt
 80041ec:	4618      	movlt	r0, r3
 80041ee:	e7a4      	b.n	800413a <_printf_i+0x16a>
 80041f0:	2301      	movs	r3, #1
 80041f2:	4632      	mov	r2, r6
 80041f4:	4649      	mov	r1, r9
 80041f6:	4640      	mov	r0, r8
 80041f8:	47d0      	blx	sl
 80041fa:	3001      	adds	r0, #1
 80041fc:	d09b      	beq.n	8004136 <_printf_i+0x166>
 80041fe:	3501      	adds	r5, #1
 8004200:	68e3      	ldr	r3, [r4, #12]
 8004202:	9903      	ldr	r1, [sp, #12]
 8004204:	1a5b      	subs	r3, r3, r1
 8004206:	42ab      	cmp	r3, r5
 8004208:	dcf2      	bgt.n	80041f0 <_printf_i+0x220>
 800420a:	e7eb      	b.n	80041e4 <_printf_i+0x214>
 800420c:	2500      	movs	r5, #0
 800420e:	f104 0619 	add.w	r6, r4, #25
 8004212:	e7f5      	b.n	8004200 <_printf_i+0x230>
 8004214:	080049b5 	.word	0x080049b5
 8004218:	080049c6 	.word	0x080049c6

0800421c <_sbrk_r>:
 800421c:	b538      	push	{r3, r4, r5, lr}
 800421e:	2300      	movs	r3, #0
 8004220:	4d05      	ldr	r5, [pc, #20]	; (8004238 <_sbrk_r+0x1c>)
 8004222:	4604      	mov	r4, r0
 8004224:	4608      	mov	r0, r1
 8004226:	602b      	str	r3, [r5, #0]
 8004228:	f7fc fb24 	bl	8000874 <_sbrk>
 800422c:	1c43      	adds	r3, r0, #1
 800422e:	d102      	bne.n	8004236 <_sbrk_r+0x1a>
 8004230:	682b      	ldr	r3, [r5, #0]
 8004232:	b103      	cbz	r3, 8004236 <_sbrk_r+0x1a>
 8004234:	6023      	str	r3, [r4, #0]
 8004236:	bd38      	pop	{r3, r4, r5, pc}
 8004238:	200001d4 	.word	0x200001d4

0800423c <__sread>:
 800423c:	b510      	push	{r4, lr}
 800423e:	460c      	mov	r4, r1
 8004240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004244:	f000 fb0c 	bl	8004860 <_read_r>
 8004248:	2800      	cmp	r0, #0
 800424a:	bfab      	itete	ge
 800424c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800424e:	89a3      	ldrhlt	r3, [r4, #12]
 8004250:	181b      	addge	r3, r3, r0
 8004252:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004256:	bfac      	ite	ge
 8004258:	6563      	strge	r3, [r4, #84]	; 0x54
 800425a:	81a3      	strhlt	r3, [r4, #12]
 800425c:	bd10      	pop	{r4, pc}

0800425e <__swrite>:
 800425e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004262:	461f      	mov	r7, r3
 8004264:	898b      	ldrh	r3, [r1, #12]
 8004266:	4605      	mov	r5, r0
 8004268:	05db      	lsls	r3, r3, #23
 800426a:	460c      	mov	r4, r1
 800426c:	4616      	mov	r6, r2
 800426e:	d505      	bpl.n	800427c <__swrite+0x1e>
 8004270:	2302      	movs	r3, #2
 8004272:	2200      	movs	r2, #0
 8004274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004278:	f000 f9c8 	bl	800460c <_lseek_r>
 800427c:	89a3      	ldrh	r3, [r4, #12]
 800427e:	4632      	mov	r2, r6
 8004280:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004284:	81a3      	strh	r3, [r4, #12]
 8004286:	4628      	mov	r0, r5
 8004288:	463b      	mov	r3, r7
 800428a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800428e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004292:	f000 b869 	b.w	8004368 <_write_r>

08004296 <__sseek>:
 8004296:	b510      	push	{r4, lr}
 8004298:	460c      	mov	r4, r1
 800429a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800429e:	f000 f9b5 	bl	800460c <_lseek_r>
 80042a2:	1c43      	adds	r3, r0, #1
 80042a4:	89a3      	ldrh	r3, [r4, #12]
 80042a6:	bf15      	itete	ne
 80042a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80042aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80042ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80042b2:	81a3      	strheq	r3, [r4, #12]
 80042b4:	bf18      	it	ne
 80042b6:	81a3      	strhne	r3, [r4, #12]
 80042b8:	bd10      	pop	{r4, pc}

080042ba <__sclose>:
 80042ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042be:	f000 b8d3 	b.w	8004468 <_close_r>
	...

080042c4 <__swbuf_r>:
 80042c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042c6:	460e      	mov	r6, r1
 80042c8:	4614      	mov	r4, r2
 80042ca:	4605      	mov	r5, r0
 80042cc:	b118      	cbz	r0, 80042d6 <__swbuf_r+0x12>
 80042ce:	6983      	ldr	r3, [r0, #24]
 80042d0:	b90b      	cbnz	r3, 80042d6 <__swbuf_r+0x12>
 80042d2:	f7ff fa5f 	bl	8003794 <__sinit>
 80042d6:	4b21      	ldr	r3, [pc, #132]	; (800435c <__swbuf_r+0x98>)
 80042d8:	429c      	cmp	r4, r3
 80042da:	d12b      	bne.n	8004334 <__swbuf_r+0x70>
 80042dc:	686c      	ldr	r4, [r5, #4]
 80042de:	69a3      	ldr	r3, [r4, #24]
 80042e0:	60a3      	str	r3, [r4, #8]
 80042e2:	89a3      	ldrh	r3, [r4, #12]
 80042e4:	071a      	lsls	r2, r3, #28
 80042e6:	d52f      	bpl.n	8004348 <__swbuf_r+0x84>
 80042e8:	6923      	ldr	r3, [r4, #16]
 80042ea:	b36b      	cbz	r3, 8004348 <__swbuf_r+0x84>
 80042ec:	6923      	ldr	r3, [r4, #16]
 80042ee:	6820      	ldr	r0, [r4, #0]
 80042f0:	b2f6      	uxtb	r6, r6
 80042f2:	1ac0      	subs	r0, r0, r3
 80042f4:	6963      	ldr	r3, [r4, #20]
 80042f6:	4637      	mov	r7, r6
 80042f8:	4283      	cmp	r3, r0
 80042fa:	dc04      	bgt.n	8004306 <__swbuf_r+0x42>
 80042fc:	4621      	mov	r1, r4
 80042fe:	4628      	mov	r0, r5
 8004300:	f000 f948 	bl	8004594 <_fflush_r>
 8004304:	bb30      	cbnz	r0, 8004354 <__swbuf_r+0x90>
 8004306:	68a3      	ldr	r3, [r4, #8]
 8004308:	3001      	adds	r0, #1
 800430a:	3b01      	subs	r3, #1
 800430c:	60a3      	str	r3, [r4, #8]
 800430e:	6823      	ldr	r3, [r4, #0]
 8004310:	1c5a      	adds	r2, r3, #1
 8004312:	6022      	str	r2, [r4, #0]
 8004314:	701e      	strb	r6, [r3, #0]
 8004316:	6963      	ldr	r3, [r4, #20]
 8004318:	4283      	cmp	r3, r0
 800431a:	d004      	beq.n	8004326 <__swbuf_r+0x62>
 800431c:	89a3      	ldrh	r3, [r4, #12]
 800431e:	07db      	lsls	r3, r3, #31
 8004320:	d506      	bpl.n	8004330 <__swbuf_r+0x6c>
 8004322:	2e0a      	cmp	r6, #10
 8004324:	d104      	bne.n	8004330 <__swbuf_r+0x6c>
 8004326:	4621      	mov	r1, r4
 8004328:	4628      	mov	r0, r5
 800432a:	f000 f933 	bl	8004594 <_fflush_r>
 800432e:	b988      	cbnz	r0, 8004354 <__swbuf_r+0x90>
 8004330:	4638      	mov	r0, r7
 8004332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004334:	4b0a      	ldr	r3, [pc, #40]	; (8004360 <__swbuf_r+0x9c>)
 8004336:	429c      	cmp	r4, r3
 8004338:	d101      	bne.n	800433e <__swbuf_r+0x7a>
 800433a:	68ac      	ldr	r4, [r5, #8]
 800433c:	e7cf      	b.n	80042de <__swbuf_r+0x1a>
 800433e:	4b09      	ldr	r3, [pc, #36]	; (8004364 <__swbuf_r+0xa0>)
 8004340:	429c      	cmp	r4, r3
 8004342:	bf08      	it	eq
 8004344:	68ec      	ldreq	r4, [r5, #12]
 8004346:	e7ca      	b.n	80042de <__swbuf_r+0x1a>
 8004348:	4621      	mov	r1, r4
 800434a:	4628      	mov	r0, r5
 800434c:	f000 f81e 	bl	800438c <__swsetup_r>
 8004350:	2800      	cmp	r0, #0
 8004352:	d0cb      	beq.n	80042ec <__swbuf_r+0x28>
 8004354:	f04f 37ff 	mov.w	r7, #4294967295
 8004358:	e7ea      	b.n	8004330 <__swbuf_r+0x6c>
 800435a:	bf00      	nop
 800435c:	08004964 	.word	0x08004964
 8004360:	08004984 	.word	0x08004984
 8004364:	08004944 	.word	0x08004944

08004368 <_write_r>:
 8004368:	b538      	push	{r3, r4, r5, lr}
 800436a:	4604      	mov	r4, r0
 800436c:	4608      	mov	r0, r1
 800436e:	4611      	mov	r1, r2
 8004370:	2200      	movs	r2, #0
 8004372:	4d05      	ldr	r5, [pc, #20]	; (8004388 <_write_r+0x20>)
 8004374:	602a      	str	r2, [r5, #0]
 8004376:	461a      	mov	r2, r3
 8004378:	f7fc fa2f 	bl	80007da <_write>
 800437c:	1c43      	adds	r3, r0, #1
 800437e:	d102      	bne.n	8004386 <_write_r+0x1e>
 8004380:	682b      	ldr	r3, [r5, #0]
 8004382:	b103      	cbz	r3, 8004386 <_write_r+0x1e>
 8004384:	6023      	str	r3, [r4, #0]
 8004386:	bd38      	pop	{r3, r4, r5, pc}
 8004388:	200001d4 	.word	0x200001d4

0800438c <__swsetup_r>:
 800438c:	4b32      	ldr	r3, [pc, #200]	; (8004458 <__swsetup_r+0xcc>)
 800438e:	b570      	push	{r4, r5, r6, lr}
 8004390:	681d      	ldr	r5, [r3, #0]
 8004392:	4606      	mov	r6, r0
 8004394:	460c      	mov	r4, r1
 8004396:	b125      	cbz	r5, 80043a2 <__swsetup_r+0x16>
 8004398:	69ab      	ldr	r3, [r5, #24]
 800439a:	b913      	cbnz	r3, 80043a2 <__swsetup_r+0x16>
 800439c:	4628      	mov	r0, r5
 800439e:	f7ff f9f9 	bl	8003794 <__sinit>
 80043a2:	4b2e      	ldr	r3, [pc, #184]	; (800445c <__swsetup_r+0xd0>)
 80043a4:	429c      	cmp	r4, r3
 80043a6:	d10f      	bne.n	80043c8 <__swsetup_r+0x3c>
 80043a8:	686c      	ldr	r4, [r5, #4]
 80043aa:	89a3      	ldrh	r3, [r4, #12]
 80043ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80043b0:	0719      	lsls	r1, r3, #28
 80043b2:	d42c      	bmi.n	800440e <__swsetup_r+0x82>
 80043b4:	06dd      	lsls	r5, r3, #27
 80043b6:	d411      	bmi.n	80043dc <__swsetup_r+0x50>
 80043b8:	2309      	movs	r3, #9
 80043ba:	6033      	str	r3, [r6, #0]
 80043bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80043c0:	f04f 30ff 	mov.w	r0, #4294967295
 80043c4:	81a3      	strh	r3, [r4, #12]
 80043c6:	e03e      	b.n	8004446 <__swsetup_r+0xba>
 80043c8:	4b25      	ldr	r3, [pc, #148]	; (8004460 <__swsetup_r+0xd4>)
 80043ca:	429c      	cmp	r4, r3
 80043cc:	d101      	bne.n	80043d2 <__swsetup_r+0x46>
 80043ce:	68ac      	ldr	r4, [r5, #8]
 80043d0:	e7eb      	b.n	80043aa <__swsetup_r+0x1e>
 80043d2:	4b24      	ldr	r3, [pc, #144]	; (8004464 <__swsetup_r+0xd8>)
 80043d4:	429c      	cmp	r4, r3
 80043d6:	bf08      	it	eq
 80043d8:	68ec      	ldreq	r4, [r5, #12]
 80043da:	e7e6      	b.n	80043aa <__swsetup_r+0x1e>
 80043dc:	0758      	lsls	r0, r3, #29
 80043de:	d512      	bpl.n	8004406 <__swsetup_r+0x7a>
 80043e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80043e2:	b141      	cbz	r1, 80043f6 <__swsetup_r+0x6a>
 80043e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80043e8:	4299      	cmp	r1, r3
 80043ea:	d002      	beq.n	80043f2 <__swsetup_r+0x66>
 80043ec:	4630      	mov	r0, r6
 80043ee:	f000 f9c5 	bl	800477c <_free_r>
 80043f2:	2300      	movs	r3, #0
 80043f4:	6363      	str	r3, [r4, #52]	; 0x34
 80043f6:	89a3      	ldrh	r3, [r4, #12]
 80043f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80043fc:	81a3      	strh	r3, [r4, #12]
 80043fe:	2300      	movs	r3, #0
 8004400:	6063      	str	r3, [r4, #4]
 8004402:	6923      	ldr	r3, [r4, #16]
 8004404:	6023      	str	r3, [r4, #0]
 8004406:	89a3      	ldrh	r3, [r4, #12]
 8004408:	f043 0308 	orr.w	r3, r3, #8
 800440c:	81a3      	strh	r3, [r4, #12]
 800440e:	6923      	ldr	r3, [r4, #16]
 8004410:	b94b      	cbnz	r3, 8004426 <__swsetup_r+0x9a>
 8004412:	89a3      	ldrh	r3, [r4, #12]
 8004414:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004418:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800441c:	d003      	beq.n	8004426 <__swsetup_r+0x9a>
 800441e:	4621      	mov	r1, r4
 8004420:	4630      	mov	r0, r6
 8004422:	f000 f929 	bl	8004678 <__smakebuf_r>
 8004426:	89a0      	ldrh	r0, [r4, #12]
 8004428:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800442c:	f010 0301 	ands.w	r3, r0, #1
 8004430:	d00a      	beq.n	8004448 <__swsetup_r+0xbc>
 8004432:	2300      	movs	r3, #0
 8004434:	60a3      	str	r3, [r4, #8]
 8004436:	6963      	ldr	r3, [r4, #20]
 8004438:	425b      	negs	r3, r3
 800443a:	61a3      	str	r3, [r4, #24]
 800443c:	6923      	ldr	r3, [r4, #16]
 800443e:	b943      	cbnz	r3, 8004452 <__swsetup_r+0xc6>
 8004440:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004444:	d1ba      	bne.n	80043bc <__swsetup_r+0x30>
 8004446:	bd70      	pop	{r4, r5, r6, pc}
 8004448:	0781      	lsls	r1, r0, #30
 800444a:	bf58      	it	pl
 800444c:	6963      	ldrpl	r3, [r4, #20]
 800444e:	60a3      	str	r3, [r4, #8]
 8004450:	e7f4      	b.n	800443c <__swsetup_r+0xb0>
 8004452:	2000      	movs	r0, #0
 8004454:	e7f7      	b.n	8004446 <__swsetup_r+0xba>
 8004456:	bf00      	nop
 8004458:	20000020 	.word	0x20000020
 800445c:	08004964 	.word	0x08004964
 8004460:	08004984 	.word	0x08004984
 8004464:	08004944 	.word	0x08004944

08004468 <_close_r>:
 8004468:	b538      	push	{r3, r4, r5, lr}
 800446a:	2300      	movs	r3, #0
 800446c:	4d05      	ldr	r5, [pc, #20]	; (8004484 <_close_r+0x1c>)
 800446e:	4604      	mov	r4, r0
 8004470:	4608      	mov	r0, r1
 8004472:	602b      	str	r3, [r5, #0]
 8004474:	f7fc f9cd 	bl	8000812 <_close>
 8004478:	1c43      	adds	r3, r0, #1
 800447a:	d102      	bne.n	8004482 <_close_r+0x1a>
 800447c:	682b      	ldr	r3, [r5, #0]
 800447e:	b103      	cbz	r3, 8004482 <_close_r+0x1a>
 8004480:	6023      	str	r3, [r4, #0]
 8004482:	bd38      	pop	{r3, r4, r5, pc}
 8004484:	200001d4 	.word	0x200001d4

08004488 <__sflush_r>:
 8004488:	898a      	ldrh	r2, [r1, #12]
 800448a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800448e:	4605      	mov	r5, r0
 8004490:	0710      	lsls	r0, r2, #28
 8004492:	460c      	mov	r4, r1
 8004494:	d458      	bmi.n	8004548 <__sflush_r+0xc0>
 8004496:	684b      	ldr	r3, [r1, #4]
 8004498:	2b00      	cmp	r3, #0
 800449a:	dc05      	bgt.n	80044a8 <__sflush_r+0x20>
 800449c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800449e:	2b00      	cmp	r3, #0
 80044a0:	dc02      	bgt.n	80044a8 <__sflush_r+0x20>
 80044a2:	2000      	movs	r0, #0
 80044a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80044aa:	2e00      	cmp	r6, #0
 80044ac:	d0f9      	beq.n	80044a2 <__sflush_r+0x1a>
 80044ae:	2300      	movs	r3, #0
 80044b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80044b4:	682f      	ldr	r7, [r5, #0]
 80044b6:	602b      	str	r3, [r5, #0]
 80044b8:	d032      	beq.n	8004520 <__sflush_r+0x98>
 80044ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80044bc:	89a3      	ldrh	r3, [r4, #12]
 80044be:	075a      	lsls	r2, r3, #29
 80044c0:	d505      	bpl.n	80044ce <__sflush_r+0x46>
 80044c2:	6863      	ldr	r3, [r4, #4]
 80044c4:	1ac0      	subs	r0, r0, r3
 80044c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80044c8:	b10b      	cbz	r3, 80044ce <__sflush_r+0x46>
 80044ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80044cc:	1ac0      	subs	r0, r0, r3
 80044ce:	2300      	movs	r3, #0
 80044d0:	4602      	mov	r2, r0
 80044d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80044d4:	4628      	mov	r0, r5
 80044d6:	6a21      	ldr	r1, [r4, #32]
 80044d8:	47b0      	blx	r6
 80044da:	1c43      	adds	r3, r0, #1
 80044dc:	89a3      	ldrh	r3, [r4, #12]
 80044de:	d106      	bne.n	80044ee <__sflush_r+0x66>
 80044e0:	6829      	ldr	r1, [r5, #0]
 80044e2:	291d      	cmp	r1, #29
 80044e4:	d82c      	bhi.n	8004540 <__sflush_r+0xb8>
 80044e6:	4a2a      	ldr	r2, [pc, #168]	; (8004590 <__sflush_r+0x108>)
 80044e8:	40ca      	lsrs	r2, r1
 80044ea:	07d6      	lsls	r6, r2, #31
 80044ec:	d528      	bpl.n	8004540 <__sflush_r+0xb8>
 80044ee:	2200      	movs	r2, #0
 80044f0:	6062      	str	r2, [r4, #4]
 80044f2:	6922      	ldr	r2, [r4, #16]
 80044f4:	04d9      	lsls	r1, r3, #19
 80044f6:	6022      	str	r2, [r4, #0]
 80044f8:	d504      	bpl.n	8004504 <__sflush_r+0x7c>
 80044fa:	1c42      	adds	r2, r0, #1
 80044fc:	d101      	bne.n	8004502 <__sflush_r+0x7a>
 80044fe:	682b      	ldr	r3, [r5, #0]
 8004500:	b903      	cbnz	r3, 8004504 <__sflush_r+0x7c>
 8004502:	6560      	str	r0, [r4, #84]	; 0x54
 8004504:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004506:	602f      	str	r7, [r5, #0]
 8004508:	2900      	cmp	r1, #0
 800450a:	d0ca      	beq.n	80044a2 <__sflush_r+0x1a>
 800450c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004510:	4299      	cmp	r1, r3
 8004512:	d002      	beq.n	800451a <__sflush_r+0x92>
 8004514:	4628      	mov	r0, r5
 8004516:	f000 f931 	bl	800477c <_free_r>
 800451a:	2000      	movs	r0, #0
 800451c:	6360      	str	r0, [r4, #52]	; 0x34
 800451e:	e7c1      	b.n	80044a4 <__sflush_r+0x1c>
 8004520:	6a21      	ldr	r1, [r4, #32]
 8004522:	2301      	movs	r3, #1
 8004524:	4628      	mov	r0, r5
 8004526:	47b0      	blx	r6
 8004528:	1c41      	adds	r1, r0, #1
 800452a:	d1c7      	bne.n	80044bc <__sflush_r+0x34>
 800452c:	682b      	ldr	r3, [r5, #0]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d0c4      	beq.n	80044bc <__sflush_r+0x34>
 8004532:	2b1d      	cmp	r3, #29
 8004534:	d001      	beq.n	800453a <__sflush_r+0xb2>
 8004536:	2b16      	cmp	r3, #22
 8004538:	d101      	bne.n	800453e <__sflush_r+0xb6>
 800453a:	602f      	str	r7, [r5, #0]
 800453c:	e7b1      	b.n	80044a2 <__sflush_r+0x1a>
 800453e:	89a3      	ldrh	r3, [r4, #12]
 8004540:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004544:	81a3      	strh	r3, [r4, #12]
 8004546:	e7ad      	b.n	80044a4 <__sflush_r+0x1c>
 8004548:	690f      	ldr	r7, [r1, #16]
 800454a:	2f00      	cmp	r7, #0
 800454c:	d0a9      	beq.n	80044a2 <__sflush_r+0x1a>
 800454e:	0793      	lsls	r3, r2, #30
 8004550:	bf18      	it	ne
 8004552:	2300      	movne	r3, #0
 8004554:	680e      	ldr	r6, [r1, #0]
 8004556:	bf08      	it	eq
 8004558:	694b      	ldreq	r3, [r1, #20]
 800455a:	eba6 0807 	sub.w	r8, r6, r7
 800455e:	600f      	str	r7, [r1, #0]
 8004560:	608b      	str	r3, [r1, #8]
 8004562:	f1b8 0f00 	cmp.w	r8, #0
 8004566:	dd9c      	ble.n	80044a2 <__sflush_r+0x1a>
 8004568:	4643      	mov	r3, r8
 800456a:	463a      	mov	r2, r7
 800456c:	4628      	mov	r0, r5
 800456e:	6a21      	ldr	r1, [r4, #32]
 8004570:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004572:	47b0      	blx	r6
 8004574:	2800      	cmp	r0, #0
 8004576:	dc06      	bgt.n	8004586 <__sflush_r+0xfe>
 8004578:	89a3      	ldrh	r3, [r4, #12]
 800457a:	f04f 30ff 	mov.w	r0, #4294967295
 800457e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004582:	81a3      	strh	r3, [r4, #12]
 8004584:	e78e      	b.n	80044a4 <__sflush_r+0x1c>
 8004586:	4407      	add	r7, r0
 8004588:	eba8 0800 	sub.w	r8, r8, r0
 800458c:	e7e9      	b.n	8004562 <__sflush_r+0xda>
 800458e:	bf00      	nop
 8004590:	20400001 	.word	0x20400001

08004594 <_fflush_r>:
 8004594:	b538      	push	{r3, r4, r5, lr}
 8004596:	690b      	ldr	r3, [r1, #16]
 8004598:	4605      	mov	r5, r0
 800459a:	460c      	mov	r4, r1
 800459c:	b913      	cbnz	r3, 80045a4 <_fflush_r+0x10>
 800459e:	2500      	movs	r5, #0
 80045a0:	4628      	mov	r0, r5
 80045a2:	bd38      	pop	{r3, r4, r5, pc}
 80045a4:	b118      	cbz	r0, 80045ae <_fflush_r+0x1a>
 80045a6:	6983      	ldr	r3, [r0, #24]
 80045a8:	b90b      	cbnz	r3, 80045ae <_fflush_r+0x1a>
 80045aa:	f7ff f8f3 	bl	8003794 <__sinit>
 80045ae:	4b14      	ldr	r3, [pc, #80]	; (8004600 <_fflush_r+0x6c>)
 80045b0:	429c      	cmp	r4, r3
 80045b2:	d11b      	bne.n	80045ec <_fflush_r+0x58>
 80045b4:	686c      	ldr	r4, [r5, #4]
 80045b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d0ef      	beq.n	800459e <_fflush_r+0xa>
 80045be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80045c0:	07d0      	lsls	r0, r2, #31
 80045c2:	d404      	bmi.n	80045ce <_fflush_r+0x3a>
 80045c4:	0599      	lsls	r1, r3, #22
 80045c6:	d402      	bmi.n	80045ce <_fflush_r+0x3a>
 80045c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045ca:	f7ff f981 	bl	80038d0 <__retarget_lock_acquire_recursive>
 80045ce:	4628      	mov	r0, r5
 80045d0:	4621      	mov	r1, r4
 80045d2:	f7ff ff59 	bl	8004488 <__sflush_r>
 80045d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80045d8:	4605      	mov	r5, r0
 80045da:	07da      	lsls	r2, r3, #31
 80045dc:	d4e0      	bmi.n	80045a0 <_fflush_r+0xc>
 80045de:	89a3      	ldrh	r3, [r4, #12]
 80045e0:	059b      	lsls	r3, r3, #22
 80045e2:	d4dd      	bmi.n	80045a0 <_fflush_r+0xc>
 80045e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045e6:	f7ff f974 	bl	80038d2 <__retarget_lock_release_recursive>
 80045ea:	e7d9      	b.n	80045a0 <_fflush_r+0xc>
 80045ec:	4b05      	ldr	r3, [pc, #20]	; (8004604 <_fflush_r+0x70>)
 80045ee:	429c      	cmp	r4, r3
 80045f0:	d101      	bne.n	80045f6 <_fflush_r+0x62>
 80045f2:	68ac      	ldr	r4, [r5, #8]
 80045f4:	e7df      	b.n	80045b6 <_fflush_r+0x22>
 80045f6:	4b04      	ldr	r3, [pc, #16]	; (8004608 <_fflush_r+0x74>)
 80045f8:	429c      	cmp	r4, r3
 80045fa:	bf08      	it	eq
 80045fc:	68ec      	ldreq	r4, [r5, #12]
 80045fe:	e7da      	b.n	80045b6 <_fflush_r+0x22>
 8004600:	08004964 	.word	0x08004964
 8004604:	08004984 	.word	0x08004984
 8004608:	08004944 	.word	0x08004944

0800460c <_lseek_r>:
 800460c:	b538      	push	{r3, r4, r5, lr}
 800460e:	4604      	mov	r4, r0
 8004610:	4608      	mov	r0, r1
 8004612:	4611      	mov	r1, r2
 8004614:	2200      	movs	r2, #0
 8004616:	4d05      	ldr	r5, [pc, #20]	; (800462c <_lseek_r+0x20>)
 8004618:	602a      	str	r2, [r5, #0]
 800461a:	461a      	mov	r2, r3
 800461c:	f7fc f91d 	bl	800085a <_lseek>
 8004620:	1c43      	adds	r3, r0, #1
 8004622:	d102      	bne.n	800462a <_lseek_r+0x1e>
 8004624:	682b      	ldr	r3, [r5, #0]
 8004626:	b103      	cbz	r3, 800462a <_lseek_r+0x1e>
 8004628:	6023      	str	r3, [r4, #0]
 800462a:	bd38      	pop	{r3, r4, r5, pc}
 800462c:	200001d4 	.word	0x200001d4

08004630 <__swhatbuf_r>:
 8004630:	b570      	push	{r4, r5, r6, lr}
 8004632:	460e      	mov	r6, r1
 8004634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004638:	4614      	mov	r4, r2
 800463a:	2900      	cmp	r1, #0
 800463c:	461d      	mov	r5, r3
 800463e:	b096      	sub	sp, #88	; 0x58
 8004640:	da07      	bge.n	8004652 <__swhatbuf_r+0x22>
 8004642:	2300      	movs	r3, #0
 8004644:	602b      	str	r3, [r5, #0]
 8004646:	89b3      	ldrh	r3, [r6, #12]
 8004648:	061a      	lsls	r2, r3, #24
 800464a:	d410      	bmi.n	800466e <__swhatbuf_r+0x3e>
 800464c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004650:	e00e      	b.n	8004670 <__swhatbuf_r+0x40>
 8004652:	466a      	mov	r2, sp
 8004654:	f000 f916 	bl	8004884 <_fstat_r>
 8004658:	2800      	cmp	r0, #0
 800465a:	dbf2      	blt.n	8004642 <__swhatbuf_r+0x12>
 800465c:	9a01      	ldr	r2, [sp, #4]
 800465e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004662:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004666:	425a      	negs	r2, r3
 8004668:	415a      	adcs	r2, r3
 800466a:	602a      	str	r2, [r5, #0]
 800466c:	e7ee      	b.n	800464c <__swhatbuf_r+0x1c>
 800466e:	2340      	movs	r3, #64	; 0x40
 8004670:	2000      	movs	r0, #0
 8004672:	6023      	str	r3, [r4, #0]
 8004674:	b016      	add	sp, #88	; 0x58
 8004676:	bd70      	pop	{r4, r5, r6, pc}

08004678 <__smakebuf_r>:
 8004678:	898b      	ldrh	r3, [r1, #12]
 800467a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800467c:	079d      	lsls	r5, r3, #30
 800467e:	4606      	mov	r6, r0
 8004680:	460c      	mov	r4, r1
 8004682:	d507      	bpl.n	8004694 <__smakebuf_r+0x1c>
 8004684:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004688:	6023      	str	r3, [r4, #0]
 800468a:	6123      	str	r3, [r4, #16]
 800468c:	2301      	movs	r3, #1
 800468e:	6163      	str	r3, [r4, #20]
 8004690:	b002      	add	sp, #8
 8004692:	bd70      	pop	{r4, r5, r6, pc}
 8004694:	466a      	mov	r2, sp
 8004696:	ab01      	add	r3, sp, #4
 8004698:	f7ff ffca 	bl	8004630 <__swhatbuf_r>
 800469c:	9900      	ldr	r1, [sp, #0]
 800469e:	4605      	mov	r5, r0
 80046a0:	4630      	mov	r0, r6
 80046a2:	f7ff f917 	bl	80038d4 <_malloc_r>
 80046a6:	b948      	cbnz	r0, 80046bc <__smakebuf_r+0x44>
 80046a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046ac:	059a      	lsls	r2, r3, #22
 80046ae:	d4ef      	bmi.n	8004690 <__smakebuf_r+0x18>
 80046b0:	f023 0303 	bic.w	r3, r3, #3
 80046b4:	f043 0302 	orr.w	r3, r3, #2
 80046b8:	81a3      	strh	r3, [r4, #12]
 80046ba:	e7e3      	b.n	8004684 <__smakebuf_r+0xc>
 80046bc:	4b0d      	ldr	r3, [pc, #52]	; (80046f4 <__smakebuf_r+0x7c>)
 80046be:	62b3      	str	r3, [r6, #40]	; 0x28
 80046c0:	89a3      	ldrh	r3, [r4, #12]
 80046c2:	6020      	str	r0, [r4, #0]
 80046c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046c8:	81a3      	strh	r3, [r4, #12]
 80046ca:	9b00      	ldr	r3, [sp, #0]
 80046cc:	6120      	str	r0, [r4, #16]
 80046ce:	6163      	str	r3, [r4, #20]
 80046d0:	9b01      	ldr	r3, [sp, #4]
 80046d2:	b15b      	cbz	r3, 80046ec <__smakebuf_r+0x74>
 80046d4:	4630      	mov	r0, r6
 80046d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046da:	f000 f8e5 	bl	80048a8 <_isatty_r>
 80046de:	b128      	cbz	r0, 80046ec <__smakebuf_r+0x74>
 80046e0:	89a3      	ldrh	r3, [r4, #12]
 80046e2:	f023 0303 	bic.w	r3, r3, #3
 80046e6:	f043 0301 	orr.w	r3, r3, #1
 80046ea:	81a3      	strh	r3, [r4, #12]
 80046ec:	89a0      	ldrh	r0, [r4, #12]
 80046ee:	4305      	orrs	r5, r0
 80046f0:	81a5      	strh	r5, [r4, #12]
 80046f2:	e7cd      	b.n	8004690 <__smakebuf_r+0x18>
 80046f4:	0800372d 	.word	0x0800372d

080046f8 <memchr>:
 80046f8:	4603      	mov	r3, r0
 80046fa:	b510      	push	{r4, lr}
 80046fc:	b2c9      	uxtb	r1, r1
 80046fe:	4402      	add	r2, r0
 8004700:	4293      	cmp	r3, r2
 8004702:	4618      	mov	r0, r3
 8004704:	d101      	bne.n	800470a <memchr+0x12>
 8004706:	2000      	movs	r0, #0
 8004708:	e003      	b.n	8004712 <memchr+0x1a>
 800470a:	7804      	ldrb	r4, [r0, #0]
 800470c:	3301      	adds	r3, #1
 800470e:	428c      	cmp	r4, r1
 8004710:	d1f6      	bne.n	8004700 <memchr+0x8>
 8004712:	bd10      	pop	{r4, pc}

08004714 <memcpy>:
 8004714:	440a      	add	r2, r1
 8004716:	4291      	cmp	r1, r2
 8004718:	f100 33ff 	add.w	r3, r0, #4294967295
 800471c:	d100      	bne.n	8004720 <memcpy+0xc>
 800471e:	4770      	bx	lr
 8004720:	b510      	push	{r4, lr}
 8004722:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004726:	4291      	cmp	r1, r2
 8004728:	f803 4f01 	strb.w	r4, [r3, #1]!
 800472c:	d1f9      	bne.n	8004722 <memcpy+0xe>
 800472e:	bd10      	pop	{r4, pc}

08004730 <memmove>:
 8004730:	4288      	cmp	r0, r1
 8004732:	b510      	push	{r4, lr}
 8004734:	eb01 0402 	add.w	r4, r1, r2
 8004738:	d902      	bls.n	8004740 <memmove+0x10>
 800473a:	4284      	cmp	r4, r0
 800473c:	4623      	mov	r3, r4
 800473e:	d807      	bhi.n	8004750 <memmove+0x20>
 8004740:	1e43      	subs	r3, r0, #1
 8004742:	42a1      	cmp	r1, r4
 8004744:	d008      	beq.n	8004758 <memmove+0x28>
 8004746:	f811 2b01 	ldrb.w	r2, [r1], #1
 800474a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800474e:	e7f8      	b.n	8004742 <memmove+0x12>
 8004750:	4601      	mov	r1, r0
 8004752:	4402      	add	r2, r0
 8004754:	428a      	cmp	r2, r1
 8004756:	d100      	bne.n	800475a <memmove+0x2a>
 8004758:	bd10      	pop	{r4, pc}
 800475a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800475e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004762:	e7f7      	b.n	8004754 <memmove+0x24>

08004764 <__malloc_lock>:
 8004764:	4801      	ldr	r0, [pc, #4]	; (800476c <__malloc_lock+0x8>)
 8004766:	f7ff b8b3 	b.w	80038d0 <__retarget_lock_acquire_recursive>
 800476a:	bf00      	nop
 800476c:	200001cc 	.word	0x200001cc

08004770 <__malloc_unlock>:
 8004770:	4801      	ldr	r0, [pc, #4]	; (8004778 <__malloc_unlock+0x8>)
 8004772:	f7ff b8ae 	b.w	80038d2 <__retarget_lock_release_recursive>
 8004776:	bf00      	nop
 8004778:	200001cc 	.word	0x200001cc

0800477c <_free_r>:
 800477c:	b538      	push	{r3, r4, r5, lr}
 800477e:	4605      	mov	r5, r0
 8004780:	2900      	cmp	r1, #0
 8004782:	d043      	beq.n	800480c <_free_r+0x90>
 8004784:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004788:	1f0c      	subs	r4, r1, #4
 800478a:	2b00      	cmp	r3, #0
 800478c:	bfb8      	it	lt
 800478e:	18e4      	addlt	r4, r4, r3
 8004790:	f7ff ffe8 	bl	8004764 <__malloc_lock>
 8004794:	4a1e      	ldr	r2, [pc, #120]	; (8004810 <_free_r+0x94>)
 8004796:	6813      	ldr	r3, [r2, #0]
 8004798:	4610      	mov	r0, r2
 800479a:	b933      	cbnz	r3, 80047aa <_free_r+0x2e>
 800479c:	6063      	str	r3, [r4, #4]
 800479e:	6014      	str	r4, [r2, #0]
 80047a0:	4628      	mov	r0, r5
 80047a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80047a6:	f7ff bfe3 	b.w	8004770 <__malloc_unlock>
 80047aa:	42a3      	cmp	r3, r4
 80047ac:	d90a      	bls.n	80047c4 <_free_r+0x48>
 80047ae:	6821      	ldr	r1, [r4, #0]
 80047b0:	1862      	adds	r2, r4, r1
 80047b2:	4293      	cmp	r3, r2
 80047b4:	bf01      	itttt	eq
 80047b6:	681a      	ldreq	r2, [r3, #0]
 80047b8:	685b      	ldreq	r3, [r3, #4]
 80047ba:	1852      	addeq	r2, r2, r1
 80047bc:	6022      	streq	r2, [r4, #0]
 80047be:	6063      	str	r3, [r4, #4]
 80047c0:	6004      	str	r4, [r0, #0]
 80047c2:	e7ed      	b.n	80047a0 <_free_r+0x24>
 80047c4:	461a      	mov	r2, r3
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	b10b      	cbz	r3, 80047ce <_free_r+0x52>
 80047ca:	42a3      	cmp	r3, r4
 80047cc:	d9fa      	bls.n	80047c4 <_free_r+0x48>
 80047ce:	6811      	ldr	r1, [r2, #0]
 80047d0:	1850      	adds	r0, r2, r1
 80047d2:	42a0      	cmp	r0, r4
 80047d4:	d10b      	bne.n	80047ee <_free_r+0x72>
 80047d6:	6820      	ldr	r0, [r4, #0]
 80047d8:	4401      	add	r1, r0
 80047da:	1850      	adds	r0, r2, r1
 80047dc:	4283      	cmp	r3, r0
 80047de:	6011      	str	r1, [r2, #0]
 80047e0:	d1de      	bne.n	80047a0 <_free_r+0x24>
 80047e2:	6818      	ldr	r0, [r3, #0]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	4401      	add	r1, r0
 80047e8:	6011      	str	r1, [r2, #0]
 80047ea:	6053      	str	r3, [r2, #4]
 80047ec:	e7d8      	b.n	80047a0 <_free_r+0x24>
 80047ee:	d902      	bls.n	80047f6 <_free_r+0x7a>
 80047f0:	230c      	movs	r3, #12
 80047f2:	602b      	str	r3, [r5, #0]
 80047f4:	e7d4      	b.n	80047a0 <_free_r+0x24>
 80047f6:	6820      	ldr	r0, [r4, #0]
 80047f8:	1821      	adds	r1, r4, r0
 80047fa:	428b      	cmp	r3, r1
 80047fc:	bf01      	itttt	eq
 80047fe:	6819      	ldreq	r1, [r3, #0]
 8004800:	685b      	ldreq	r3, [r3, #4]
 8004802:	1809      	addeq	r1, r1, r0
 8004804:	6021      	streq	r1, [r4, #0]
 8004806:	6063      	str	r3, [r4, #4]
 8004808:	6054      	str	r4, [r2, #4]
 800480a:	e7c9      	b.n	80047a0 <_free_r+0x24>
 800480c:	bd38      	pop	{r3, r4, r5, pc}
 800480e:	bf00      	nop
 8004810:	200000bc 	.word	0x200000bc

08004814 <_realloc_r>:
 8004814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004816:	4607      	mov	r7, r0
 8004818:	4614      	mov	r4, r2
 800481a:	460e      	mov	r6, r1
 800481c:	b921      	cbnz	r1, 8004828 <_realloc_r+0x14>
 800481e:	4611      	mov	r1, r2
 8004820:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004824:	f7ff b856 	b.w	80038d4 <_malloc_r>
 8004828:	b922      	cbnz	r2, 8004834 <_realloc_r+0x20>
 800482a:	f7ff ffa7 	bl	800477c <_free_r>
 800482e:	4625      	mov	r5, r4
 8004830:	4628      	mov	r0, r5
 8004832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004834:	f000 f848 	bl	80048c8 <_malloc_usable_size_r>
 8004838:	42a0      	cmp	r0, r4
 800483a:	d20f      	bcs.n	800485c <_realloc_r+0x48>
 800483c:	4621      	mov	r1, r4
 800483e:	4638      	mov	r0, r7
 8004840:	f7ff f848 	bl	80038d4 <_malloc_r>
 8004844:	4605      	mov	r5, r0
 8004846:	2800      	cmp	r0, #0
 8004848:	d0f2      	beq.n	8004830 <_realloc_r+0x1c>
 800484a:	4631      	mov	r1, r6
 800484c:	4622      	mov	r2, r4
 800484e:	f7ff ff61 	bl	8004714 <memcpy>
 8004852:	4631      	mov	r1, r6
 8004854:	4638      	mov	r0, r7
 8004856:	f7ff ff91 	bl	800477c <_free_r>
 800485a:	e7e9      	b.n	8004830 <_realloc_r+0x1c>
 800485c:	4635      	mov	r5, r6
 800485e:	e7e7      	b.n	8004830 <_realloc_r+0x1c>

08004860 <_read_r>:
 8004860:	b538      	push	{r3, r4, r5, lr}
 8004862:	4604      	mov	r4, r0
 8004864:	4608      	mov	r0, r1
 8004866:	4611      	mov	r1, r2
 8004868:	2200      	movs	r2, #0
 800486a:	4d05      	ldr	r5, [pc, #20]	; (8004880 <_read_r+0x20>)
 800486c:	602a      	str	r2, [r5, #0]
 800486e:	461a      	mov	r2, r3
 8004870:	f7fb ff96 	bl	80007a0 <_read>
 8004874:	1c43      	adds	r3, r0, #1
 8004876:	d102      	bne.n	800487e <_read_r+0x1e>
 8004878:	682b      	ldr	r3, [r5, #0]
 800487a:	b103      	cbz	r3, 800487e <_read_r+0x1e>
 800487c:	6023      	str	r3, [r4, #0]
 800487e:	bd38      	pop	{r3, r4, r5, pc}
 8004880:	200001d4 	.word	0x200001d4

08004884 <_fstat_r>:
 8004884:	b538      	push	{r3, r4, r5, lr}
 8004886:	2300      	movs	r3, #0
 8004888:	4d06      	ldr	r5, [pc, #24]	; (80048a4 <_fstat_r+0x20>)
 800488a:	4604      	mov	r4, r0
 800488c:	4608      	mov	r0, r1
 800488e:	4611      	mov	r1, r2
 8004890:	602b      	str	r3, [r5, #0]
 8004892:	f7fb ffc9 	bl	8000828 <_fstat>
 8004896:	1c43      	adds	r3, r0, #1
 8004898:	d102      	bne.n	80048a0 <_fstat_r+0x1c>
 800489a:	682b      	ldr	r3, [r5, #0]
 800489c:	b103      	cbz	r3, 80048a0 <_fstat_r+0x1c>
 800489e:	6023      	str	r3, [r4, #0]
 80048a0:	bd38      	pop	{r3, r4, r5, pc}
 80048a2:	bf00      	nop
 80048a4:	200001d4 	.word	0x200001d4

080048a8 <_isatty_r>:
 80048a8:	b538      	push	{r3, r4, r5, lr}
 80048aa:	2300      	movs	r3, #0
 80048ac:	4d05      	ldr	r5, [pc, #20]	; (80048c4 <_isatty_r+0x1c>)
 80048ae:	4604      	mov	r4, r0
 80048b0:	4608      	mov	r0, r1
 80048b2:	602b      	str	r3, [r5, #0]
 80048b4:	f7fb ffc7 	bl	8000846 <_isatty>
 80048b8:	1c43      	adds	r3, r0, #1
 80048ba:	d102      	bne.n	80048c2 <_isatty_r+0x1a>
 80048bc:	682b      	ldr	r3, [r5, #0]
 80048be:	b103      	cbz	r3, 80048c2 <_isatty_r+0x1a>
 80048c0:	6023      	str	r3, [r4, #0]
 80048c2:	bd38      	pop	{r3, r4, r5, pc}
 80048c4:	200001d4 	.word	0x200001d4

080048c8 <_malloc_usable_size_r>:
 80048c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048cc:	1f18      	subs	r0, r3, #4
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	bfbc      	itt	lt
 80048d2:	580b      	ldrlt	r3, [r1, r0]
 80048d4:	18c0      	addlt	r0, r0, r3
 80048d6:	4770      	bx	lr

080048d8 <_init>:
 80048d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048da:	bf00      	nop
 80048dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048de:	bc08      	pop	{r3}
 80048e0:	469e      	mov	lr, r3
 80048e2:	4770      	bx	lr

080048e4 <_fini>:
 80048e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048e6:	bf00      	nop
 80048e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ea:	bc08      	pop	{r3}
 80048ec:	469e      	mov	lr, r3
 80048ee:	4770      	bx	lr
